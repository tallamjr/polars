Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 87, 97, 115, 124, 127, 128, 228, 246, 260, 574, 654, 679, 958], "refer": [0, 29, 99, 100, 103, 133, 246, 353, 410, 437, 496, 574, 780, 856, 920, 958], "input": [0, 60, 89, 99, 100, 103, 128, 129, 140, 151, 179, 193, 199, 213, 223, 226, 246, 253, 260, 366, 385, 404, 417, 430, 467, 519, 522, 525, 527, 528, 529, 530, 541, 542, 550, 551, 554, 563, 574, 585, 588, 598, 605, 630, 637, 642, 648, 652, 670, 679, 810, 834, 835, 837, 958], "output": [0, 25, 27, 29, 30, 31, 32, 70, 103, 128, 152, 153, 164, 174, 181, 190, 193, 219, 223, 246, 255, 260, 408, 409, 416, 516, 522, 531, 550, 561, 574, 585, 606, 607, 616, 620, 621, 630, 648, 651, 654, 670, 679, 947, 958], "seri": [0, 1, 22, 61, 62, 63, 64, 65, 68, 69, 70, 86, 88, 91, 93, 97, 118, 119, 121, 124, 128, 136, 144, 146, 148, 149, 154, 157, 158, 160, 162, 170, 171, 175, 186, 187, 201, 205, 208, 211, 212, 227, 246, 259, 260, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 280, 283, 284, 291, 292, 295, 296, 297, 300, 307, 308, 312, 313, 325, 327, 331, 334, 338, 340, 342, 345, 349, 350, 352, 356, 359, 368, 369, 375, 383, 385, 387, 388, 389, 390, 391, 393, 394, 395, 406, 408, 433, 437, 438, 439, 440, 441, 443, 455, 456, 459, 462, 463, 470, 485, 490, 496, 500, 506, 507, 508, 509, 515, 522, 523, 524, 526, 532, 534, 535, 536, 542, 543, 545, 547, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 562, 563, 564, 565, 566, 574, 585, 602, 648, 653, 670, 952, 954, 957, 959, 962, 963, 964], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 51, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 113, 114, 117, 119, 120, 244, 245, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 293, 294, 297, 298, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 547, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 574, 585, 592, 594, 598, 599, 602, 603, 606, 607, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 628, 630, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 678, 679, 698, 716, 726, 741, 742, 776, 806, 854, 901, 904, 916, 917, 927, 936, 937, 947, 958], "lazyfram": [0, 1, 48, 50, 60, 61, 62, 63, 64, 67, 68, 110, 111, 112, 113, 114, 115, 117, 121, 168, 180, 246, 297, 372, 574, 585, 669, 965], "express": [0, 65, 67, 70, 119, 121, 122, 128, 129, 140, 142, 144, 151, 177, 181, 189, 193, 199, 213, 223, 226, 228, 246, 253, 255, 256, 257, 259, 260, 271, 277, 279, 297, 309, 310, 311, 314, 320, 322, 326, 346, 362, 366, 369, 372, 376, 378, 379, 383, 385, 389, 392, 397, 400, 401, 406, 407, 408, 409, 410, 414, 415, 416, 417, 421, 423, 427, 429, 430, 432, 433, 434, 435, 440, 454, 455, 456, 458, 460, 465, 467, 471, 479, 480, 496, 502, 503, 506, 512, 513, 515, 518, 519, 524, 525, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 549, 550, 551, 554, 556, 558, 559, 560, 561, 563, 564, 567, 573, 585, 588, 592, 597, 598, 599, 602, 605, 624, 630, 632, 633, 634, 635, 637, 642, 648, 649, 652, 654, 670, 679, 696, 698, 730, 731, 732, 740, 749, 773, 796, 810, 874, 881, 895, 903, 904, 958], "extend": [0, 89, 246, 369, 574, 585, 678, 796, 958], "function": [0, 29, 61, 62, 63, 64, 69, 87, 93, 99, 100, 103, 110, 120, 128, 133, 139, 146, 173, 180, 181, 210, 214, 217, 218, 228, 246, 256, 260, 297, 320, 350, 363, 364, 365, 408, 409, 430, 432, 443, 444, 445, 446, 447, 448, 450, 451, 452, 464, 510, 520, 521, 522, 534, 535, 542, 543, 545, 550, 558, 574, 585, 616, 620, 623, 645, 654, 670, 679, 716, 740, 777, 790, 791, 792, 793, 806, 854, 862, 876, 877, 883, 888, 941, 958], "data": [0, 1, 5, 15, 18, 28, 29, 30, 34, 51, 60, 61, 63, 68, 71, 76, 77, 81, 83, 86, 87, 88, 89, 90, 91, 92, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 117, 118, 120, 121, 122, 127, 128, 130, 131, 141, 150, 151, 152, 164, 165, 166, 168, 179, 180, 184, 189, 190, 197, 204, 209, 210, 223, 225, 244, 246, 257, 260, 298, 306, 325, 351, 359, 362, 378, 379, 384, 391, 393, 400, 407, 427, 429, 437, 453, 454, 464, 496, 510, 512, 513, 519, 528, 549, 561, 574, 585, 590, 591, 599, 605, 606, 623, 634, 635, 648, 670, 678, 679, 717, 724, 729, 733, 746, 748, 786, 806, 856, 872, 873, 883, 888, 920, 939, 940, 941, 942, 944, 949, 957, 958], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 70, 76, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 102, 103, 110, 111, 116, 117, 118, 121, 124, 128, 146, 150, 152, 153, 154, 165, 204, 209, 210, 212, 215, 246, 260, 284, 297, 306, 307, 309, 310, 311, 327, 331, 334, 338, 340, 342, 345, 349, 352, 366, 380, 387, 389, 390, 410, 440, 491, 492, 493, 496, 510, 522, 528, 537, 538, 539, 541, 542, 549, 574, 585, 592, 597, 599, 606, 607, 624, 633, 634, 635, 643, 670, 703, 716, 724, 726, 730, 731, 732, 750, 754, 757, 764, 766, 769, 772, 776, 779, 804, 883, 915, 916, 917, 939, 940, 942, 950, 958], "config": [0, 60, 193, 223, 246, 539, 585, 630, 648, 670], "except": [0, 155, 167, 169, 202, 246, 541, 585, 612, 670, 805, 832, 929, 940, 949, 958], "test": [0, 103, 585, 608, 615, 670], "util": [0, 93, 545, 585, 599, 670], "sql": [0, 28, 48, 101, 166, 246, 585], "These": [1, 29, 125, 246, 356, 573, 783], "allow": [1, 29, 51, 76, 87, 110, 112, 113, 114, 115, 121, 122, 127, 164, 167, 168, 189, 190, 191, 210, 215, 225, 246, 346, 439, 454, 496, 574, 611, 612, 616, 620, 634, 635, 643, 649, 670, 773, 858, 873, 875, 920, 941, 958], "you": [1, 12, 29, 33, 60, 86, 88, 89, 90, 92, 97, 99, 100, 103, 104, 108, 110, 117, 124, 125, 128, 137, 141, 164, 167, 177, 189, 190, 206, 209, 214, 228, 246, 260, 279, 309, 310, 311, 349, 372, 385, 408, 410, 439, 444, 445, 446, 447, 448, 450, 451, 452, 481, 484, 496, 524, 534, 543, 574, 592, 595, 608, 612, 615, 633, 635, 654, 670, 678, 679, 698, 730, 731, 732, 776, 810, 858, 905, 908, 920, 940, 949, 958], "regist": [1, 61, 62, 63, 64], "custom": [1, 29, 61, 62, 63, 64, 128, 228, 246, 260, 297, 408, 443, 522, 550, 574, 616, 654, 670, 679, 716, 862, 958], "dedic": [1, 87, 164, 190, 246], "namespac": [1, 245, 573, 585, 669], "underli": [1, 72, 79, 86, 88, 89, 90, 92, 108, 119, 121, 122, 141, 164, 165, 190, 204, 246, 301, 325, 326, 330, 333, 335, 336, 337, 339, 341, 343, 344, 347, 348, 349, 351, 357, 358, 359, 360, 439, 453, 471, 473, 574, 670, 678, 719, 748, 749, 753, 756, 758, 759, 763, 765, 768, 770, 771, 774, 775, 776, 778, 784, 785, 786, 787, 858, 872, 883, 895, 897, 935, 940, 958], "polar": [1, 246, 573, 574, 579, 585, 670, 958, 965, 966], "class": [1, 2, 3, 4, 14, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 91, 119, 120, 209, 210, 246, 574, 579, 585, 670, 939, 940, 958, 965], "without": [1, 5, 69, 93, 102, 105, 109, 111, 115, 217, 218, 246, 260, 320, 350, 444, 445, 446, 447, 448, 450, 451, 452, 560, 574, 645, 670, 740, 746, 777, 806, 854, 958], "requir": [1, 29, 33, 91, 117, 118, 133, 189, 210, 246, 298, 363, 364, 365, 459, 496, 513, 574, 635, 670, 717, 791, 792, 793, 882, 920, 940, 941, 944, 958], "subclass": [1, 246], "mixin": 1, "expr": [1, 60, 61, 62, 63, 64, 65, 68, 70, 140, 142, 144, 166, 167, 177, 181, 189, 193, 223, 246, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 574, 575, 576, 579, 580, 581, 582, 598, 600, 602, 611, 612, 625, 630, 632, 648, 670, 696, 698, 740, 749, 797, 881, 895, 899, 918, 930, 958], "ar": [1, 5, 10, 14, 17, 25, 29, 33, 51, 70, 71, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 115, 117, 118, 120, 121, 125, 127, 128, 129, 133, 137, 139, 142, 146, 151, 152, 153, 164, 167, 168, 173, 174, 179, 189, 190, 193, 199, 205, 210, 213, 218, 219, 223, 226, 246, 256, 297, 316, 318, 319, 323, 324, 350, 356, 361, 363, 364, 365, 385, 387, 389, 390, 391, 393, 394, 395, 398, 410, 430, 437, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 464, 466, 467, 481, 484, 485, 504, 524, 525, 527, 529, 530, 531, 551, 554, 561, 563, 567, 568, 570, 573, 574, 575, 576, 579, 580, 581, 582, 585, 588, 595, 600, 605, 606, 607, 608, 612, 615, 616, 620, 621, 624, 627, 630, 634, 635, 637, 642, 645, 648, 649, 652, 670, 676, 678, 716, 738, 739, 777, 783, 789, 790, 791, 792, 793, 803, 810, 814, 817, 818, 820, 821, 822, 823, 830, 856, 860, 862, 868, 885, 888, 905, 908, 909, 928, 940, 941, 949, 952, 954, 958, 959, 962, 963, 964], "all": [1, 7, 14, 17, 22, 25, 29, 34, 67, 68, 70, 86, 89, 91, 92, 94, 99, 100, 102, 103, 104, 108, 110, 112, 113, 119, 120, 122, 134, 137, 143, 155, 160, 162, 164, 165, 168, 169, 173, 176, 177, 184, 189, 190, 198, 202, 207, 215, 217, 219, 246, 257, 258, 259, 279, 284, 294, 297, 299, 314, 320, 324, 366, 377, 380, 382, 384, 387, 390, 394, 395, 397, 401, 408, 409, 422, 428, 434, 437, 442, 459, 465, 467, 472, 478, 480, 483, 486, 487, 489, 495, 503, 516, 528, 541, 543, 558, 563, 567, 574, 579, 585, 592, 595, 597, 599, 601, 616, 620, 624, 633, 636, 643, 649, 670, 698, 703, 713, 716, 740, 742, 746, 805, 812, 827, 832, 856, 889, 896, 902, 904, 907, 910, 911, 913, 919, 929, 958], "support": [1, 29, 33, 68, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 103, 111, 119, 122, 125, 127, 164, 165, 190, 198, 199, 206, 210, 246, 292, 430, 465, 467, 490, 528, 574, 579, 636, 637, 670, 711, 889, 914, 941, 958], "target": [1, 29, 66, 246, 477, 496, 901, 920], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 60, 67, 68, 69, 71, 86, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 133, 137, 138, 139, 141, 146, 151, 152, 153, 154, 158, 160, 162, 163, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 182, 183, 184, 189, 190, 191, 193, 196, 198, 200, 201, 204, 206, 209, 210, 214, 215, 217, 218, 219, 220, 221, 223, 224, 228, 245, 246, 256, 259, 260, 261, 270, 279, 280, 284, 293, 297, 298, 305, 307, 314, 320, 325, 336, 346, 349, 350, 359, 368, 383, 384, 385, 389, 401, 405, 406, 408, 414, 415, 416, 417, 425, 426, 430, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 456, 458, 459, 460, 465, 466, 467, 482, 483, 488, 489, 495, 496, 499, 511, 513, 514, 515, 516, 520, 521, 523, 524, 529, 532, 534, 536, 542, 543, 545, 560, 564, 574, 585, 586, 589, 592, 595, 597, 599, 605, 606, 607, 609, 612, 616, 620, 621, 624, 627, 630, 632, 633, 634, 635, 636, 643, 645, 648, 649, 650, 651, 654, 669, 670, 678, 679, 688, 698, 699, 703, 712, 717, 723, 726, 740, 746, 748, 749, 759, 773, 776, 777, 786, 790, 795, 802, 803, 806, 811, 816, 817, 819, 824, 826, 828, 829, 831, 836, 838, 839, 840, 841, 843, 844, 846, 847, 849, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 866, 869, 870, 871, 873, 876, 877, 878, 881, 882, 883, 884, 889, 890, 892, 906, 907, 912, 913, 919, 920, 923, 924, 927, 928, 935, 937, 939, 940, 941, 943, 944, 946, 948, 949, 958], "featur": [1, 33, 37, 51, 66, 246], "i": [1, 5, 12, 14, 27, 29, 30, 31, 32, 37, 51, 60, 65, 66, 67, 68, 69, 70, 73, 75, 76, 78, 82, 84, 86, 87, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 127, 128, 137, 139, 147, 150, 151, 152, 153, 154, 155, 158, 159, 161, 163, 164, 165, 167, 168, 169, 171, 173, 174, 177, 179, 180, 181, 189, 190, 191, 198, 199, 200, 201, 202, 204, 210, 214, 215, 217, 218, 219, 220, 228, 245, 246, 253, 256, 258, 259, 260, 261, 271, 279, 282, 292, 296, 297, 320, 326, 335, 346, 350, 356, 363, 364, 365, 368, 380, 383, 385, 398, 405, 408, 410, 417, 430, 437, 439, 441, 444, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 460, 461, 464, 465, 466, 467, 469, 471, 472, 477, 478, 480, 482, 483, 485, 488, 489, 490, 493, 495, 496, 499, 516, 517, 521, 523, 524, 528, 529, 531, 532, 534, 535, 536, 543, 549, 551, 554, 556, 560, 561, 562, 564, 566, 567, 574, 592, 595, 597, 599, 605, 606, 607, 610, 612, 614, 616, 620, 621, 624, 633, 634, 635, 636, 637, 638, 643, 645, 646, 651, 654, 670, 677, 678, 679, 698, 701, 711, 715, 740, 749, 758, 773, 777, 783, 790, 791, 792, 793, 795, 803, 804, 805, 806, 809, 811, 813, 819, 824, 825, 826, 828, 829, 830, 832, 854, 856, 858, 860, 873, 874, 875, 876, 877, 878, 884, 885, 888, 889, 892, 895, 896, 901, 902, 904, 906, 907, 909, 912, 913, 914, 917, 919, 920, 923, 929, 935, 940, 941, 947, 948, 949, 958], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 51, 60, 69, 70, 87, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 128, 135, 137, 142, 143, 146, 151, 152, 153, 160, 162, 164, 165, 167, 171, 173, 176, 177, 180, 181, 189, 191, 193, 199, 200, 201, 207, 208, 210, 214, 215, 217, 218, 219, 220, 223, 226, 228, 246, 254, 260, 261, 271, 279, 297, 301, 302, 307, 320, 323, 324, 349, 353, 359, 361, 363, 364, 365, 371, 372, 384, 385, 398, 408, 410, 413, 430, 437, 439, 441, 444, 445, 446, 447, 448, 450, 451, 452, 454, 456, 459, 460, 464, 466, 467, 469, 473, 474, 475, 481, 482, 488, 490, 492, 494, 496, 517, 522, 523, 524, 528, 530, 531, 534, 536, 543, 545, 549, 551, 554, 556, 559, 560, 561, 562, 563, 564, 566, 573, 574, 585, 592, 594, 595, 600, 601, 605, 606, 607, 608, 612, 614, 615, 620, 630, 635, 637, 638, 643, 645, 646, 648, 652, 654, 670, 679, 698, 716, 719, 720, 726, 740, 776, 780, 786, 789, 791, 792, 793, 797, 798, 803, 806, 810, 830, 837, 856, 858, 860, 873, 876, 877, 878, 882, 884, 888, 892, 897, 898, 905, 906, 912, 914, 916, 920, 930, 936, 938, 939, 940, 941, 948, 949, 958], "librari": [1, 72, 79, 408, 574, 966], "author": 1, "domain": 1, "specif": [1, 25, 29, 86, 88, 90, 92, 99, 101, 102, 111, 121, 164, 246, 353, 443, 496, 574, 670, 780, 862, 920, 958], "capabl": [1, 29, 246], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 89, 99, 100, 101, 102, 103, 110, 111, 117, 129, 137, 141, 152, 153, 213, 215, 246, 256, 297, 369, 385, 387, 390, 391, 393, 394, 395, 417, 444, 445, 446, 447, 448, 450, 451, 452, 485, 567, 574, 588, 595, 597, 606, 607, 634, 635, 642, 643, 651, 670, 678, 796, 810, 814, 818, 820, 821, 822, 823, 876, 909, 958], "mai": [1, 33, 37, 68, 69, 86, 88, 89, 90, 92, 99, 102, 104, 111, 112, 115, 128, 139, 141, 167, 195, 196, 210, 217, 218, 246, 260, 291, 296, 297, 320, 325, 336, 350, 444, 445, 446, 447, 448, 450, 451, 452, 457, 458, 496, 534, 535, 543, 558, 574, 612, 616, 631, 632, 635, 645, 650, 654, 670, 678, 679, 710, 715, 740, 748, 759, 777, 790, 806, 854, 880, 881, 920, 958], "exist": [1, 28, 29, 102, 111, 121, 223, 246, 326, 648, 670, 749], "belong": [1, 152, 246, 606, 670], "core": [1, 91, 210, 246], "cannot": [1, 87, 99, 100, 103, 104, 117, 123, 128, 191, 228, 246, 301, 410, 454, 473, 492, 501, 574, 633, 654, 670, 679, 719, 873, 897, 916, 958], "overrid": [1, 29, 86, 88, 89, 90, 91, 92, 99, 119, 120, 122, 123, 246, 410, 574, 670, 837, 958], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 60, 61, 62, 63, 64, 66, 69, 70, 71, 86, 88, 89, 90, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 129, 132, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 160, 162, 163, 164, 166, 167, 170, 171, 172, 173, 174, 175, 177, 179, 181, 183, 185, 186, 187, 188, 189, 190, 191, 195, 196, 198, 199, 200, 201, 202, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 254, 255, 260, 275, 276, 277, 282, 283, 284, 292, 295, 297, 322, 327, 346, 349, 350, 353, 356, 366, 370, 372, 374, 383, 385, 392, 409, 410, 416, 418, 430, 432, 434, 440, 442, 444, 445, 446, 447, 448, 450, 451, 452, 458, 459, 466, 467, 500, 501, 503, 506, 518, 519, 520, 521, 522, 523, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 574, 580, 588, 592, 593, 594, 595, 597, 598, 599, 602, 604, 605, 606, 607, 609, 611, 612, 620, 621, 624, 626, 627, 628, 632, 633, 634, 635, 636, 637, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 675, 695, 696, 703, 716, 724, 741, 742, 750, 773, 776, 777, 780, 783, 798, 837, 846, 847, 854, 859, 876, 877, 924, 926, 936, 937, 938, 958, 962], "dt": [1, 60, 70, 153, 246, 539, 582, 607, 670, 964], "attempt": [1, 209, 246], "do": [1, 29, 60, 67, 110, 141, 167, 204, 214, 217, 246, 279, 320, 483, 489, 495, 520, 574, 592, 597, 612, 616, 624, 633, 634, 635, 670, 678, 698, 740, 907, 913, 919, 940, 949, 958], "so": [1, 51, 101, 110, 123, 150, 152, 153, 181, 246, 271, 282, 385, 483, 489, 495, 574, 606, 607, 670, 701, 907, 913, 919], "rais": [1, 13, 17, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 117, 118, 189, 246, 296, 301, 349, 416, 471, 473, 485, 496, 549, 715, 719, 776, 895, 897, 909, 920, 940, 949, 958], "an": [1, 5, 25, 28, 29, 37, 61, 63, 64, 65, 67, 70, 72, 76, 77, 79, 86, 99, 100, 101, 102, 103, 105, 108, 110, 112, 120, 121, 122, 128, 130, 131, 139, 142, 144, 146, 152, 153, 164, 165, 167, 177, 181, 187, 189, 204, 209, 217, 223, 228, 246, 255, 256, 260, 277, 279, 282, 296, 297, 301, 306, 309, 310, 311, 315, 316, 317, 318, 319, 320, 326, 349, 359, 369, 372, 397, 408, 409, 417, 435, 443, 444, 445, 446, 447, 448, 450, 451, 452, 471, 473, 478, 496, 506, 512, 524, 528, 540, 545, 549, 558, 559, 560, 563, 567, 574, 585, 590, 591, 592, 597, 599, 602, 606, 607, 612, 616, 624, 633, 648, 649, 654, 670, 679, 696, 698, 701, 715, 719, 724, 729, 730, 731, 732, 733, 736, 737, 738, 739, 740, 749, 776, 786, 790, 796, 819, 862, 863, 864, 865, 866, 867, 869, 870, 871, 876, 877, 895, 897, 902, 920, 940, 949, 958], "attributeerror": 1, "howev": [1, 89, 139, 246, 790, 958], "can": [1, 12, 29, 60, 70, 77, 89, 99, 100, 103, 104, 108, 110, 112, 114, 115, 120, 121, 122, 123, 125, 128, 129, 138, 146, 152, 160, 162, 177, 181, 193, 199, 213, 214, 217, 223, 228, 246, 260, 279, 297, 316, 319, 320, 346, 349, 356, 369, 384, 385, 422, 439, 444, 445, 446, 447, 448, 450, 451, 452, 456, 459, 461, 464, 467, 480, 483, 489, 495, 496, 516, 520, 524, 525, 528, 536, 543, 545, 564, 567, 573, 574, 588, 592, 597, 606, 630, 637, 642, 648, 650, 654, 670, 679, 698, 716, 740, 773, 776, 783, 796, 810, 842, 858, 876, 877, 878, 882, 885, 888, 904, 907, 913, 919, 920, 958], "other": [1, 17, 29, 70, 99, 100, 103, 110, 117, 118, 137, 141, 147, 166, 167, 173, 174, 189, 193, 218, 223, 244, 246, 253, 257, 259, 271, 275, 309, 310, 311, 322, 362, 376, 378, 379, 385, 389, 400, 407, 410, 421, 423, 427, 429, 467, 502, 510, 512, 519, 527, 529, 530, 551, 554, 563, 574, 585, 595, 611, 612, 620, 621, 630, 645, 648, 649, 670, 678, 694, 730, 731, 732, 744, 817, 875, 942, 950, 957, 958], "onli": [1, 17, 25, 29, 51, 60, 66, 68, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 121, 122, 125, 128, 137, 164, 167, 171, 190, 201, 206, 208, 246, 254, 260, 271, 308, 309, 310, 311, 346, 366, 375, 439, 514, 559, 574, 592, 595, 608, 612, 615, 670, 727, 730, 731, 732, 773, 801, 819, 858, 935, 938, 958], "gener": [1, 94, 101, 119, 120, 121, 122, 133, 181, 191, 207, 214, 246, 297, 454, 460, 574, 670, 716, 873, 884, 936, 958], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 574, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 697, 698, 699, 702, 703, 705, 710, 711, 712, 714, 716, 723, 724, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 793, 796, 797, 798, 799, 801, 804, 805, 806, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 880, 884, 885, 886, 887, 889, 890, 891, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 958], "register_expr_namespac": [1, 61, 63, 64], "greet": 1, "def": [1, 61, 62, 63, 64, 120, 121, 122, 180, 214, 246, 253, 432, 519, 550, 574, 623, 670], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 119], "self": [1, 61, 62, 63, 64, 67, 128, 129, 130, 131, 133, 134, 135, 137, 140, 141, 142, 143, 144, 151, 152, 153, 155, 157, 158, 159, 166, 167, 169, 170, 171, 172, 173, 174, 175, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 299, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 574, 588, 589, 590, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 670, 678, 679, 724, 733, 799, 807, 836, 837, 848, 851, 852, 857, 876, 877, 878, 890, 946, 950, 958], "_expr": [1, 62], "hello": [1, 483, 489, 495, 520, 703, 907, 913, 919], "return": [1, 25, 27, 29, 30, 31, 32, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 78, 80, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 124, 128, 129, 130, 133, 136, 137, 138, 139, 140, 142, 143, 146, 150, 151, 155, 157, 163, 164, 165, 166, 168, 169, 176, 177, 179, 180, 181, 189, 190, 191, 202, 203, 210, 213, 214, 215, 223, 225, 228, 231, 235, 240, 246, 256, 258, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 276, 280, 282, 283, 284, 295, 296, 300, 302, 305, 312, 313, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 355, 356, 357, 358, 360, 368, 381, 385, 387, 388, 389, 390, 391, 393, 394, 395, 402, 406, 410, 417, 422, 432, 440, 441, 454, 455, 461, 462, 463, 470, 472, 474, 476, 477, 478, 480, 481, 482, 484, 485, 488, 490, 491, 492, 493, 499, 505, 506, 507, 508, 509, 511, 512, 514, 515, 516, 519, 521, 522, 524, 525, 528, 537, 538, 539, 545, 547, 549, 550, 559, 560, 563, 565, 567, 574, 588, 590, 592, 595, 596, 597, 599, 608, 614, 615, 616, 623, 624, 633, 634, 635, 640, 641, 642, 643, 648, 651, 657, 661, 666, 670, 675, 676, 677, 679, 686, 687, 689, 690, 692, 693, 695, 699, 701, 702, 703, 714, 715, 718, 720, 723, 729, 741, 742, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 790, 795, 803, 805, 806, 812, 814, 815, 817, 818, 820, 821, 822, 823, 827, 829, 832, 836, 837, 842, 854, 860, 861, 873, 874, 875, 877, 885, 894, 895, 896, 898, 900, 901, 902, 904, 905, 906, 908, 909, 912, 914, 915, 916, 917, 920, 923, 929, 931, 943, 945, 946, 950, 958], "lit": [1, 97, 124, 385, 397, 534, 536, 543, 564, 567, 574, 798, 958], "alia": [1, 60, 62, 64, 152, 153, 169, 216, 223, 246, 253, 257, 260, 277, 279, 305, 309, 310, 311, 315, 316, 317, 318, 319, 321, 325, 326, 327, 330, 331, 332, 334, 336, 337, 338, 340, 342, 345, 346, 347, 349, 350, 351, 352, 353, 355, 356, 358, 359, 362, 372, 374, 376, 378, 379, 383, 385, 388, 389, 397, 400, 401, 402, 407, 410, 419, 421, 423, 427, 429, 431, 433, 439, 455, 471, 472, 475, 478, 481, 484, 490, 492, 493, 494, 500, 501, 502, 510, 511, 512, 518, 519, 522, 526, 527, 529, 530, 534, 535, 536, 539, 540, 543, 544, 550, 558, 559, 563, 564, 567, 574, 606, 607, 609, 615, 644, 648, 670, 698, 748, 750, 755, 773, 776, 782, 786, 832, 916, 917, 958], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 483, 489, 495, 703, 907, 913, 919], "select": [1, 28, 60, 61, 62, 63, 65, 98, 99, 100, 101, 102, 104, 108, 110, 115, 128, 163, 167, 177, 180, 189, 198, 211, 216, 219, 246, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 293, 294, 297, 298, 299, 305, 308, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 373, 375, 377, 380, 382, 383, 384, 386, 387, 389, 390, 392, 396, 397, 398, 399, 401, 403, 404, 405, 406, 408, 409, 411, 412, 413, 420, 422, 424, 425, 426, 428, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 482, 483, 485, 488, 489, 491, 492, 493, 495, 497, 498, 500, 501, 503, 504, 507, 508, 509, 511, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 539, 541, 542, 543, 544, 545, 547, 551, 552, 553, 554, 555, 556, 558, 561, 562, 563, 564, 565, 566, 574, 593, 609, 612, 623, 636, 644, 649, 651, 670, 698, 716, 776, 876, 877, 889, 901, 904, 930, 958], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 83, 86, 88, 89, 90, 91, 92, 93, 94, 97, 110, 115, 121, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 166, 167, 170, 171, 172, 173, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 191, 193, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 547, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 574, 588, 590, 592, 594, 595, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 697, 698, 699, 702, 703, 705, 710, 711, 712, 714, 716, 723, 724, 726, 727, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 793, 796, 797, 798, 799, 801, 804, 805, 806, 809, 810, 812, 814, 817, 818, 820, 821, 822, 823, 827, 829, 836, 837, 842, 850, 851, 852, 854, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 880, 884, 885, 886, 887, 889, 890, 891, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 927, 929, 930, 931, 932, 933, 936, 937, 938, 942, 943, 944, 945, 946, 947, 950, 958], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 101, 103, 110, 115, 116, 117, 118, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 254, 255, 256, 260, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 305, 306, 307, 308, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 335, 341, 343, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 421, 422, 423, 427, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 466, 467, 468, 471, 474, 475, 477, 479, 481, 484, 490, 491, 492, 493, 494, 500, 501, 502, 503, 505, 506, 507, 511, 514, 515, 516, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 574, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 675, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 697, 698, 699, 702, 705, 710, 711, 712, 714, 716, 723, 724, 726, 727, 728, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 753, 754, 755, 756, 758, 760, 761, 762, 764, 766, 767, 768, 770, 772, 774, 776, 777, 778, 782, 783, 785, 786, 790, 792, 793, 796, 797, 798, 799, 801, 804, 805, 806, 809, 810, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 850, 851, 852, 854, 855, 856, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 880, 884, 886, 887, 888, 889, 890, 892, 898, 899, 901, 903, 905, 908, 914, 918, 927, 928, 929, 930, 931, 932, 933, 935, 936, 939, 940, 941, 943, 944, 945, 946, 947, 948, 950, 958], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 121, 122, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 574, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 697, 698, 699, 701, 702, 705, 710, 711, 712, 714, 716, 723, 724, 726, 727, 728, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 791, 792, 793, 796, 797, 798, 799, 801, 804, 805, 806, 809, 810, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 831, 836, 838, 839, 840, 841, 842, 843, 844, 850, 851, 852, 854, 855, 856, 859, 860, 861, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 901, 903, 904, 910, 916, 917, 920, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 958], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 71, 86, 88, 89, 90, 91, 92, 93, 94, 101, 110, 115, 116, 117, 118, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 168, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 257, 258, 259, 260, 261, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343, 345, 346, 348, 349, 350, 351, 352, 353, 356, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 470, 472, 475, 478, 479, 480, 481, 483, 484, 485, 486, 487, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 574, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 675, 678, 679, 681, 685, 686, 687, 688, 689, 690, 697, 698, 699, 702, 703, 705, 710, 711, 712, 714, 716, 723, 726, 727, 728, 729, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 749, 751, 752, 756, 761, 762, 768, 770, 775, 776, 777, 778, 781, 783, 785, 787, 789, 790, 791, 792, 793, 796, 797, 798, 799, 801, 804, 805, 806, 809, 810, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 831, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 850, 851, 852, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 880, 884, 886, 888, 889, 890, 891, 892, 894, 896, 902, 903, 904, 907, 908, 909, 910, 911, 913, 916, 917, 919, 920, 927, 928, 929, 930, 931, 932, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 950, 958], "column_0": [1, 128, 214, 246], "register_dataframe_namespac": [1, 62, 63, 64], "split": [1, 61, 165, 246, 492, 493, 916, 917], "splitfram": [1, 61], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 61, 62, 65, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 110, 120, 121, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 293, 294, 297, 298, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 547, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 574, 607, 644, 645, 651, 654, 657, 666, 670, 698, 716, 726, 776, 901, 904, 911, 916, 917, 937, 958], "_df": [1, 61], "by_alternate_row": 1, "list": [1, 29, 36, 60, 61, 63, 67, 69, 86, 88, 89, 90, 92, 93, 96, 98, 99, 100, 101, 102, 104, 108, 110, 111, 120, 121, 122, 132, 135, 138, 139, 140, 144, 149, 151, 152, 157, 164, 176, 179, 189, 190, 193, 199, 205, 206, 214, 215, 216, 217, 223, 226, 227, 246, 254, 275, 278, 279, 280, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 368, 374, 382, 408, 417, 418, 430, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 458, 466, 467, 478, 491, 500, 501, 506, 525, 528, 529, 536, 540, 549, 551, 554, 563, 564, 574, 593, 594, 596, 598, 602, 605, 606, 620, 630, 637, 643, 644, 648, 649, 652, 653, 670, 691, 694, 697, 698, 699, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 728, 741, 790, 795, 799, 802, 806, 807, 817, 854, 860, 862, 863, 864, 865, 866, 867, 869, 870, 871, 874, 902, 915, 930, 939, 958], "with_row_count": [1, 246, 410, 574, 670, 877, 958], "name": [1, 15, 19, 21, 28, 29, 31, 50, 61, 62, 63, 64, 69, 70, 75, 86, 88, 89, 90, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 118, 119, 120, 121, 122, 128, 129, 132, 135, 136, 137, 140, 145, 148, 150, 151, 163, 164, 166, 167, 173, 179, 181, 185, 189, 190, 192, 193, 199, 205, 207, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 246, 255, 260, 297, 350, 356, 366, 385, 397, 409, 416, 418, 430, 434, 467, 500, 501, 503, 523, 525, 527, 528, 529, 530, 531, 533, 536, 541, 547, 548, 551, 554, 556, 557, 559, 561, 563, 564, 565, 574, 588, 593, 594, 595, 598, 605, 611, 612, 620, 627, 629, 630, 637, 642, 643, 644, 645, 648, 650, 651, 652, 670, 675, 716, 729, 741, 777, 783, 854, 859, 924, 926, 936, 937, 941, 958], "n": [1, 11, 14, 22, 32, 36, 38, 61, 62, 63, 64, 70, 96, 97, 99, 100, 110, 124, 128, 130, 141, 152, 155, 164, 165, 169, 190, 191, 200, 202, 203, 206, 208, 220, 231, 240, 246, 278, 283, 295, 305, 320, 321, 325, 326, 332, 355, 359, 369, 381, 402, 431, 440, 454, 464, 469, 486, 492, 493, 505, 507, 511, 512, 517, 519, 531, 545, 547, 556, 559, 561, 562, 565, 566, 574, 590, 592, 606, 608, 615, 638, 640, 641, 646, 657, 666, 670, 678, 697, 702, 714, 723, 729, 740, 743, 748, 749, 755, 782, 786, 796, 805, 832, 850, 873, 888, 892, 910, 916, 917, 929, 931, 938, 943, 948, 958], "filter": [1, 61, 102, 110, 111, 115, 137, 160, 161, 162, 228, 246, 475, 494, 518, 524, 543, 574, 595, 599, 609, 654, 670, 876, 958], "col": [1, 27, 29, 60, 61, 62, 63, 65, 90, 92, 110, 120, 121, 128, 140, 144, 151, 152, 153, 161, 163, 177, 180, 189, 193, 199, 216, 223, 226, 246, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 293, 294, 297, 298, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 372, 373, 374, 375, 376, 378, 379, 383, 384, 385, 386, 388, 389, 391, 392, 393, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 410, 411, 412, 413, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 527, 529, 530, 534, 535, 536, 539, 542, 543, 544, 545, 546, 551, 554, 557, 558, 564, 567, 574, 598, 602, 605, 606, 607, 609, 623, 630, 637, 644, 648, 649, 652, 670, 698, 716, 726, 773, 776, 860, 876, 877, 901, 904, 920, 958], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 60, 61, 62, 64, 65, 69, 94, 99, 100, 101, 103, 104, 108, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 128, 130, 131, 133, 134, 135, 138, 142, 143, 146, 147, 149, 150, 151, 152, 154, 158, 163, 164, 165, 166, 168, 170, 171, 172, 175, 176, 177, 178, 181, 182, 183, 187, 191, 192, 193, 196, 198, 199, 200, 201, 207, 208, 210, 211, 214, 217, 219, 220, 223, 224, 226, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 252, 254, 257, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 277, 279, 282, 288, 297, 306, 308, 310, 311, 312, 313, 315, 320, 323, 324, 333, 337, 338, 340, 341, 345, 351, 352, 362, 363, 364, 365, 367, 369, 370, 371, 375, 376, 378, 379, 380, 384, 387, 390, 391, 393, 394, 395, 397, 398, 400, 403, 404, 405, 407, 408, 410, 411, 412, 413, 420, 421, 423, 425, 426, 427, 428, 429, 431, 432, 433, 436, 437, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 459, 461, 462, 463, 464, 468, 469, 477, 496, 499, 502, 504, 508, 509, 510, 512, 517, 524, 525, 526, 527, 529, 531, 533, 534, 536, 540, 543, 548, 552, 553, 556, 557, 558, 561, 564, 566, 567, 574, 590, 591, 594, 596, 600, 601, 605, 606, 611, 614, 619, 624, 625, 629, 630, 632, 633, 635, 637, 638, 646, 648, 649, 650, 652, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 670, 680, 681, 682, 683, 684, 685, 686, 688, 690, 698, 701, 724, 727, 729, 734, 735, 740, 741, 742, 744, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 778, 779, 789, 791, 792, 793, 797, 801, 804, 806, 814, 816, 818, 820, 821, 822, 823, 829, 830, 836, 839, 840, 850, 854, 855, 856, 862, 864, 865, 867, 868, 869, 871, 873, 885, 886, 887, 891, 892, 894, 901, 904, 920, 923, 932, 933, 936, 941, 942, 946, 948, 949, 958], "drop": [1, 89, 128, 136, 137, 215, 223, 246, 278, 321, 323, 324, 496, 574, 595, 643, 648, 670, 697, 743, 745, 746, 920, 958], "aaa": [1, 29, 246, 500, 501], "bbb": [1, 29, 246, 500, 501], "ccc": [1, 29, 246, 500, 501], "ddd": [1, 29, 246, 500, 501], "eee": [1, 29, 246], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 51, 60, 61, 68, 69, 70, 73, 75, 86, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 127, 128, 129, 135, 136, 137, 138, 140, 145, 148, 150, 151, 152, 153, 157, 158, 163, 164, 166, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 199, 200, 201, 205, 207, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 246, 256, 258, 260, 270, 275, 280, 293, 296, 297, 326, 330, 333, 335, 336, 337, 339, 341, 343, 344, 347, 348, 351, 357, 358, 360, 366, 368, 372, 374, 385, 397, 410, 415, 416, 418, 430, 434, 438, 440, 441, 444, 445, 446, 447, 448, 450, 451, 452, 459, 466, 467, 476, 492, 493, 496, 503, 518, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 574, 588, 594, 595, 596, 598, 605, 606, 607, 611, 612, 616, 617, 618, 619, 620, 622, 623, 625, 627, 629, 630, 637, 638, 639, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 670, 676, 677, 694, 699, 712, 715, 741, 751, 752, 753, 756, 758, 759, 763, 765, 768, 770, 771, 774, 775, 778, 781, 784, 785, 787, 795, 854, 860, 882, 900, 916, 917, 927, 936, 937, 958], "txt": [1, 110], "utf8": [1, 9, 17, 51, 71, 89, 93, 99, 100, 110, 119, 138, 139, 140, 146, 192, 209, 246, 284, 368, 410, 470, 474, 477, 478, 480, 481, 490, 491, 492, 493, 496, 528, 530, 574, 596, 598, 629, 670, 703, 780, 795, 828, 894, 898, 901, 902, 904, 905, 914, 915, 916, 917, 920, 958], "register_lazyframe_namespac": [1, 61, 62, 64], "dtypeoper": [1, 63], "ldf": [1, 63, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666], "_ldf": [1, 63], "upcast_integer_typ": [1, 63], "with_column": [1, 63, 153, 180, 246, 253, 260, 271, 279, 306, 307, 309, 310, 311, 316, 319, 321, 349, 362, 376, 378, 379, 380, 384, 385, 388, 391, 393, 394, 395, 397, 400, 407, 410, 421, 423, 427, 430, 431, 432, 433, 475, 481, 484, 486, 487, 490, 492, 493, 494, 496, 499, 502, 510, 512, 519, 522, 524, 527, 530, 536, 540, 550, 564, 567, 574, 607, 623, 670, 698, 726, 776, 920], "tp": [1, 63], "cast": [1, 62, 63, 71, 86, 146, 152, 153, 180, 210, 223, 246, 259, 307, 318, 319, 325, 410, 429, 432, 439, 479, 480, 499, 504, 510, 530, 574, 606, 607, 623, 648, 670, 726, 738, 739, 748, 858, 903, 904, 928, 937, 942, 958], "int64": [1, 29, 31, 62, 63, 93, 97, 99, 124, 138, 146, 152, 153, 180, 192, 204, 210, 246, 318, 319, 331, 334, 338, 340, 342, 345, 352, 366, 432, 439, 479, 504, 510, 524, 528, 541, 549, 563, 574, 596, 606, 607, 623, 629, 651, 670, 738, 739, 754, 757, 764, 766, 769, 772, 779, 858, 875, 928, 940, 941, 942, 958], "int8": [1, 63, 146, 246, 318, 319, 504, 574, 738, 739, 743, 837, 861, 928, 946, 958], "int16": [1, 63, 318, 319, 504, 574, 738, 739, 837, 928, 938, 958], "int32": [1, 63, 86, 89, 93, 121, 122, 152, 153, 165, 246, 306, 336, 360, 510, 574, 606, 607, 670, 759, 787, 836, 942, 958], "b": [1, 26, 27, 30, 33, 51, 63, 68, 71, 86, 88, 89, 90, 91, 92, 93, 94, 103, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 157, 158, 160, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 255, 259, 260, 272, 275, 279, 284, 286, 299, 306, 307, 314, 322, 323, 324, 366, 370, 371, 372, 374, 377, 380, 382, 384, 385, 387, 390, 391, 392, 393, 394, 395, 397, 401, 409, 422, 428, 430, 432, 434, 442, 459, 465, 467, 476, 479, 486, 503, 514, 516, 518, 520, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 540, 541, 542, 543, 544, 547, 550, 551, 552, 553, 554, 555, 556, 558, 561, 562, 563, 564, 565, 566, 574, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 678, 698, 726, 742, 744, 789, 790, 798, 810, 817, 828, 859, 875, 900, 903, 910, 927, 941, 945, 958], "4": [1, 14, 22, 26, 27, 29, 30, 33, 51, 60, 61, 62, 63, 64, 65, 68, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 110, 117, 118, 122, 128, 129, 130, 131, 134, 137, 140, 141, 142, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 171, 173, 176, 177, 179, 180, 181, 182, 186, 190, 194, 199, 202, 203, 204, 205, 206, 207, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 257, 259, 260, 272, 277, 278, 279, 280, 283, 291, 292, 295, 299, 305, 306, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 330, 334, 341, 342, 343, 347, 348, 350, 351, 352, 356, 357, 358, 360, 362, 367, 370, 371, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 394, 395, 397, 400, 401, 402, 404, 407, 409, 410, 421, 423, 427, 429, 430, 433, 434, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 457, 458, 461, 465, 466, 467, 468, 471, 481, 482, 484, 485, 488, 490, 492, 493, 496, 500, 501, 502, 503, 505, 506, 507, 510, 511, 512, 519, 522, 523, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 540, 542, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 574, 588, 590, 591, 592, 595, 597, 598, 599, 600, 601, 603, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 678, 681, 688, 697, 698, 699, 702, 710, 711, 714, 723, 727, 728, 730, 740, 742, 744, 756, 757, 763, 765, 768, 769, 770, 771, 775, 777, 778, 779, 780, 783, 784, 785, 797, 798, 805, 806, 809, 810, 812, 817, 820, 821, 822, 823, 827, 837, 843, 850, 851, 852, 854, 856, 860, 865, 867, 868, 869, 870, 871, 873, 875, 885, 889, 890, 895, 905, 906, 908, 909, 912, 914, 916, 917, 920, 927, 929, 930, 931, 938, 941, 942, 943, 950, 958], "c": [1, 26, 27, 30, 33, 51, 61, 63, 71, 89, 91, 93, 103, 110, 120, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 149, 150, 151, 152, 155, 157, 158, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 185, 187, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 208, 209, 210, 211, 213, 214, 217, 218, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 236, 239, 240, 246, 253, 260, 275, 284, 286, 385, 397, 430, 432, 459, 492, 496, 514, 516, 520, 521, 523, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 542, 543, 544, 547, 550, 551, 552, 553, 554, 555, 556, 561, 562, 564, 565, 566, 574, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 605, 606, 611, 614, 620, 624, 627, 628, 629, 630, 633, 636, 637, 642, 645, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 665, 666, 670, 742, 810, 828, 916, 920, 945, 958], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 60, 61, 63, 64, 65, 68, 69, 86, 89, 90, 91, 92, 93, 96, 97, 100, 116, 121, 122, 124, 128, 130, 131, 134, 140, 141, 142, 143, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 161, 163, 164, 167, 168, 169, 171, 173, 176, 177, 179, 181, 182, 183, 186, 190, 194, 199, 202, 203, 204, 205, 206, 212, 217, 219, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 254, 257, 277, 279, 280, 283, 288, 294, 295, 305, 306, 307, 308, 309, 310, 311, 320, 321, 322, 326, 327, 331, 349, 351, 352, 353, 357, 365, 366, 369, 375, 376, 378, 379, 381, 382, 385, 388, 391, 393, 394, 395, 397, 400, 402, 421, 423, 429, 430, 431, 434, 436, 437, 441, 442, 443, 444, 445, 447, 451, 453, 455, 461, 467, 472, 480, 481, 484, 485, 499, 502, 503, 505, 507, 511, 512, 522, 523, 526, 527, 529, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 561, 562, 564, 565, 566, 574, 590, 591, 592, 597, 598, 599, 600, 601, 603, 605, 606, 607, 608, 610, 612, 613, 614, 615, 618, 619, 620, 624, 631, 632, 633, 636, 637, 638, 639, 640, 641, 647, 648, 650, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 678, 681, 685, 688, 698, 699, 702, 705, 714, 723, 726, 728, 730, 736, 740, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 776, 778, 779, 781, 784, 785, 793, 796, 805, 806, 809, 810, 836, 837, 843, 850, 851, 852, 854, 855, 856, 860, 862, 863, 864, 866, 867, 870, 873, 875, 885, 891, 896, 904, 905, 909, 929, 943, 946, 950, 958], "6": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 86, 89, 90, 91, 92, 94, 128, 132, 135, 136, 137, 138, 140, 141, 144, 145, 147, 148, 149, 150, 152, 153, 155, 157, 158, 159, 161, 163, 164, 166, 170, 171, 172, 173, 175, 178, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 223, 224, 231, 239, 240, 246, 253, 257, 260, 280, 299, 306, 318, 319, 322, 326, 346, 348, 351, 361, 370, 371, 377, 381, 382, 384, 402, 429, 435, 437, 438, 441, 444, 445, 446, 447, 448, 450, 451, 452, 455, 467, 472, 476, 481, 484, 485, 502, 505, 507, 519, 520, 522, 534, 535, 536, 540, 543, 550, 564, 574, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 606, 607, 608, 610, 611, 613, 615, 616, 620, 624, 627, 629, 630, 631, 632, 633, 636, 637, 640, 641, 644, 645, 647, 648, 650, 651, 657, 665, 666, 670, 678, 699, 728, 734, 738, 739, 744, 773, 785, 806, 843, 856, 860, 865, 867, 868, 869, 871, 875, 896, 900, 905, 909, 928, 958], "7": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 70, 132, 133, 134, 135, 136, 138, 140, 144, 145, 147, 152, 153, 155, 157, 159, 166, 170, 171, 172, 175, 178, 181, 183, 185, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 208, 209, 210, 211, 217, 218, 219, 220, 221, 246, 253, 257, 319, 326, 330, 347, 349, 350, 356, 358, 360, 367, 381, 384, 402, 410, 429, 441, 445, 451, 467, 505, 507, 522, 534, 535, 543, 550, 564, 574, 593, 594, 596, 598, 602, 606, 607, 608, 610, 611, 615, 625, 627, 629, 630, 640, 641, 645, 651, 670, 685, 749, 753, 759, 776, 777, 783, 785, 829, 837, 860, 870, 958], "float32": [1, 27, 63, 146, 208, 246, 549, 670, 813, 836, 958], "lazi": [1, 63, 68, 70, 97, 110, 121, 124, 167, 180, 246, 260, 297, 524, 545, 574, 585, 611, 612, 649, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 670], "i16": [1, 63, 459, 574, 837, 938, 958], "i32": [1, 63, 86, 89, 93, 121, 193, 246, 306, 336, 360, 459, 485, 567, 574, 630, 670, 759, 787, 836, 909, 958], "f32": [1, 63, 137, 208, 246, 279, 437, 459, 540, 574, 595, 670, 698, 836, 856, 958], "i64": [1, 14, 18, 61, 62, 63, 64, 68, 86, 88, 89, 90, 91, 92, 93, 97, 110, 122, 124, 128, 129, 130, 131, 132, 135, 137, 138, 140, 141, 143, 144, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 162, 166, 167, 170, 173, 175, 179, 180, 181, 182, 185, 186, 187, 188, 191, 193, 195, 196, 198, 199, 201, 202, 203, 205, 211, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 236, 239, 240, 246, 253, 255, 259, 260, 278, 279, 280, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 305, 307, 309, 310, 311, 316, 317, 318, 319, 321, 322, 331, 332, 334, 338, 340, 342, 345, 352, 355, 366, 369, 371, 372, 373, 374, 376, 377, 381, 382, 383, 384, 385, 388, 391, 393, 394, 395, 397, 399, 402, 406, 408, 409, 421, 422, 423, 430, 431, 432, 433, 434, 435, 438, 439, 441, 442, 454, 456, 457, 459, 460, 461, 465, 466, 467, 486, 487, 500, 501, 502, 503, 504, 505, 506, 507, 511, 512, 513, 515, 518, 520, 522, 527, 528, 530, 534, 535, 536, 539, 540, 541, 542, 543, 547, 549, 550, 551, 554, 558, 560, 564, 565, 567, 574, 588, 590, 592, 594, 595, 598, 599, 601, 602, 603, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 620, 622, 623, 624, 627, 628, 630, 631, 632, 636, 637, 639, 640, 641, 642, 643, 644, 645, 648, 650, 652, 653, 654, 656, 657, 658, 659, 662, 665, 666, 670, 678, 679, 697, 698, 699, 702, 710, 711, 712, 714, 723, 726, 730, 733, 736, 737, 738, 739, 742, 754, 755, 757, 764, 766, 769, 772, 779, 782, 796, 798, 799, 805, 809, 817, 842, 859, 860, 863, 866, 870, 873, 876, 877, 880, 884, 885, 889, 890, 927, 929, 930, 931, 937, 943, 944, 947, 950, 958], "register_series_namespac": [1, 61, 62, 63], "math": [1, 64, 734, 886, 932, 958], "mathshortcut": [1, 64], "": [1, 27, 29, 64, 69, 86, 93, 94, 99, 100, 111, 122, 129, 135, 137, 139, 140, 151, 152, 158, 166, 167, 179, 181, 186, 187, 193, 199, 203, 207, 213, 215, 216, 217, 246, 283, 284, 291, 292, 295, 332, 353, 366, 398, 417, 422, 425, 426, 430, 431, 439, 443, 467, 481, 482, 484, 488, 490, 491, 493, 496, 499, 500, 501, 525, 528, 531, 536, 541, 544, 545, 551, 554, 556, 563, 564, 574, 588, 594, 595, 598, 605, 606, 612, 630, 637, 642, 643, 644, 654, 670, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 697, 699, 702, 703, 705, 710, 711, 712, 714, 723, 724, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 749, 755, 777, 783, 790, 792, 793, 796, 797, 798, 799, 801, 804, 805, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 850, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 880, 884, 885, 886, 887, 889, 890, 892, 895, 896, 898, 899, 900, 902, 903, 905, 906, 907, 908, 909, 910, 912, 913, 914, 917, 918, 919, 920, 923, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 958], "_": [1, 60, 64, 94, 181, 207, 246, 492, 916, 936, 958], "squar": [1, 64, 228, 398, 468, 574, 654, 830, 891, 958], "cube": [1, 64, 433, 574], "s2": [1, 118, 146, 246, 678, 728, 744, 817, 829, 843, 875, 941, 950, 958], "renam": [1, 89, 99, 100, 193, 223, 226, 246, 255, 409, 419, 501, 560, 563, 574, 630, 648, 652, 670, 837, 926, 937, 958], "n2": 1, "in_plac": [1, 157, 197, 221, 246, 857, 859, 883, 890, 958], "true": [1, 5, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 65, 67, 68, 70, 71, 86, 87, 91, 93, 96, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 127, 129, 130, 131, 134, 143, 146, 147, 149, 150, 151, 152, 158, 160, 161, 162, 164, 167, 168, 171, 176, 177, 179, 181, 182, 189, 190, 191, 193, 199, 205, 210, 213, 214, 215, 216, 217, 219, 223, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 254, 256, 257, 258, 259, 260, 271, 276, 293, 296, 301, 306, 315, 316, 317, 318, 319, 335, 349, 350, 351, 356, 361, 362, 363, 364, 365, 378, 379, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 407, 427, 429, 439, 449, 454, 459, 464, 466, 467, 471, 473, 475, 479, 480, 485, 491, 492, 494, 496, 500, 501, 506, 513, 516, 519, 521, 522, 524, 525, 531, 532, 543, 559, 561, 563, 567, 574, 588, 590, 591, 592, 597, 599, 601, 605, 606, 611, 612, 614, 616, 620, 624, 630, 633, 634, 635, 637, 642, 643, 644, 648, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 670, 676, 677, 678, 679, 689, 712, 715, 719, 724, 728, 729, 758, 776, 777, 778, 783, 789, 791, 792, 793, 799, 803, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 843, 851, 852, 858, 868, 875, 888, 890, 895, 897, 899, 903, 904, 909, 915, 916, 918, 920, 940, 941, 949, 950, 958], "s3": [1, 102, 111, 115, 958], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 57, 59, 60, 61, 63, 64, 68, 69, 94, 116, 120, 121, 128, 132, 133, 134, 135, 136, 137, 138, 140, 144, 145, 147, 150, 155, 157, 166, 170, 171, 172, 175, 183, 185, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 208, 209, 210, 211, 217, 218, 220, 221, 223, 246, 257, 259, 272, 278, 279, 314, 316, 319, 320, 323, 324, 326, 384, 401, 423, 429, 433, 434, 441, 442, 445, 446, 448, 450, 452, 459, 465, 467, 482, 488, 496, 503, 507, 519, 523, 526, 531, 532, 533, 535, 536, 540, 542, 547, 550, 551, 552, 553, 554, 555, 556, 561, 562, 564, 565, 566, 574, 593, 594, 595, 596, 598, 602, 608, 611, 615, 616, 624, 627, 629, 630, 640, 641, 645, 648, 651, 670, 697, 698, 740, 759, 806, 829, 850, 854, 860, 862, 865, 867, 868, 869, 871, 906, 912, 920, 958], "9": [1, 26, 27, 30, 33, 60, 68, 128, 133, 134, 146, 153, 155, 159, 193, 202, 217, 218, 221, 223, 239, 246, 253, 257, 259, 272, 278, 290, 293, 314, 316, 319, 323, 324, 326, 330, 347, 357, 358, 384, 389, 397, 401, 429, 441, 443, 445, 451, 461, 465, 507, 522, 529, 534, 535, 574, 607, 608, 610, 615, 630, 640, 645, 648, 665, 670, 697, 712, 742, 753, 763, 765, 771, 777, 778, 783, 784, 817, 829, 860, 862, 870, 872, 885, 958], "27": [1, 64, 239, 319, 336, 348, 360, 574, 665, 958], "16": [1, 29, 41, 54, 62, 69, 94, 116, 152, 153, 223, 246, 316, 319, 384, 423, 433, 445, 485, 496, 522, 534, 539, 540, 543, 556, 561, 574, 606, 607, 633, 648, 670, 777, 783, 850, 886, 909, 920, 932, 958], "64": [1, 33, 40, 43, 56, 62, 64, 246, 423, 433, 574, 635, 670, 850, 958], "25": [1, 29, 64, 70, 93, 134, 152, 153, 167, 219, 223, 246, 321, 336, 350, 356, 360, 512, 545, 574, 606, 607, 612, 618, 646, 648, 670, 742, 743, 777, 783, 789, 806, 850, 854, 958], "125": [1, 29, 64, 246, 253, 574, 850, 958], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 180, 210, 246, 432, 525, 544, 574, 623, 670, 679, 940, 941, 958], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 66, 86, 87, 88, 89, 90, 91, 92, 99, 100, 102, 103, 104, 108, 110, 111, 112, 114, 119, 121, 122, 125, 128, 133, 137, 141, 143, 144, 146, 163, 164, 165, 179, 180, 189, 190, 205, 206, 209, 210, 215, 217, 246, 253, 257, 260, 275, 279, 306, 351, 362, 371, 376, 378, 379, 389, 400, 407, 408, 410, 419, 421, 423, 427, 429, 432, 441, 443, 455, 458, 485, 496, 502, 506, 512, 519, 522, 531, 542, 549, 561, 567, 574, 595, 601, 623, 643, 670, 678, 679, 694, 698, 744, 778, 798, 817, 829, 837, 860, 862, 874, 877, 909, 920, 930, 939, 940, 941, 958], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 133, 180, 210, 246, 432, 574, 623, 670, 941, 958], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 958, 965], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 87, 99, 100, 103, 119, 125, 137, 151, 159, 164, 177, 183, 189, 190, 215, 223, 238, 246, 253, 256, 257, 362, 369, 376, 378, 379, 384, 400, 407, 421, 423, 427, 429, 433, 436, 437, 444, 445, 446, 447, 448, 450, 451, 452, 502, 512, 514, 519, 531, 556, 557, 561, 568, 570, 574, 575, 576, 579, 580, 581, 582, 585, 595, 610, 625, 643, 648, 664, 670, 679, 796, 809, 855, 856, 867, 942, 952, 954, 958, 959, 962, 963, 964], "A": [4, 27, 29, 48, 67, 70, 93, 99, 100, 101, 108, 110, 123, 146, 152, 167, 181, 190, 205, 217, 218, 219, 223, 246, 252, 297, 326, 331, 334, 338, 340, 342, 345, 352, 362, 369, 378, 379, 387, 390, 391, 393, 400, 407, 408, 409, 417, 427, 434, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 471, 472, 477, 478, 480, 486, 487, 499, 503, 529, 540, 544, 574, 606, 612, 627, 645, 648, 670, 716, 749, 754, 757, 764, 766, 769, 772, 779, 796, 862, 863, 864, 866, 869, 870, 871, 895, 896, 901, 902, 904, 910, 911, 920, 923, 958], "encod": [4, 59, 99, 100, 110, 301, 473, 719, 897], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 30, 31, 32, 61, 65, 70, 87, 89, 92, 94, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 125, 127, 132, 137, 151, 154, 164, 167, 173, 191, 193, 198, 207, 214, 215, 217, 223, 246, 260, 292, 296, 297, 359, 380, 389, 410, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 460, 464, 465, 483, 489, 490, 495, 524, 559, 563, 567, 574, 593, 595, 597, 605, 611, 612, 616, 620, 630, 634, 635, 636, 643, 648, 651, 654, 670, 678, 679, 711, 715, 716, 786, 804, 817, 837, 862, 863, 864, 865, 866, 867, 869, 870, 871, 873, 877, 884, 888, 889, 907, 913, 914, 919, 940, 958], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 51, 59, 70, 71, 93, 99, 100, 110, 119, 120, 122, 129, 146, 150, 151, 152, 153, 167, 193, 199, 208, 213, 217, 219, 223, 226, 246, 253, 284, 303, 307, 346, 350, 356, 368, 374, 385, 410, 430, 444, 445, 446, 447, 448, 450, 451, 452, 467, 470, 471, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 525, 527, 529, 530, 544, 551, 554, 563, 574, 588, 597, 604, 605, 606, 607, 612, 630, 637, 642, 648, 651, 652, 670, 703, 721, 726, 773, 777, 783, 795, 810, 893, 894, 895, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 938, 958], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 604, 626, 670], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 279, 698], "bool": [5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 60, 65, 67, 68, 71, 86, 87, 91, 93, 99, 100, 104, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 127, 129, 130, 131, 143, 144, 146, 147, 149, 150, 151, 152, 157, 158, 160, 161, 162, 167, 179, 181, 191, 197, 199, 205, 210, 213, 214, 215, 216, 219, 221, 223, 230, 232, 233, 236, 246, 256, 257, 258, 259, 260, 270, 276, 277, 279, 293, 296, 298, 301, 306, 315, 316, 317, 318, 319, 320, 335, 349, 351, 361, 362, 363, 364, 365, 378, 379, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 407, 408, 414, 415, 427, 429, 437, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 458, 459, 464, 466, 467, 471, 473, 475, 485, 486, 487, 491, 492, 494, 496, 501, 513, 516, 519, 521, 522, 524, 525, 531, 534, 549, 559, 561, 563, 574, 588, 590, 592, 597, 599, 601, 602, 605, 606, 611, 612, 616, 620, 624, 633, 634, 635, 637, 642, 643, 644, 648, 656, 658, 659, 662, 670, 676, 677, 678, 679, 688, 695, 696, 698, 712, 715, 717, 719, 724, 729, 736, 737, 738, 739, 740, 741, 758, 776, 778, 789, 791, 792, 793, 799, 803, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 851, 852, 854, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 875, 877, 878, 883, 888, 890, 895, 897, 899, 909, 910, 911, 915, 916, 918, 920, 939, 940, 941, 944, 947, 949, 958], "decim": [5, 27, 29, 246, 453, 574, 872, 958], "temporari": 5, "remov": [5, 7, 135, 218, 246, 260, 366, 483, 489, 495, 496, 541, 548, 556, 561, 574, 594, 645, 670, 907, 913, 919, 920], "later": 5, "onc": [5, 99, 100, 103, 123, 127, 128, 191, 226, 246, 260, 454, 574, 589, 652, 670, 679, 873, 958], "stabil": 5, "happen": 5, "being": [5, 69, 99, 100, 110, 115, 217, 218, 246, 260, 320, 350, 444, 445, 446, 447, 448, 450, 451, 452, 540, 574, 645, 670, 740, 777, 806, 854, 958], "consid": [5, 69, 99, 100, 110, 115, 128, 137, 147, 173, 215, 217, 218, 246, 260, 309, 310, 311, 320, 350, 444, 445, 446, 447, 448, 450, 451, 452, 534, 543, 574, 595, 608, 615, 620, 643, 645, 670, 679, 730, 731, 732, 740, 777, 806, 819, 854, 875, 876, 877, 958], "break": [5, 69, 115, 217, 218, 246, 260, 320, 350, 444, 445, 446, 447, 448, 450, 451, 452, 574, 645, 670, 740, 777, 806, 854, 958], "chang": [5, 25, 60, 69, 99, 100, 115, 217, 218, 219, 246, 260, 320, 321, 350, 431, 444, 445, 446, 447, 448, 450, 451, 452, 574, 645, 670, 740, 777, 806, 850, 854, 883, 958], "current": [5, 8, 25, 87, 93, 101, 127, 130, 131, 246, 297, 350, 431, 574, 585, 590, 591, 670, 729, 733, 777, 850, 958], "alpha": [5, 67, 260, 363, 364, 365, 574, 592, 597, 599, 624, 633, 670, 791, 792, 793, 958], "state": [5, 7, 67, 79, 534, 585, 592, 597, 599, 624, 633, 670], "cfg": [6, 7, 8, 14, 125], "previous": 6, "save": [6, 349, 585, 776], "share": [6, 51, 139, 246, 790, 958], "option": [6, 7, 8, 25, 29, 37, 60, 70, 99, 102, 103, 104, 108, 111, 112, 114, 116, 119, 120, 121, 122, 163, 167, 173, 205, 214, 246, 398, 443, 444, 445, 446, 447, 448, 450, 451, 452, 464, 490, 549, 563, 567, 574, 585, 611, 612, 620, 670, 826, 830, 862, 863, 864, 865, 866, 867, 869, 870, 871, 877, 888, 914, 937, 958], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 50, 52, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 127, 128, 129, 130, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 163, 164, 165, 166, 167, 169, 171, 173, 174, 176, 177, 179, 180, 181, 183, 185, 186, 187, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 231, 238, 240, 246, 253, 255, 257, 259, 260, 270, 275, 276, 277, 278, 279, 282, 283, 284, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 332, 346, 349, 350, 351, 353, 355, 356, 359, 361, 362, 363, 364, 365, 366, 369, 371, 372, 376, 377, 378, 379, 380, 381, 384, 385, 389, 398, 400, 402, 403, 407, 408, 409, 410, 421, 423, 427, 429, 430, 431, 432, 433, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 505, 506, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 574, 588, 590, 592, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 611, 612, 615, 616, 620, 621, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 654, 657, 664, 666, 670, 675, 678, 679, 688, 694, 695, 696, 697, 698, 701, 702, 703, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 729, 730, 731, 732, 736, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 755, 773, 776, 777, 778, 780, 782, 783, 786, 789, 790, 791, 792, 793, 796, 797, 798, 799, 804, 805, 806, 809, 810, 819, 825, 826, 830, 832, 837, 850, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 884, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 924, 926, 929, 930, 936, 937, 938, 939, 940, 941, 943, 944, 947, 948, 949, 950, 958], "json": [6, 8, 31, 32, 106, 107, 113, 246, 479, 480, 585, 604, 626, 651, 670, 903, 904], "produc": [6, 121, 122, 277, 416, 550, 616, 670, 696], "reset": [7, 125], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 65, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 103, 108, 110, 119, 120, 121, 122, 124, 137, 139, 151, 153, 154, 164, 167, 173, 179, 181, 189, 190, 191, 200, 207, 215, 217, 220, 224, 246, 292, 296, 297, 307, 349, 361, 363, 364, 365, 380, 403, 410, 425, 426, 431, 437, 454, 460, 469, 477, 483, 485, 489, 490, 495, 496, 517, 524, 531, 545, 549, 556, 559, 561, 562, 563, 566, 574, 595, 597, 605, 607, 612, 620, 635, 638, 643, 646, 651, 670, 711, 715, 716, 726, 776, 789, 790, 791, 792, 793, 804, 837, 846, 847, 850, 856, 873, 884, 892, 901, 907, 909, 913, 914, 919, 948, 958], "note": [7, 17, 29, 37, 60, 70, 86, 87, 88, 90, 92, 93, 97, 99, 101, 102, 108, 110, 111, 120, 121, 122, 123, 124, 125, 127, 128, 133, 142, 152, 153, 163, 164, 166, 167, 177, 180, 189, 190, 206, 209, 214, 218, 219, 223, 246, 260, 279, 296, 318, 319, 323, 324, 346, 350, 356, 385, 391, 393, 444, 445, 446, 447, 448, 450, 451, 452, 464, 481, 483, 484, 489, 495, 496, 504, 512, 534, 543, 558, 567, 574, 592, 599, 600, 606, 607, 608, 612, 615, 627, 633, 645, 648, 670, 679, 698, 715, 738, 739, 773, 783, 876, 877, 883, 888, 905, 907, 908, 913, 919, 928, 958], "oper": [7, 29, 51, 68, 76, 77, 86, 88, 89, 90, 91, 92, 99, 108, 128, 141, 146, 151, 158, 168, 174, 177, 179, 180, 184, 204, 209, 210, 214, 217, 225, 226, 246, 253, 254, 257, 297, 315, 316, 317, 318, 319, 320, 362, 376, 378, 379, 397, 400, 407, 419, 421, 423, 427, 429, 433, 439, 502, 512, 519, 520, 521, 529, 530, 540, 574, 599, 605, 608, 611, 615, 620, 621, 652, 670, 678, 736, 737, 738, 739, 740, 858, 935, 939, 940, 941, 949, 958], "from": [7, 27, 29, 60, 68, 70, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 134, 135, 139, 141, 150, 152, 153, 164, 165, 167, 168, 173, 185, 189, 191, 193, 214, 215, 217, 219, 246, 315, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 366, 384, 398, 425, 426, 431, 454, 467, 477, 479, 485, 496, 514, 516, 527, 537, 538, 539, 561, 562, 573, 574, 594, 599, 604, 606, 607, 612, 620, 626, 627, 630, 643, 649, 670, 678, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 826, 830, 846, 847, 848, 850, 873, 901, 903, 909, 920, 947, 950, 958], "environ": [7, 25, 123], "local": [7, 102, 111, 349, 751, 752, 776, 781, 851, 852, 958], "non": [7, 29, 37, 60, 91, 165, 173, 193, 218, 223, 246, 385, 431, 443, 444, 445, 446, 447, 448, 450, 451, 452, 472, 478, 527, 529, 530, 551, 554, 563, 574, 620, 630, 645, 648, 670, 716, 810, 850, 862, 863, 864, 865, 866, 867, 869, 870, 871, 896, 902, 940, 958], "env": 7, "back": [7, 60, 141, 210, 246, 430, 574, 678, 941, 958], "valu": [7, 10, 11, 14, 25, 27, 29, 31, 45, 46, 51, 58, 60, 68, 69, 71, 89, 91, 99, 100, 101, 110, 115, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 134, 137, 141, 142, 143, 147, 150, 152, 153, 154, 155, 159, 163, 164, 169, 170, 171, 172, 173, 175, 177, 179, 181, 182, 183, 185, 189, 190, 191, 195, 196, 199, 200, 201, 202, 205, 206, 210, 213, 217, 218, 219, 220, 229, 230, 232, 233, 234, 236, 237, 246, 252, 253, 254, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 277, 278, 281, 282, 283, 285, 287, 288, 289, 291, 294, 295, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 316, 319, 320, 321, 323, 324, 326, 330, 343, 347, 357, 362, 363, 364, 365, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 390, 391, 393, 394, 395, 396, 399, 400, 401, 404, 406, 407, 408, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 433, 436, 437, 440, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 486, 487, 490, 492, 493, 494, 499, 502, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 519, 521, 523, 527, 530, 532, 534, 535, 536, 542, 543, 549, 551, 552, 553, 554, 555, 558, 559, 564, 567, 574, 588, 595, 600, 601, 606, 607, 609, 610, 617, 618, 619, 620, 622, 625, 627, 631, 632, 637, 638, 639, 642, 645, 646, 651, 655, 656, 658, 659, 660, 662, 663, 670, 674, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 696, 697, 700, 701, 702, 704, 706, 707, 708, 710, 714, 717, 719, 720, 721, 722, 726, 727, 730, 731, 732, 734, 735, 740, 741, 742, 743, 745, 746, 749, 753, 770, 774, 784, 790, 791, 792, 793, 796, 797, 798, 801, 803, 804, 805, 806, 807, 809, 810, 812, 814, 815, 817, 818, 820, 821, 822, 823, 827, 832, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 862, 863, 864, 865, 866, 867, 869, 870, 871, 873, 874, 875, 876, 877, 880, 881, 885, 886, 887, 888, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 908, 910, 911, 914, 916, 917, 918, 923, 928, 929, 930, 931, 932, 933, 941, 942, 945, 947, 949, 950, 958], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102, 103, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 574, 585, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 697, 698, 699, 702, 703, 705, 710, 711, 712, 714, 716, 723, 724, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 796, 797, 798, 799, 801, 804, 805, 806, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 850, 851, 852, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 880, 884, 885, 886, 887, 889, 890, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 958], "ascii": [9, 17, 482, 484, 488, 499, 906, 908, 912, 923], "charact": [9, 11, 17, 23, 27, 99, 100, 110, 246, 346, 476, 481, 482, 483, 488, 489, 491, 492, 495, 499, 624, 670, 773, 900, 905, 906, 907, 912, 913, 915, 916, 919, 923], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 246], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 86, 93, 99, 100, 102, 110, 111, 181, 204, 210, 217, 218, 246, 645, 670, 941, 958], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 60, 65, 67, 70, 87, 91, 93, 99, 100, 103, 104, 108, 110, 113, 114, 117, 118, 119, 120, 121, 122, 127, 129, 130, 131, 134, 146, 147, 149, 150, 151, 152, 157, 158, 160, 161, 162, 164, 167, 168, 171, 176, 177, 179, 181, 182, 189, 190, 191, 197, 199, 205, 210, 213, 214, 215, 219, 221, 223, 229, 230, 232, 233, 234, 236, 239, 246, 256, 257, 258, 260, 270, 276, 279, 293, 296, 298, 315, 316, 317, 318, 319, 320, 335, 349, 351, 361, 362, 363, 364, 365, 378, 379, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 407, 408, 427, 429, 437, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 459, 464, 466, 467, 471, 475, 479, 485, 486, 487, 491, 492, 494, 496, 513, 516, 519, 521, 524, 525, 531, 534, 549, 559, 561, 563, 567, 574, 588, 590, 591, 592, 597, 599, 605, 606, 611, 612, 614, 616, 624, 633, 634, 635, 637, 642, 643, 648, 655, 656, 658, 659, 660, 662, 665, 670, 678, 688, 698, 712, 715, 717, 724, 728, 729, 736, 737, 738, 739, 740, 741, 758, 776, 778, 789, 791, 792, 793, 799, 810, 811, 812, 814, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 830, 843, 851, 852, 854, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 875, 878, 883, 888, 890, 895, 899, 903, 909, 910, 911, 915, 916, 918, 920, 939, 940, 941, 944, 947, 949, 950, 958], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 253, 486, 574, 910], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 253, 472, 478, 574, 896, 902, 937, 958], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 60, 62, 64, 69, 89, 115, 121, 130, 131, 133, 134, 135, 138, 142, 143, 146, 149, 150, 151, 158, 166, 167, 171, 172, 181, 182, 183, 198, 199, 200, 220, 223, 226, 230, 232, 233, 234, 235, 236, 238, 239, 246, 252, 262, 263, 264, 265, 266, 267, 288, 306, 308, 312, 313, 320, 323, 324, 351, 361, 362, 363, 364, 365, 366, 367, 375, 376, 378, 379, 384, 391, 393, 394, 395, 397, 398, 400, 403, 404, 405, 407, 411, 412, 413, 420, 423, 425, 426, 427, 431, 433, 436, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 462, 463, 464, 468, 469, 508, 509, 512, 517, 526, 527, 529, 531, 533, 541, 552, 553, 556, 561, 562, 566, 574, 590, 594, 600, 601, 605, 611, 612, 618, 619, 625, 637, 638, 646, 648, 649, 652, 656, 658, 659, 660, 661, 662, 664, 665, 670, 680, 681, 682, 683, 684, 685, 727, 734, 735, 740, 741, 742, 778, 792, 793, 797, 801, 806, 850, 854, 862, 864, 865, 867, 868, 869, 871, 872, 886, 887, 891, 932, 933, 946, 958], "fmt": [10, 383, 544, 574, 609, 670, 920], "floatfmt": 10, "mix": [10, 496, 742, 920, 958], "control": [10, 29, 120, 246, 597, 670], "how": [10, 29, 51, 68, 71, 89, 92, 101, 137, 166, 217, 218, 246, 277, 278, 307, 321, 384, 430, 440, 567, 574, 595, 611, 645, 670, 696, 697, 726, 743, 958], "float": [10, 29, 39, 40, 69, 115, 117, 118, 119, 121, 122, 134, 139, 142, 167, 183, 191, 196, 238, 246, 276, 277, 308, 309, 310, 311, 323, 324, 351, 361, 362, 363, 364, 365, 370, 375, 378, 379, 384, 387, 390, 391, 393, 394, 395, 400, 403, 407, 411, 420, 425, 426, 427, 433, 436, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 458, 512, 526, 536, 552, 553, 557, 559, 562, 564, 566, 574, 600, 612, 625, 632, 633, 664, 670, 695, 696, 724, 727, 730, 731, 732, 741, 742, 744, 778, 789, 790, 791, 792, 793, 797, 801, 806, 816, 830, 833, 839, 840, 846, 847, 853, 854, 855, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 888, 892, 928, 948, 958], "point": [10, 29, 39, 40, 121, 122, 142, 152, 168, 246, 308, 323, 324, 351, 370, 375, 391, 393, 453, 454, 574, 600, 606, 616, 627, 670, 727, 778, 797, 801, 816, 872, 873, 958], "full": [10, 36, 66, 99, 100, 102, 110, 111, 616, 670], "format": [10, 13, 17, 27, 29, 98, 99, 100, 110, 115, 140, 150, 164, 173, 190, 206, 244, 246, 350, 353, 485, 496, 521, 598, 604, 620, 651, 670, 780, 909, 920, 957], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 60, 80, 86, 88, 90, 92, 96, 97, 99, 100, 103, 110, 113, 120, 121, 123, 124, 129, 130, 139, 140, 142, 143, 155, 164, 165, 168, 169, 176, 177, 191, 195, 196, 200, 202, 213, 217, 220, 229, 231, 240, 246, 271, 278, 283, 291, 295, 297, 299, 305, 314, 320, 321, 333, 336, 341, 343, 351, 357, 358, 360, 363, 364, 365, 369, 371, 377, 381, 391, 393, 401, 402, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 457, 458, 460, 469, 481, 484, 486, 492, 493, 505, 511, 517, 531, 532, 547, 556, 561, 562, 565, 566, 574, 588, 590, 598, 599, 600, 601, 608, 615, 624, 631, 632, 635, 638, 640, 642, 646, 655, 657, 666, 670, 697, 702, 710, 714, 716, 723, 729, 740, 743, 756, 759, 768, 770, 778, 784, 785, 787, 790, 791, 792, 793, 796, 798, 805, 816, 832, 843, 844, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 880, 881, 884, 892, 905, 908, 910, 916, 917, 929, 943, 948, 958], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 62, 89, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 128, 129, 130, 139, 142, 143, 145, 154, 155, 156, 158, 163, 164, 165, 167, 169, 170, 171, 175, 176, 177, 187, 189, 191, 194, 195, 196, 198, 200, 201, 202, 203, 208, 211, 213, 217, 220, 222, 224, 231, 240, 246, 253, 276, 277, 278, 282, 283, 291, 292, 295, 296, 297, 299, 305, 309, 310, 311, 320, 321, 363, 364, 365, 369, 370, 371, 377, 380, 381, 402, 429, 431, 433, 437, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 465, 469, 477, 482, 485, 486, 488, 490, 492, 493, 499, 505, 506, 507, 511, 517, 519, 524, 531, 532, 536, 537, 538, 539, 545, 547, 553, 555, 556, 559, 561, 562, 563, 564, 565, 566, 574, 588, 590, 599, 600, 601, 608, 612, 615, 624, 631, 632, 635, 636, 638, 640, 641, 642, 646, 647, 650, 657, 666, 670, 686, 687, 695, 696, 697, 701, 702, 710, 711, 714, 715, 716, 723, 724, 728, 729, 730, 731, 732, 740, 743, 790, 791, 792, 793, 796, 797, 798, 804, 805, 806, 829, 831, 832, 839, 843, 844, 846, 847, 848, 849, 850, 853, 856, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 880, 881, 884, 889, 892, 901, 906, 909, 910, 912, 914, 916, 917, 923, 928, 929, 930, 931, 938, 943, 948, 958], "size": [12, 33, 99, 100, 120, 121, 122, 123, 139, 152, 217, 246, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 524, 574, 606, 635, 670, 790, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 958], "overwrit": [12, 28, 86, 88, 89, 90, 92, 99, 100, 110, 127, 246, 599, 670], "chunk": [12, 33, 96, 99, 100, 108, 110, 112, 113, 114, 121, 122, 141, 165, 176, 246, 259, 438, 574, 635, 670, 678, 728, 802, 843, 857, 935, 958], "stream": [12, 30, 67, 151, 215, 246, 592, 597, 599, 605, 616, 620, 624, 633, 634, 635, 643, 670], "engin": [12, 28, 101, 123, 128, 151, 215, 228, 246, 605, 616, 620, 643, 654, 670, 679, 958], "By": [12, 99, 100, 103, 110, 167, 200, 220, 246, 469, 485, 517, 531, 549, 556, 561, 562, 566, 574, 612, 638, 646, 670, 892, 909, 940, 948, 958], "determin": [12, 29, 58, 60, 68, 89, 92, 99, 100, 103, 108, 110, 114, 128, 146, 152, 153, 164, 165, 214, 219, 246, 297, 307, 335, 349, 410, 416, 440, 444, 445, 446, 447, 448, 450, 451, 452, 464, 574, 606, 607, 670, 716, 726, 758, 776, 806, 837, 888, 958], "schema": [12, 51, 61, 62, 63, 68, 71, 81, 82, 84, 86, 88, 89, 90, 92, 93, 99, 100, 105, 109, 110, 113, 120, 121, 128, 130, 131, 138, 139, 174, 177, 246, 297, 416, 519, 563, 574, 590, 591, 596, 616, 621, 651, 654, 670, 733, 958], "thread": [12, 27, 96, 99, 100, 101, 123, 246, 260, 279, 574, 698], "pool": [12, 123], "For": [12, 29, 101, 102, 103, 111, 141, 153, 166, 167, 228, 246, 297, 306, 363, 364, 365, 417, 439, 464, 534, 543, 544, 574, 607, 612, 654, 670, 678, 791, 792, 793, 858, 888, 940, 958], "some": [12, 25, 29, 89, 99, 100, 110, 137, 246, 595, 670, 817, 958], "dataset": [12, 99, 100, 110, 115, 398, 574, 585, 616, 670, 830, 958], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 51, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 94, 99, 100, 101, 104, 108, 110, 111, 112, 113, 121, 122, 128, 129, 138, 139, 141, 143, 146, 152, 180, 189, 193, 199, 207, 213, 215, 246, 309, 310, 311, 349, 363, 364, 365, 371, 408, 410, 417, 466, 467, 483, 489, 495, 496, 525, 534, 543, 574, 588, 601, 606, 616, 630, 635, 637, 642, 643, 670, 678, 730, 731, 732, 776, 790, 791, 792, 793, 798, 837, 876, 877, 907, 913, 919, 936, 958], "have": [12, 25, 29, 60, 71, 87, 99, 100, 103, 121, 122, 141, 164, 184, 190, 206, 246, 320, 363, 364, 365, 417, 437, 496, 574, 620, 633, 650, 670, 678, 740, 791, 792, 793, 803, 856, 920, 958], "larg": 12, "element": [12, 22, 97, 122, 124, 129, 163, 181, 189, 200, 213, 220, 246, 260, 262, 263, 264, 265, 266, 267, 277, 279, 280, 305, 312, 313, 315, 316, 317, 318, 319, 320, 367, 380, 389, 404, 405, 431, 437, 440, 455, 461, 462, 463, 468, 469, 492, 493, 508, 509, 511, 517, 531, 556, 561, 562, 566, 574, 588, 638, 642, 646, 670, 679, 680, 681, 682, 683, 684, 685, 696, 698, 699, 723, 729, 734, 735, 736, 737, 738, 739, 740, 794, 799, 805, 817, 829, 832, 834, 835, 850, 856, 874, 885, 886, 887, 891, 892, 916, 917, 929, 932, 933, 938, 943, 944, 948, 958], "too": 12, "optimist": 12, "lead": [12, 93, 115, 246, 456, 483, 495, 499, 506, 516, 531, 561, 574, 616, 654, 670, 878, 907, 919, 923, 958], "out": [12, 93, 116, 153, 246, 282, 296, 301, 387, 390, 471, 473, 567, 574, 607, 634, 635, 670, 701, 715, 719, 895, 897], "memori": [12, 33, 68, 86, 87, 90, 91, 92, 99, 100, 104, 108, 110, 112, 113, 114, 127, 128, 141, 197, 228, 246, 438, 459, 574, 635, 654, 670, 678, 679, 857, 882, 883, 958], "error": [12, 72, 99, 100, 110, 189, 246, 284, 296, 301, 306, 397, 471, 473, 479, 480, 496, 574, 654, 703, 715, 719, 724, 895, 897, 903, 904, 920, 958], "row": [12, 17, 22, 27, 29, 31, 33, 60, 61, 63, 78, 80, 85, 89, 90, 92, 93, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 120, 121, 128, 129, 130, 137, 141, 144, 146, 150, 152, 154, 155, 160, 162, 163, 164, 165, 167, 168, 169, 173, 177, 191, 198, 202, 203, 206, 208, 213, 215, 217, 218, 224, 228, 231, 240, 246, 260, 271, 280, 368, 381, 402, 431, 441, 465, 467, 476, 505, 525, 534, 535, 543, 547, 551, 554, 558, 565, 567, 574, 588, 590, 592, 595, 599, 602, 603, 606, 608, 612, 613, 615, 616, 620, 635, 636, 640, 641, 642, 643, 645, 650, 654, 657, 666, 670, 678, 699, 795, 805, 829, 850, 860, 889, 900, 929, 958], "per": [12, 27, 29, 120, 121, 129, 150, 177, 178, 199, 213, 235, 237, 238, 246, 260, 279, 282, 296, 467, 525, 574, 588, 637, 642, 661, 663, 664, 670, 698, 701, 715], "everi": [12, 99, 100, 110, 152, 203, 206, 219, 246, 273, 274, 278, 280, 282, 283, 292, 295, 315, 316, 317, 318, 319, 320, 350, 356, 368, 476, 507, 534, 535, 574, 599, 606, 641, 670, 692, 693, 697, 699, 701, 702, 711, 714, 736, 737, 738, 739, 740, 777, 783, 795, 900, 931, 958], "process": [12, 27, 123, 246, 634, 635, 670], "liter": [13, 17, 65, 70, 103, 122, 150, 164, 170, 171, 175, 176, 179, 189, 190, 193, 201, 205, 218, 223, 246, 256, 258, 300, 326, 362, 369, 376, 378, 379, 385, 397, 400, 407, 421, 423, 427, 433, 438, 471, 486, 487, 502, 512, 524, 527, 529, 530, 537, 538, 549, 551, 554, 559, 563, 574, 601, 630, 645, 648, 670, 676, 677, 718, 749, 796, 810, 876, 877, 895, 910, 911, 958], "left": [13, 70, 117, 118, 152, 153, 166, 167, 218, 246, 363, 364, 365, 384, 385, 444, 445, 446, 447, 448, 450, 451, 452, 455, 482, 499, 510, 527, 534, 535, 543, 558, 567, 574, 606, 607, 611, 612, 645, 670, 791, 792, 793, 810, 874, 906, 923, 942, 958], "center": [13, 29, 246, 363, 364, 365, 443, 444, 445, 446, 447, 448, 450, 451, 452, 574, 791, 792, 793, 862, 863, 864, 865, 866, 867, 869, 870, 871, 958], "right": [13, 15, 29, 70, 99, 100, 117, 118, 152, 153, 166, 167, 246, 363, 364, 365, 385, 444, 445, 446, 447, 448, 450, 451, 452, 455, 464, 488, 527, 574, 606, 607, 611, 612, 670, 791, 792, 793, 810, 874, 888, 912, 958], "cell": 13, "align": [13, 29, 60, 246, 499, 923], "keyerror": [13, 17], "recognis": [13, 17, 119], "column_abc": 13, "column_xyz": 13, "visibl": [14, 139, 246, 790, 958], "eg": [14, 22, 29, 246, 350, 496, 512, 574], "low": [14, 123], "rang": [14, 29, 69, 70, 101, 134, 139, 152, 165, 246, 330, 343, 347, 348, 350, 356, 357, 384, 524, 529, 537, 538, 574, 606, 670, 741, 742, 753, 770, 774, 775, 777, 783, 784, 790, 850, 854, 958], "100": [14, 29, 89, 92, 99, 100, 110, 113, 246, 499, 524, 670, 863, 864, 866, 958], "print": [14, 16, 22, 100, 116, 138, 150, 151, 165, 168, 208, 225, 246, 383, 539, 574, 609, 670, 817, 862, 938, 958], "98": [14, 158, 246, 305, 466, 506, 511, 574], "99": [14, 29, 142, 143, 158, 161, 246, 254, 305, 369, 371, 466, 506, 511, 574, 600, 601, 670, 789, 796, 958], "tbl_col": 14, "10": [14, 26, 27, 29, 30, 33, 60, 68, 69, 70, 93, 101, 110, 121, 122, 131, 141, 149, 152, 153, 155, 157, 158, 159, 176, 180, 182, 186, 187, 193, 202, 223, 226, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 259, 268, 269, 270, 272, 278, 283, 291, 292, 295, 309, 314, 316, 319, 321, 323, 324, 326, 349, 350, 356, 359, 380, 381, 384, 389, 397, 401, 402, 404, 431, 445, 465, 499, 505, 519, 527, 534, 540, 543, 545, 547, 549, 550, 556, 561, 565, 574, 592, 606, 607, 608, 610, 615, 623, 624, 630, 635, 639, 640, 648, 652, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 670, 679, 697, 702, 710, 711, 714, 730, 741, 743, 749, 776, 783, 786, 789, 805, 817, 832, 834, 850, 876, 877, 929, 958], "95": [14, 254, 574], "96": [14, 254, 574], "97": [14, 158, 246, 254, 574], "move": [15, 363, 364, 365, 444, 445, 447, 451, 574, 791, 792, 793, 863, 864, 866, 870, 958], "inlin": 15, "parenthes": 15, "below": [16, 29, 102, 111, 137, 246, 384, 567, 574, 595, 670], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 60, 93], "utf8_full_condens": [17, 93], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 472, 477, 478, 480, 896, 901, 902, 904], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 60, 69, 70, 71, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 128, 130, 134, 137, 142, 143, 150, 152, 153, 154, 159, 163, 166, 167, 168, 171, 173, 177, 178, 181, 189, 191, 193, 196, 198, 199, 205, 207, 210, 214, 215, 216, 217, 218, 219, 223, 226, 246, 255, 259, 260, 272, 282, 292, 297, 299, 309, 310, 311, 314, 316, 319, 323, 324, 349, 350, 356, 363, 364, 365, 366, 369, 370, 371, 377, 380, 384, 385, 391, 392, 393, 394, 395, 401, 408, 410, 428, 431, 437, 438, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 458, 459, 460, 461, 465, 466, 470, 471, 474, 475, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 492, 493, 494, 495, 496, 499, 500, 501, 510, 520, 522, 524, 527, 530, 532, 538, 539, 541, 542, 549, 550, 551, 554, 559, 560, 562, 563, 566, 567, 574, 590, 591, 595, 600, 601, 606, 607, 610, 611, 612, 614, 616, 620, 630, 632, 633, 634, 635, 636, 637, 643, 644, 645, 648, 649, 651, 652, 654, 670, 679, 686, 687, 701, 711, 716, 729, 730, 741, 742, 744, 760, 761, 762, 767, 776, 777, 783, 788, 789, 791, 792, 793, 796, 797, 798, 800, 803, 804, 806, 808, 809, 810, 819, 822, 823, 826, 829, 830, 837, 838, 839, 840, 841, 845, 854, 855, 856, 862, 863, 864, 865, 866, 867, 869, 870, 871, 873, 879, 881, 884, 885, 888, 889, 892, 894, 895, 898, 899, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 916, 917, 918, 919, 920, 934, 937, 938, 941, 942, 948, 949, 958], "rounded_corn": 17, "style": [17, 29, 181, 246], "border": 17, "line": [17, 29, 99, 100, 103, 110, 150, 160, 162, 246], "includ": [17, 25, 27, 29, 66, 102, 111, 121, 129, 134, 139, 152, 213, 214, 217, 246, 351, 385, 491, 492, 534, 574, 588, 606, 642, 670, 742, 778, 790, 810, 915, 916, 949, 958], "divid": [17, 350, 356, 363, 364, 365, 398, 574, 777, 783, 791, 792, 793, 830, 958], "same": [17, 29, 51, 60, 67, 71, 104, 110, 120, 128, 135, 151, 199, 215, 223, 226, 228, 246, 252, 259, 368, 430, 443, 444, 445, 446, 447, 448, 450, 451, 452, 467, 501, 528, 574, 594, 605, 616, 637, 643, 648, 652, 654, 670, 674, 678, 679, 749, 795, 862, 863, 864, 865, 866, 867, 869, 870, 871, 950, 958], "dens": [17, 150, 246, 437, 574, 856, 958], "space": 17, "horizont": [17, 68, 146, 157, 217, 246, 529, 530, 534, 535, 536, 540, 543, 551, 554, 558, 564], "markdown": 17, "compat": [17, 29, 33, 101, 246, 471, 472, 477, 478, 486, 487, 635, 670], "No": 17, "appli": [17, 27, 29, 68, 110, 119, 121, 122, 146, 180, 246, 330, 333, 335, 336, 337, 339, 341, 343, 344, 347, 348, 351, 357, 358, 360, 364, 365, 408, 432, 443, 444, 445, 447, 451, 496, 519, 520, 521, 524, 534, 535, 543, 550, 558, 574, 608, 615, 616, 623, 670, 751, 752, 753, 756, 758, 759, 763, 765, 768, 770, 771, 774, 775, 778, 781, 784, 785, 787, 792, 793, 862, 863, 864, 866, 870, 920, 958], "round": [17, 29, 62, 93, 246, 308, 375, 508, 574, 727, 801, 958], "corner": [17, 93], "op": [17, 122, 246, 440, 574, 670, 958], "The": [17, 28, 29, 33, 45, 52, 60, 66, 86, 88, 89, 90, 92, 96, 99, 101, 108, 110, 123, 128, 136, 138, 150, 151, 152, 153, 154, 159, 164, 167, 174, 179, 189, 190, 193, 216, 219, 223, 226, 228, 246, 296, 297, 299, 300, 301, 302, 330, 343, 346, 347, 350, 356, 357, 366, 369, 377, 380, 408, 430, 437, 440, 443, 444, 445, 446, 447, 448, 450, 451, 452, 461, 464, 470, 473, 474, 479, 481, 482, 483, 488, 489, 495, 499, 528, 541, 545, 560, 563, 567, 568, 570, 574, 575, 576, 580, 581, 582, 606, 607, 608, 610, 612, 615, 616, 621, 624, 630, 635, 644, 648, 652, 654, 670, 679, 715, 718, 719, 720, 729, 753, 770, 773, 774, 777, 783, 784, 796, 804, 809, 856, 862, 863, 864, 865, 866, 867, 869, 870, 871, 885, 888, 894, 897, 898, 903, 905, 906, 907, 912, 913, 919, 923, 952, 954, 958, 959, 962, 963, 964], "one": [17, 28, 29, 60, 78, 86, 88, 89, 90, 91, 92, 122, 125, 143, 144, 150, 151, 152, 153, 164, 173, 181, 189, 190, 212, 227, 246, 254, 371, 397, 405, 443, 466, 506, 520, 551, 554, 564, 567, 574, 601, 602, 605, 606, 607, 620, 649, 653, 670, 678, 798, 826, 835, 862, 924, 958], "more": [17, 29, 31, 33, 60, 85, 86, 87, 88, 89, 90, 91, 92, 102, 108, 111, 121, 122, 125, 128, 133, 134, 164, 168, 173, 177, 189, 190, 191, 215, 228, 246, 257, 260, 298, 309, 310, 311, 397, 398, 405, 408, 429, 454, 464, 513, 551, 554, 564, 567, 574, 620, 635, 643, 654, 670, 679, 717, 730, 731, 732, 742, 826, 830, 873, 888, 944, 958, 966], "semigraph": 17, "box": [17, 128, 246], "draw": [17, 22, 23], "found": [17, 27, 73, 82, 84, 89, 93, 138, 218, 246, 455, 480, 496, 574, 645, 670, 874, 904, 958], "unicod": 17, "block": [17, 151, 215, 246, 605, 627, 643, 650, 670, 876, 877, 958], "http": [17, 29, 87, 101, 127, 133, 246, 477, 901, 966], "en": [17, 29, 246], "wikipedia": 17, "org": [17, 87, 101, 127, 133, 246], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 246], "etc": [18, 29, 99, 102, 104, 108, 111, 112, 114, 246, 524, 876, 877, 958], "inform": [20, 66, 102, 111, 133, 246, 309, 310, 311, 398, 464, 574, 624, 670, 730, 731, 732, 830, 888, 958], "separ": [21, 27, 94, 96, 99, 100, 110, 179, 181, 207, 214, 216, 246, 260, 280, 284, 476, 530, 534, 535, 574, 644, 670, 699, 703, 900, 927, 936, 958], "between": [21, 68, 119, 120, 121, 122, 183, 238, 246, 284, 306, 322, 385, 431, 436, 448, 470, 531, 533, 556, 557, 561, 574, 625, 664, 670, 703, 724, 744, 810, 850, 855, 867, 894, 958], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 123, 134, 143, 151, 152, 153, 181, 246, 309, 310, 316, 371, 430, 437, 444, 456, 493, 574, 601, 605, 606, 607, 635, 670, 716, 730, 731, 736, 742, 798, 856, 863, 878, 917, 958], "both": [22, 27, 51, 70, 101, 152, 153, 166, 167, 174, 189, 246, 259, 385, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 611, 612, 621, 670, 810, 819, 958], "tbl_row": 22, "width": [23, 29, 99, 100, 246, 482, 488, 499, 670, 906, 912, 923], "char": [23, 51, 71, 484, 908], "enabl": [24, 71, 193, 223, 246, 456, 574, 630, 648, 670, 878, 958], "addit": [24, 29, 89, 102, 111, 120, 135, 140, 151, 179, 193, 199, 216, 223, 226, 246, 253, 366, 369, 430, 467, 525, 527, 528, 529, 530, 541, 551, 554, 560, 563, 574, 594, 598, 605, 630, 637, 644, 648, 652, 670, 796, 958], "verbos": [24, 125], "debug": [24, 592, 599, 616, 670], "log": [24, 62, 305, 361, 405, 423, 433, 511, 574, 723, 789, 943, 958], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 61, 63, 66, 86, 88, 89, 90, 91, 92, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 114, 121, 164, 179, 185, 189, 190, 192, 205, 206, 246, 410, 574, 627, 629, 670, 837, 958], "show": [25, 29, 137, 150, 168, 178, 246, 595, 624, 633, 670], "variabl": [25, 94, 123, 173, 207, 246, 620, 670, 936, 958], "restrict": [25, 493, 917], "dictionari": [25, 29, 86, 88, 89, 90, 92, 99, 100, 105, 109, 110, 164, 179, 189, 190, 205, 206, 246, 410, 574, 670, 742, 837, 958], "those": [25, 29, 99, 246, 437, 574, 856, 958], "been": [25, 29, 69, 94, 246, 437, 574, 856, 958], "set_fmt_float": 25, "directli": [25, 121, 122, 125, 363, 364, 365, 574, 670, 791, 792, 793, 958], "via": [25, 99, 100, 103, 110, 112, 113, 114, 164, 190, 246, 260, 574], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 141, 246, 599, 626, 634, 635, 651, 670, 678, 958], "binaryio": [26, 30, 98, 99, 103, 104, 105, 108, 109, 246], "bytesio": [26, 27, 29, 30, 33, 98, 99, 100, 103, 104, 108, 246], "path": [26, 27, 29, 30, 31, 32, 33, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 246, 456, 480, 574, 626, 634, 635, 651, 670, 878, 904, 958], "compress": [26, 30, 33, 246, 634, 635, 670], "avrocompress": [26, 246], "uncompress": [26, 30, 33, 104, 112, 246, 635, 670], "write": [26, 27, 28, 29, 30, 31, 33, 100, 104, 246, 309, 310, 311, 574, 614, 633, 635, 651, 670, 730, 731, 732, 958], "apach": [26, 33, 98, 101, 246], "avro": [26, 98, 246, 585], "should": [26, 27, 29, 30, 31, 32, 33, 86, 88, 90, 92, 94, 97, 102, 110, 119, 120, 122, 124, 127, 128, 135, 152, 164, 167, 189, 190, 206, 207, 216, 228, 246, 254, 260, 279, 307, 320, 359, 366, 391, 393, 443, 444, 445, 446, 447, 448, 450, 451, 452, 455, 464, 528, 541, 548, 549, 567, 574, 594, 606, 611, 612, 616, 633, 634, 635, 644, 651, 654, 670, 679, 698, 726, 740, 786, 862, 863, 864, 865, 866, 867, 869, 870, 871, 874, 888, 958], "written": [26, 27, 29, 30, 31, 32, 33, 246, 634, 635, 651, 670], "snappi": [26, 33, 246, 635, 670], "deflat": [26, 246], "import": [26, 27, 29, 30, 33, 36, 60, 70, 86, 90, 91, 110, 115, 117, 118, 119, 120, 121, 122, 123, 134, 150, 152, 165, 167, 210, 217, 219, 246, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 539, 606, 612, 616, 670, 734, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 814, 818, 820, 821, 826, 862, 886, 932, 958], "pathlib": [26, 27, 30, 33, 110, 246], "foo": [26, 27, 30, 31, 32, 33, 94, 128, 132, 133, 135, 136, 137, 138, 141, 144, 145, 146, 147, 148, 149, 154, 155, 156, 157, 158, 159, 161, 166, 170, 171, 172, 175, 178, 181, 183, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 214, 215, 216, 220, 221, 222, 225, 246, 255, 276, 281, 282, 285, 286, 309, 310, 311, 346, 381, 383, 402, 441, 457, 458, 470, 472, 474, 476, 478, 483, 489, 491, 493, 495, 497, 498, 505, 507, 520, 523, 524, 526, 528, 531, 532, 533, 542, 546, 547, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 565, 566, 567, 574, 593, 594, 595, 596, 602, 609, 610, 611, 627, 629, 630, 643, 644, 647, 649, 651, 670, 703, 730, 773, 860, 896, 898, 900, 902, 917, 958], "bar": [26, 27, 30, 31, 32, 33, 94, 128, 132, 133, 135, 136, 137, 138, 141, 144, 145, 146, 147, 148, 149, 155, 157, 158, 159, 161, 166, 170, 171, 172, 175, 178, 181, 183, 185, 186, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 215, 216, 220, 221, 225, 246, 255, 286, 383, 464, 474, 476, 491, 493, 520, 523, 526, 528, 531, 532, 533, 542, 547, 551, 552, 553, 554, 555, 556, 560, 561, 562, 565, 566, 567, 574, 593, 594, 595, 596, 602, 609, 610, 611, 627, 629, 630, 643, 644, 647, 651, 670, 703, 888, 898, 900, 917, 958], "ham": [26, 27, 30, 33, 94, 132, 133, 135, 136, 137, 138, 144, 145, 147, 154, 155, 157, 166, 170, 171, 172, 175, 178, 183, 185, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 207, 208, 209, 210, 211, 215, 220, 221, 246, 528, 593, 594, 595, 596, 602, 611, 627, 629, 630, 643, 649, 670], "d": [26, 27, 30, 33, 51, 68, 71, 89, 115, 134, 150, 154, 155, 158, 166, 202, 204, 217, 221, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 253, 332, 353, 385, 432, 459, 472, 478, 492, 496, 527, 545, 574, 611, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 670, 755, 780, 810, 896, 902, 916, 920, 958], "e": [26, 27, 30, 33, 51, 71, 87, 99, 100, 103, 104, 108, 112, 114, 134, 150, 155, 202, 204, 217, 246, 253, 260, 361, 366, 385, 403, 410, 459, 464, 541, 567, 574, 614, 627, 670, 789, 810, 875, 888, 940, 958], "dirpath": [26, 27, 30, 33, 110, 246], "new_fil": [26, 27, 30, 33, 246], "has_head": [27, 29, 99, 100, 103, 110, 246], "quot": [27, 99, 100, 110, 246], "batch_siz": [27, 99, 100, 113, 246], "1024": [27, 33, 99, 100, 113, 246, 635, 670], "datetime_format": [27, 246], "date_format": [27, 246, 353], "time_format": [27, 246], "float_precis": [27, 29, 246], "null_valu": [27, 99, 100, 110, 246], "_io": [27, 30, 246], "comma": [27, 246], "csv": [27, 99, 100, 103, 110, 246, 585, 634, 635, 670], "result": [27, 31, 32, 60, 90, 92, 101, 102, 110, 112, 114, 115, 122, 141, 152, 177, 196, 210, 226, 246, 363, 364, 365, 369, 398, 430, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 456, 458, 491, 492, 512, 524, 534, 535, 536, 550, 564, 574, 589, 606, 616, 624, 632, 634, 635, 651, 652, 670, 678, 791, 792, 793, 830, 860, 862, 863, 864, 865, 866, 867, 869, 870, 871, 878, 881, 915, 916, 940, 958], "If": [27, 29, 30, 31, 32, 33, 51, 65, 66, 69, 70, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 127, 128, 129, 137, 141, 150, 152, 153, 155, 163, 164, 167, 169, 173, 177, 190, 191, 198, 202, 206, 207, 209, 213, 214, 215, 217, 218, 246, 260, 292, 297, 309, 310, 311, 326, 349, 372, 398, 408, 410, 437, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 460, 464, 465, 479, 481, 483, 484, 489, 490, 491, 492, 493, 495, 496, 520, 521, 522, 524, 531, 532, 534, 543, 549, 551, 554, 559, 561, 563, 567, 574, 588, 595, 597, 606, 607, 611, 612, 616, 620, 627, 635, 636, 642, 643, 645, 651, 654, 670, 678, 679, 711, 730, 731, 732, 741, 749, 776, 803, 805, 806, 829, 830, 832, 854, 856, 858, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 878, 884, 888, 889, 903, 905, 907, 908, 913, 914, 915, 916, 917, 919, 920, 929, 935, 940, 949, 958], "instead": [27, 31, 32, 65, 97, 99, 108, 121, 124, 128, 152, 164, 177, 179, 189, 190, 193, 210, 223, 246, 270, 481, 483, 489, 495, 524, 559, 563, 574, 600, 606, 630, 648, 651, 670, 688, 876, 877, 905, 907, 913, 919, 941, 958], "whether": [27, 70, 90, 92, 122, 246, 335, 349, 351, 414, 415, 456, 574, 616, 670, 758, 776, 778], "header": [27, 29, 33, 93, 99, 100, 103, 110, 138, 181, 214, 246, 635, 670], "field": [27, 52, 82, 84, 89, 216, 246, 297, 410, 479, 492, 493, 501, 534, 535, 550, 563, 574, 644, 670, 716, 916, 917, 926, 927], "symbol": [27, 246], "byte": [27, 99, 100, 103, 104, 105, 108, 109, 110, 139, 246, 300, 303, 304, 481, 484, 635, 670, 718, 721, 722, 790, 905, 908, 958], "specifi": [27, 29, 60, 70, 73, 82, 84, 103, 121, 129, 135, 139, 140, 143, 151, 179, 189, 193, 199, 213, 216, 223, 226, 246, 363, 364, 365, 366, 371, 410, 430, 440, 467, 482, 488, 525, 527, 528, 529, 530, 541, 551, 554, 560, 563, 574, 588, 594, 598, 601, 605, 630, 637, 642, 644, 648, 652, 670, 790, 791, 792, 793, 798, 906, 912, 958], "defin": [27, 29, 36, 70, 119, 120, 121, 128, 152, 153, 177, 180, 228, 246, 260, 296, 385, 432, 444, 445, 446, 447, 448, 450, 451, 452, 522, 549, 563, 574, 606, 607, 623, 654, 670, 679, 715, 810, 958], "chrono": [27, 246, 353, 496, 780, 920], "rust": [27, 33, 79, 104, 108, 128, 228, 246, 654, 679, 958], "crate": [27, 246, 471, 472, 477, 478, 486, 487], "fraction": [27, 117, 118, 191, 246, 351, 431, 454, 496, 574, 778, 850, 873, 958], "second": [27, 70, 152, 153, 167, 219, 246, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 496, 538, 539, 567, 574, 606, 607, 612, 670, 773, 777, 783], "precis": [27, 29, 37, 164, 190, 206, 246, 325, 496, 748], "infer": [27, 86, 88, 89, 90, 91, 92, 99, 100, 103, 110, 113, 128, 246, 441, 479, 496, 574, 670, 860, 903, 920, 958], "maximum": [27, 99, 100, 110, 120, 121, 122, 170, 246, 273, 411, 425, 437, 551, 574, 617, 670, 692, 730, 760, 838, 846, 851, 856, 958], "timeunit": [27, 36, 38, 70, 246, 325, 326, 355, 359, 748, 749, 782, 786], "frame": [27, 28, 29, 60, 89, 117, 121, 128, 130, 164, 165, 174, 177, 180, 189, 190, 210, 217, 246, 590, 621, 623, 670, 729, 958], "datetim": [27, 29, 60, 70, 91, 93, 134, 150, 152, 153, 165, 167, 219, 246, 276, 277, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 444, 445, 446, 447, 448, 450, 451, 452, 496, 510, 539, 545, 549, 574, 606, 607, 612, 670, 695, 696, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 826, 846, 847, 877, 920, 942, 958], "place": [27, 129, 136, 157, 158, 186, 195, 196, 199, 213, 221, 246, 270, 284, 291, 457, 458, 466, 574, 588, 631, 632, 637, 642, 670, 688, 703, 710, 857, 859, 880, 881, 890, 958], "float64": [27, 29, 89, 97, 99, 121, 124, 138, 139, 146, 192, 210, 223, 246, 262, 263, 264, 265, 266, 267, 306, 312, 313, 351, 366, 391, 393, 462, 463, 508, 509, 528, 541, 574, 596, 629, 648, 670, 778, 941, 946, 958], "datatyp": [27, 31, 45, 58, 86, 88, 89, 90, 92, 95, 97, 103, 105, 109, 122, 124, 138, 140, 146, 192, 246, 280, 306, 366, 459, 476, 510, 528, 541, 549, 574, 585, 598, 629, 651, 670, 679, 699, 724, 742, 819, 824, 826, 828, 882, 900, 942, 958], "repres": [27, 46, 58, 70, 86, 88, 90, 91, 92, 200, 220, 246, 391, 393, 469, 517, 528, 531, 541, 549, 556, 561, 562, 566, 574, 638, 646, 670, 877, 892, 948, 958], "null": [27, 60, 68, 89, 99, 100, 110, 115, 127, 129, 130, 134, 137, 143, 146, 147, 159, 166, 171, 172, 178, 181, 183, 195, 196, 199, 200, 201, 205, 210, 213, 216, 218, 220, 223, 246, 255, 259, 260, 270, 278, 281, 282, 285, 291, 296, 297, 299, 301, 309, 310, 311, 314, 316, 319, 321, 323, 324, 331, 334, 338, 340, 342, 345, 352, 363, 364, 365, 366, 369, 370, 371, 372, 377, 384, 391, 392, 393, 394, 395, 401, 410, 428, 431, 438, 443, 444, 445, 446, 447, 448, 450, 451, 452, 457, 458, 459, 461, 466, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 488, 490, 492, 493, 494, 499, 500, 501, 510, 518, 520, 527, 529, 530, 541, 549, 563, 567, 574, 588, 590, 595, 601, 610, 611, 631, 632, 637, 642, 644, 645, 648, 649, 651, 670, 679, 688, 697, 710, 715, 716, 719, 729, 730, 743, 746, 754, 757, 764, 766, 769, 772, 779, 791, 792, 793, 796, 798, 803, 822, 823, 849, 850, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 880, 881, 885, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 908, 909, 912, 914, 916, 917, 918, 938, 940, 941, 942, 949, 958], "empti": [27, 77, 89, 99, 100, 103, 110, 130, 131, 161, 173, 246, 549, 560, 590, 591, 620, 670, 729, 733, 813, 958], "table_nam": [28, 29, 246], "connection_uri": [28, 101, 246], "if_exist": [28, 246], "dbwritemod": [28, 246], "fail": [28, 87, 102, 104, 111, 127, 215, 246, 271, 297, 496, 574, 643, 670, 679, 920, 958], "dbwriteengin": [28, 246], "sqlalchemi": [28, 246], "databas": [28, 101, 246, 585], "append": [28, 121, 141, 166, 167, 246, 438, 567, 574, 611, 612, 670, 958], "creat": [28, 29, 69, 70, 86, 90, 92, 111, 120, 121, 122, 130, 131, 152, 153, 178, 181, 219, 223, 246, 326, 350, 356, 438, 490, 516, 524, 529, 537, 538, 539, 574, 590, 591, 597, 606, 607, 648, 670, 729, 733, 741, 746, 749, 777, 783, 848, 854, 857, 914, 940, 958], "connect": [28, 99, 101, 104, 108, 112, 114, 115, 246, 586], "uri": [28, 101, 102, 111, 246], "postgresql": [28, 101, 246, 430, 574], "usernam": [28, 99, 101, 104, 108, 112, 114, 246], "password": [28, 99, 101, 104, 108, 112, 114, 246], "server": [28, 101, 246], "port": [28, 99, 101, 104, 108, 112, 114, 246], "replac": [28, 99, 100, 110, 142, 143, 187, 214, 223, 246, 326, 349, 410, 487, 574, 600, 648, 670, 749, 776, 837, 876, 877, 911, 958], "insert": [28, 99, 100, 104, 108, 110, 112, 113, 114, 158, 186, 214, 216, 246, 455, 470, 499, 574, 644, 670, 874, 894, 923, 958], "mode": [28, 246, 559, 574, 670, 958], "new": [28, 29, 97, 110, 124, 125, 128, 137, 157, 158, 177, 178, 185, 186, 203, 216, 217, 223, 246, 255, 326, 368, 384, 409, 486, 487, 492, 493, 500, 501, 507, 574, 585, 595, 627, 641, 644, 648, 654, 670, 675, 746, 749, 795, 848, 859, 910, 911, 916, 917, 924, 926, 931, 937, 950, 958], "alreadi": [28, 246, 279, 320, 574, 698, 740, 958], "adbc": [28, 101, 246], "workbook": [29, 246], "worksheet": [29, 246], "posit": [29, 135, 140, 151, 179, 193, 199, 216, 223, 226, 246, 363, 364, 365, 366, 430, 467, 485, 525, 527, 528, 529, 530, 541, 551, 554, 560, 563, 574, 594, 598, 605, 630, 637, 644, 648, 652, 670, 791, 792, 793, 909, 958], "tupl": [29, 101, 128, 164, 189, 190, 194, 225, 246, 441, 574, 624, 633, 670, 860, 958], "a1": [29, 61, 63, 246], "table_styl": [29, 246], "column_format": [29, 246], "dtype_format": [29, 246], "oneormoredatatyp": [29, 120, 246, 826, 958], "conditional_format": [29, 246], "conditionalformatdict": [29, 246], "column_tot": [29, 246], "columntotalsdefinit": [29, 246], "column_width": [29, 246], "row_tot": [29, 246], "rowtotalsdefinit": [29, 246], "row_height": [29, 246], "sparklin": [29, 246], "sequenc": [29, 52, 60, 67, 86, 88, 89, 90, 92, 94, 96, 99, 100, 110, 120, 121, 129, 134, 135, 137, 140, 141, 166, 167, 173, 177, 180, 181, 199, 207, 213, 214, 215, 216, 217, 218, 219, 246, 389, 408, 432, 467, 501, 520, 521, 522, 525, 534, 535, 536, 543, 545, 550, 558, 564, 574, 588, 594, 595, 598, 611, 612, 623, 637, 642, 643, 644, 645, 670, 678, 742, 744, 877, 926, 958], "formula": [29, 246, 361, 574, 789, 958], "autofilt": [29, 246], "autofit": [29, 246], "hidden_column": [29, 246], "hide_gridlin": [29, 246], "sheet_zoom": [29, 246], "excel": [29, 103, 246, 585], "object": [29, 30, 33, 70, 87, 88, 93, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 120, 121, 122, 127, 151, 168, 210, 246, 549, 585, 591, 609, 614, 626, 670, 691, 725, 747, 893, 935, 958], "open": [29, 99, 100, 103, 104, 108, 112, 114, 246], "xlsxwriter": [29, 116, 246], "ha": [29, 60, 69, 94, 110, 127, 219, 246, 260, 305, 320, 397, 417, 511, 522, 574, 654, 723, 729, 740, 742, 803, 816, 943, 958], "close": [29, 70, 152, 153, 246, 385, 405, 444, 445, 446, 447, 448, 450, 451, 452, 464, 574, 606, 607, 670, 810, 888, 958], "xlsx": [29, 103, 246], "work": [29, 37, 100, 103, 153, 186, 246, 260, 279, 298, 308, 309, 310, 311, 366, 375, 430, 484, 513, 574, 607, 670, 698, 717, 727, 730, 731, 732, 801, 908, 944, 958], "directori": [29, 108, 246], "sheet1": [29, 246], "valid": [29, 104, 108, 122, 125, 139, 246, 320, 471, 480, 574, 740, 790, 803, 895, 896, 901, 902, 904, 910, 911, 958], "notat": [29, 246], "integ": [29, 41, 42, 43, 44, 54, 55, 56, 57, 120, 121, 152, 153, 246, 308, 351, 375, 376, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 485, 519, 524, 545, 574, 606, 607, 670, 686, 687, 727, 778, 801, 819, 858, 868, 877, 909, 958], "medium": [29, 246], "kei": [29, 60, 66, 152, 167, 174, 179, 181, 185, 188, 246, 606, 612, 621, 627, 628, 670], "contain": [29, 60, 66, 88, 91, 93, 102, 111, 117, 129, 137, 165, 177, 181, 213, 246, 260, 389, 410, 472, 475, 477, 478, 480, 493, 494, 574, 588, 595, 624, 642, 670, 837, 843, 896, 899, 901, 902, 904, 917, 918, 935, 958], "follow": [29, 66, 99, 100, 102, 110, 111, 128, 152, 153, 167, 180, 219, 246, 260, 346, 350, 356, 432, 437, 444, 445, 446, 447, 448, 450, 451, 452, 501, 512, 522, 567, 568, 570, 574, 575, 576, 580, 581, 582, 606, 607, 612, 623, 670, 773, 777, 783, 856, 876, 877, 952, 954, 958, 959, 962, 963, 964, 966], "first_column": [29, 246], "last_column": [29, 246], "banded_column": [29, 246], "banded_row": [29, 246], "sheet": [29, 103, 246], "chart": [29, 246, 624, 670], "subsequ": [29, 184, 210, 246, 597, 670], "colnam": [29, 110, 121, 138, 246, 409, 574, 596, 670], "given": [29, 48, 50, 60, 69, 70, 86, 88, 89, 90, 92, 97, 99, 100, 110, 119, 120, 121, 122, 124, 128, 129, 139, 140, 163, 179, 180, 189, 195, 196, 199, 213, 218, 246, 260, 276, 291, 327, 355, 361, 385, 403, 430, 432, 437, 440, 441, 444, 445, 447, 450, 451, 452, 455, 457, 458, 478, 496, 501, 520, 521, 541, 574, 588, 598, 616, 623, 631, 632, 637, 642, 645, 654, 670, 679, 695, 710, 741, 750, 782, 789, 790, 806, 810, 829, 833, 836, 848, 854, 856, 860, 863, 864, 866, 869, 870, 871, 874, 880, 881, 902, 920, 946, 950, 958], "here": [29, 86, 88, 89, 90, 92, 101, 102, 111, 120, 121, 122, 246, 480, 670, 904], "dd": [29, 246], "mm": [29, 246], "yyyi": [29, 246], "00": [29, 70, 152, 167, 219, 246, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 496, 539, 606, 612, 670, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 920], "dtype": [29, 63, 71, 86, 88, 90, 92, 93, 97, 99, 100, 110, 119, 120, 121, 122, 124, 127, 152, 153, 167, 208, 210, 246, 260, 262, 263, 264, 265, 266, 267, 270, 273, 274, 275, 284, 296, 306, 309, 310, 311, 312, 313, 318, 319, 331, 334, 338, 340, 342, 345, 352, 359, 366, 368, 406, 408, 410, 439, 440, 444, 445, 446, 447, 448, 450, 451, 452, 459, 462, 463, 470, 479, 490, 496, 504, 506, 508, 509, 510, 515, 516, 522, 524, 532, 541, 545, 549, 550, 563, 574, 606, 607, 612, 670, 692, 693, 694, 703, 715, 724, 729, 730, 731, 732, 738, 739, 742, 743, 754, 757, 764, 766, 769, 772, 779, 786, 790, 795, 813, 819, 826, 836, 837, 861, 875, 882, 894, 903, 914, 920, 928, 938, 940, 941, 942, 946, 958], "overridden": [29, 86, 88, 90, 92, 123, 246, 670], "basi": [29, 121, 246], "param": [29, 86, 88, 89, 90, 92, 99, 100, 110, 121, 122, 189, 246, 670], "It": [29, 70, 128, 174, 180, 228, 246, 260, 297, 416, 574, 616, 621, 654, 670, 876, 877, 958], "also": [29, 70, 89, 110, 121, 122, 138, 151, 152, 153, 174, 177, 193, 199, 223, 246, 316, 319, 349, 384, 385, 437, 444, 445, 446, 447, 448, 450, 451, 452, 467, 534, 535, 543, 545, 558, 567, 573, 574, 579, 605, 606, 607, 621, 630, 637, 648, 649, 670, 776, 810, 856, 958], "group": [29, 33, 100, 151, 152, 153, 165, 177, 179, 181, 217, 219, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 254, 260, 279, 374, 430, 466, 467, 477, 506, 522, 574, 605, 606, 607, 635, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 698, 901], "float_dtyp": [29, 246], "simplifi": [29, 67, 246, 592, 597, 599, 624, 633, 634, 635, 670], "uniform": [29, 246], "condit": [29, 65, 137, 144, 189, 246, 475, 494, 543, 567, 595, 602, 670], "suppli": [29, 86, 88, 89, 90, 92, 189, 246, 670], "typenam": [29, 246], "3_color_scal": [29, 246], "data_bar": [29, 246], "make": [29, 52, 68, 86, 91, 99, 100, 101, 104, 108, 112, 114, 152, 153, 174, 177, 184, 219, 246, 364, 365, 410, 440, 492, 499, 574, 606, 607, 621, 670, 792, 793, 806, 837, 916, 923, 958], "icon": [29, 246], "multipl": [29, 67, 68, 99, 100, 110, 112, 113, 114, 120, 122, 129, 135, 139, 141, 144, 151, 152, 157, 165, 179, 181, 193, 199, 213, 223, 226, 246, 296, 414, 417, 422, 423, 430, 441, 444, 445, 446, 447, 448, 450, 451, 452, 467, 525, 528, 534, 535, 543, 550, 551, 554, 558, 567, 574, 588, 594, 602, 605, 606, 630, 637, 642, 648, 652, 670, 678, 715, 790, 842, 860, 958], "singl": [29, 60, 68, 99, 100, 101, 108, 110, 120, 135, 136, 137, 141, 148, 163, 179, 189, 199, 246, 260, 277, 296, 346, 372, 408, 438, 441, 467, 470, 518, 522, 525, 528, 529, 530, 550, 551, 554, 559, 574, 594, 595, 637, 670, 678, 696, 715, 773, 857, 860, 894, 935, 958], "across": [29, 246, 536, 564], "effect": [29, 127, 146, 246, 260, 574, 650, 670], "heatmap": [29, 246], "min": [29, 33, 134, 143, 152, 153, 181, 246, 309, 311, 317, 371, 430, 437, 447, 560, 574, 601, 606, 607, 635, 670, 730, 732, 737, 742, 798, 856, 866, 958], "entir": [29, 246], "final": [29, 60, 114, 246, 363, 364, 365, 574, 599, 670, 791, 792, 793, 958], "made": [29, 246, 940, 958], "up": [29, 52, 101, 164, 167, 190, 206, 246, 260, 308, 499, 574, 611, 612, 616, 670, 727, 923, 958], "abov": [29, 246, 567], "order": [29, 60, 89, 117, 128, 129, 151, 152, 153, 179, 180, 181, 191, 199, 213, 215, 219, 246, 260, 270, 293, 298, 307, 437, 454, 455, 456, 466, 467, 501, 513, 514, 525, 574, 588, 605, 606, 607, 620, 634, 635, 637, 642, 643, 670, 679, 688, 712, 717, 726, 741, 825, 854, 856, 861, 873, 874, 878, 890, 926, 944, 945, 958], "than": [29, 70, 85, 90, 92, 99, 100, 110, 115, 121, 122, 128, 150, 151, 164, 167, 179, 189, 190, 191, 217, 228, 246, 260, 378, 379, 397, 400, 407, 454, 464, 482, 488, 493, 499, 531, 551, 554, 561, 564, 574, 605, 612, 634, 635, 654, 670, 679, 873, 888, 906, 912, 917, 923, 958], "add": [29, 50, 100, 128, 141, 152, 223, 224, 246, 434, 503, 539, 543, 567, 574, 606, 611, 648, 649, 650, 670, 678, 958], "total": [29, 139, 246, 790, 958], "export": [29, 164, 165, 190, 206, 246], "numer": [29, 167, 246, 253, 309, 310, 311, 376, 385, 405, 421, 423, 433, 440, 459, 502, 512, 574, 585, 612, 670, 730, 731, 732, 742, 810, 824, 875, 882, 958], "associ": [29, 60, 246], "sum": [29, 60, 139, 146, 151, 153, 163, 181, 226, 246, 260, 297, 318, 319, 361, 372, 444, 445, 447, 450, 451, 452, 518, 520, 534, 536, 543, 551, 554, 558, 574, 592, 597, 599, 605, 607, 624, 633, 652, 670, 738, 739, 789, 790, 863, 864, 866, 869, 870, 871, 958], "pass": [29, 33, 60, 70, 88, 103, 110, 120, 121, 122, 129, 133, 135, 151, 155, 169, 179, 180, 193, 199, 202, 213, 223, 226, 246, 260, 332, 349, 369, 383, 430, 432, 467, 483, 489, 495, 525, 528, 545, 551, 554, 563, 574, 588, 594, 605, 609, 616, 623, 630, 633, 637, 642, 648, 652, 670, 679, 755, 776, 796, 805, 832, 907, 913, 919, 929, 958], "must": [29, 69, 87, 88, 102, 111, 134, 140, 152, 153, 167, 174, 189, 246, 297, 408, 444, 445, 446, 447, 448, 450, 451, 452, 574, 598, 606, 607, 612, 616, 621, 670, 741, 742, 854, 958], "funcnam": [29, 246], "averag": [29, 246, 363, 364, 365, 437, 574, 791, 792, 793, 856, 958], "count_num": [29, 246], "count": [29, 99, 100, 104, 108, 110, 112, 113, 114, 134, 152, 153, 167, 177, 178, 181, 214, 218, 219, 224, 228, 237, 246, 261, 277, 315, 346, 401, 424, 428, 444, 445, 446, 447, 448, 450, 451, 452, 472, 514, 516, 523, 555, 574, 606, 607, 612, 645, 650, 654, 663, 670, 696, 742, 773, 806, 844, 849, 896, 945, 947, 958], "std_dev": [29, 246], "var": [29, 246, 574, 670, 958], "pixel": [29, 246], "unit": [29, 36, 38, 70, 121, 122, 139, 246, 325, 326, 332, 355, 359, 406, 417, 515, 545, 574, 624, 670, 748, 749, 755, 782, 786, 790, 836, 946, 958], "hand": [29, 99, 100, 110, 246], "side": [29, 152, 153, 246, 385, 444, 445, 446, 447, 448, 450, 451, 452, 455, 574, 606, 607, 670, 810, 874, 958], "call": [29, 100, 121, 122, 125, 128, 151, 168, 245, 246, 260, 316, 319, 574, 586, 605, 669, 670, 679, 958], "ad": [29, 89, 127, 152, 214, 223, 246, 259, 369, 534, 535, 574, 606, 648, 670, 796, 958], "end": [29, 70, 99, 100, 108, 110, 152, 246, 292, 303, 346, 350, 351, 366, 385, 471, 475, 490, 494, 524, 528, 541, 567, 574, 606, 608, 615, 624, 670, 711, 721, 773, 777, 810, 899, 914, 918, 958], "wise": [29, 60, 146, 246, 262, 263, 264, 265, 266, 267, 312, 313, 367, 404, 461, 462, 463, 508, 509, 534, 535, 543, 558, 574, 680, 681, 682, 683, 684, 685, 734, 735, 794, 834, 835, 885, 886, 887, 932, 933, 958], "match": [29, 68, 80, 86, 88, 89, 90, 92, 117, 118, 143, 167, 189, 246, 415, 471, 472, 475, 478, 479, 480, 486, 487, 494, 496, 528, 601, 612, 670, 819, 826, 895, 896, 899, 902, 903, 904, 910, 911, 918, 920, 958], "particip": [29, 246], "distinct": [29, 122, 179, 246, 298, 437, 539, 574, 717, 856, 958], "referenc": [29, 246, 501], "differ": [29, 99, 115, 117, 141, 152, 153, 164, 190, 206, 214, 246, 278, 321, 330, 346, 347, 349, 357, 410, 425, 426, 496, 514, 542, 545, 574, 597, 606, 607, 670, 678, 679, 697, 743, 753, 773, 774, 776, 784, 846, 847, 875, 920, 958], "row_index": [29, 246], "height": [29, 137, 246], "provid": [29, 99, 100, 101, 102, 110, 111, 121, 122, 163, 246, 297, 301, 302, 473, 474, 477, 479, 480, 545, 585, 634, 635, 670, 719, 720, 806, 829, 897, 898, 901, 903, 904, 958, 966], "intersect": [29, 246], "bodi": [29, 246], "start": [29, 70, 98, 99, 100, 104, 108, 110, 112, 113, 114, 123, 151, 152, 168, 198, 219, 224, 246, 292, 304, 330, 332, 333, 335, 336, 341, 343, 347, 348, 350, 351, 355, 356, 357, 358, 360, 366, 385, 465, 471, 475, 490, 494, 524, 528, 534, 541, 543, 567, 574, 605, 606, 624, 636, 650, 670, 711, 722, 748, 750, 753, 755, 756, 758, 763, 765, 768, 770, 771, 774, 775, 777, 778, 780, 782, 783, 784, 785, 786, 787, 810, 889, 899, 914, 918, 958], "zero": [29, 86, 87, 98, 99, 100, 104, 108, 127, 130, 143, 164, 189, 204, 210, 246, 370, 371, 405, 455, 464, 499, 512, 574, 590, 601, 670, 716, 729, 798, 888, 923, 935, 940, 941, 958], "unless": [29, 60, 88, 210, 246, 670, 941, 949, 958], "marker": [29, 246], "compliant": [29, 246], "case": [29, 60, 86, 88, 89, 90, 92, 114, 123, 128, 141, 152, 153, 164, 246, 408, 416, 417, 574, 606, 607, 670, 678, 958], "three": [29, 212, 246, 455, 574], "avail": [29, 96, 102, 111, 120, 125, 245, 246, 437, 568, 570, 573, 574, 575, 576, 579, 580, 581, 582, 585, 586, 599, 669, 670, 856, 952, 954, 958, 959, 962, 963, 964], "insert_befor": [29, 246], "insert_aft": [29, 246], "respect": [29, 246], "direct": [29, 101, 108, 114, 217, 246], "far": [29, 246], "thei": [29, 89, 110, 117, 125, 168, 246, 443, 574, 862, 958], "strongli": [29, 123, 128, 189, 228, 246, 260, 574, 654, 679, 958], "advis": [29, 168, 246, 297], "structur": [29, 77, 81, 83, 141, 180, 246, 432, 574, 623, 670, 678, 958], "your": [29, 99, 100, 117, 118, 128, 164, 193, 223, 226, 246, 260, 574, 592, 608, 615, 616, 630, 648, 652, 670, 679, 958], "wherev": [29, 128, 228, 246, 260, 574, 654, 679, 958], "possibl": [29, 99, 128, 151, 164, 190, 215, 228, 246, 260, 406, 416, 493, 515, 574, 605, 643, 654, 670, 679, 917, 958], "simpl": [29, 177, 246], "colx": [29, 246], "coli": [29, 246], "after": [29, 89, 98, 99, 100, 104, 108, 110, 112, 113, 114, 141, 216, 245, 246, 366, 410, 437, 499, 574, 644, 670, 678, 837, 856, 923, 958], "befor": [29, 99, 110, 123, 125, 141, 152, 167, 216, 246, 318, 319, 320, 410, 431, 443, 444, 445, 446, 447, 448, 450, 451, 452, 499, 504, 574, 606, 609, 612, 644, 670, 678, 738, 739, 740, 837, 850, 862, 863, 864, 865, 866, 867, 869, 870, 871, 923, 928, 958], "most": [29, 86, 99, 100, 110, 246, 417, 422, 431, 493, 516, 574, 842, 850, 917, 947, 958], "mandatori": [29, 246], "return_dtyp": [29, 128, 246, 260, 408, 410, 522, 550, 574, 679, 837, 958], "latter": [29, 141, 246, 678, 958], "appropri": [29, 246, 437, 574, 856, 958], "pure": [29, 246], "actual": [29, 89, 103, 121, 122, 246, 883, 958], "indic": [29, 65, 94, 98, 99, 100, 104, 108, 110, 119, 120, 122, 152, 153, 207, 246, 271, 296, 387, 390, 391, 393, 394, 395, 444, 445, 446, 447, 448, 450, 451, 452, 455, 461, 506, 525, 574, 606, 607, 670, 715, 814, 818, 820, 821, 822, 823, 874, 885, 930, 936, 958], "calcul": [29, 60, 152, 200, 220, 246, 278, 321, 363, 364, 365, 398, 406, 449, 464, 469, 515, 517, 522, 531, 556, 561, 562, 566, 574, 606, 638, 646, 670, 697, 743, 791, 792, 793, 830, 868, 888, 892, 948, 958], "individu": [29, 121, 153, 246, 260, 478, 574, 607, 635, 670, 728, 902, 958], "gridlin": [29, 246], "zoom": [29, 246], "level": [29, 33, 110, 112, 113, 114, 121, 128, 146, 177, 246, 372, 574, 608, 615, 635, 670], "definit": [29, 246, 398, 574, 830, 958], "take": [29, 121, 125, 146, 174, 180, 203, 246, 346, 467, 507, 540, 542, 574, 621, 641, 670, 773, 931, 950, 958], "care": [29, 246, 260, 456, 574, 878, 958], "rel": [29, 102, 111, 117, 118, 246, 346, 363, 364, 365, 574, 773, 791, 792, 793, 958], "see": [29, 101, 102, 103, 111, 117, 118, 121, 122, 133, 166, 180, 246, 309, 310, 311, 371, 384, 398, 408, 464, 558, 574, 730, 731, 732, 830, 888, 958, 966], "readthedoc": [29, 246, 966], "io": [29, 246, 966], "working_with_conditional_format": [29, 246], "html": [29, 87, 101, 127, 133, 246], "similarli": [29, 89, 246], "well": [29, 99, 100, 110, 140, 181, 246, 385, 574, 598, 670, 810, 958], "adjac": [29, 246], "two": [29, 88, 90, 92, 101, 146, 173, 174, 181, 212, 227, 228, 246, 254, 322, 326, 466, 506, 520, 531, 533, 556, 561, 574, 620, 621, 653, 654, 670, 744, 749, 958], "help": [29, 246, 599, 670], "where": [29, 65, 101, 137, 141, 164, 173, 190, 200, 220, 246, 271, 358, 361, 455, 464, 467, 469, 517, 531, 556, 561, 562, 566, 567, 574, 620, 638, 646, 670, 678, 689, 785, 789, 874, 888, 892, 948, 950, 958], "appear": [29, 89, 117, 246, 514, 574, 945, 958], "working_with_sparklin": [29, 246], "inject": [29, 60, 246], "locat": [29, 141, 187, 211, 216, 246, 455, 574, 644, 670, 678, 874, 877, 930, 958], "syntax": [29, 128, 177, 246, 633, 670, 958], "ensur": [29, 71, 121, 122, 151, 179, 189, 246, 385, 516, 574, 605, 616, 670, 940, 947, 958], "correctli": [29, 246], "microsoft": [29, 246], "com": [29, 101, 246, 363, 364, 365, 477, 574, 791, 792, 793, 901, 958], "u": [29, 36, 38, 70, 93, 164, 190, 206, 246, 325, 326, 332, 355, 359, 496, 545, 748, 749, 755, 782, 786], "offic": [29, 246], "f5ed2452": [29, 246], "2337": [29, 246], "4f71": [29, 246], "bed3": [29, 246], "c8ae6d2b276": [29, 246], "instanti": [29, 193, 223, 246, 630, 648, 670], "basic": [29, 246], "random": [29, 120, 121, 122, 154, 191, 246, 380, 437, 454, 460, 574, 804, 856, 873, 884, 958], "date": [29, 36, 60, 70, 99, 100, 101, 110, 115, 134, 150, 152, 153, 165, 167, 246, 276, 277, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 444, 445, 446, 447, 448, 450, 451, 452, 496, 510, 545, 549, 574, 606, 607, 612, 670, 695, 696, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 826, 846, 847, 877, 920, 942, 958], "dtm": [29, 246, 326, 749], "2023": [29, 93, 116, 165, 246, 326, 549, 749], "num": [29, 212, 246, 385, 388, 499, 574, 810, 958], "500": [29, 164, 218, 246, 599, 645, 670, 763, 765, 771, 778, 863, 864, 866, 958], "val": [29, 188, 246, 307, 510, 567, 574, 628, 670, 726], "10_000": [29, 246], "20_000": [29, 246], "30_000": [29, 246], "increas": [29, 99, 108, 246, 320, 574, 740, 958], "b4": [29, 246], "light": [29, 246], "twice": [29, 103, 246], "each": [29, 60, 100, 113, 117, 118, 120, 128, 150, 151, 165, 167, 179, 210, 216, 225, 226, 228, 229, 231, 240, 246, 260, 283, 295, 346, 350, 356, 405, 437, 467, 478, 492, 493, 522, 525, 530, 551, 554, 563, 574, 612, 624, 644, 652, 654, 655, 657, 666, 670, 702, 714, 728, 773, 777, 783, 856, 902, 916, 917, 927, 958], "titl": [29, 246], "explicit": [29, 110, 120, 246, 524, 558], "integr": [29, 246], "multi_fram": [29, 246], "wb": [29, 246], "coordin": [29, 246], "advanc": [29, 246], "len": [29, 69, 120, 121, 165, 246, 315, 441, 482, 488, 499, 574, 741, 854, 860, 906, 912, 923, 958], "min_color": [29, 246], "76933c": [29, 246], "mid_color": [29, 246], "c4d79b": [29, 246], "max_color": [29, 246], "ebf1d": [29, 246], "data_bar_2010": [29, 246], "bar_color": [29, 246], "9bbb59": [29, 246], "bar_negative_color_sam": [29, 246], "bar_negative_border_color_sam": [29, 246], "000": [29, 246], "white": [29, 246], "w": [29, 246, 477, 901], "get_worksheet_by_nam": [29, 246], "fmt_titl": [29, 246], "add_format": [29, 246], "font_color": [29, 246], "4f6228": [29, 246], "font_siz": [29, 246], "12": [29, 60, 69, 70, 93, 152, 153, 167, 219, 246, 318, 326, 333, 336, 343, 348, 350, 356, 360, 431, 459, 535, 537, 538, 550, 574, 606, 607, 608, 612, 615, 633, 640, 670, 679, 741, 749, 770, 777, 783, 872, 958], "ital": [29, 246], "bold": [29, 246], "customis": [29, 246], "trend": [29, 246], "win_loss": [29, 246], "subtl": [29, 246], "tone": [29, 246], "hidden": [29, 246], "id": [29, 228, 246, 486, 487, 514, 516, 574, 654, 945, 958], "q1": [29, 246], "55": [29, 62, 116, 246], "20": [29, 141, 157, 158, 180, 182, 186, 187, 246, 268, 269, 270, 321, 350, 356, 380, 384, 545, 549, 574, 623, 670, 743, 783, 958], "35": [29, 122, 246, 321, 574, 743, 958], "q2": [29, 246], "30": [29, 69, 141, 152, 157, 180, 186, 187, 205, 223, 246, 268, 269, 270, 321, 326, 331, 336, 348, 349, 350, 356, 360, 380, 459, 549, 574, 606, 623, 648, 670, 741, 743, 749, 754, 776, 777, 783, 958], "15": [29, 128, 152, 153, 158, 246, 320, 321, 350, 356, 535, 574, 606, 607, 670, 740, 743, 777, 783, 958], "60": [29, 141, 246, 351, 352, 496, 774, 778, 779, 920], "q3": [29, 246], "50": [29, 141, 246, 309, 310, 311, 350, 356, 574, 730, 783, 958], "40": [29, 141, 180, 246, 350, 356, 380, 574, 623, 670, 759, 783], "80": [29, 246], "q4": [29, 246], "75": [29, 134, 246, 257, 429, 574, 742, 806, 854, 958], "account": [29, 93, 246, 346, 363, 364, 365, 574, 773, 791, 792, 793, 958], "flavour": [29, 246], "integer_dtyp": [29, 193, 246, 630, 670], "0_": [29, 246], "just": [29, 101, 110, 173, 246, 620, 670], "unifi": [29, 246], "multi": [29, 99, 100, 246, 366, 574], "2_color_scal": [29, 246], "95b3d7": [29, 246], "ffffff": [29, 246], "base": [29, 34, 137, 144, 152, 153, 246, 361, 363, 364, 365, 403, 404, 485, 574, 585, 595, 602, 606, 607, 670, 789, 791, 792, 793, 806, 833, 834, 854, 909, 950, 958], "standardis": [29, 246], "z": [29, 93, 120, 121, 139, 160, 162, 166, 173, 246, 253, 257, 275, 307, 380, 429, 440, 496, 574, 611, 620, 636, 670, 726, 798, 920, 958], "score": [29, 246], "conjunct": [29, 103, 246], "a123": [29, 246], "b345": [29, 246], "c567": [29, 246], "d789": [29, 246], "e101": [29, 246], "45": [29, 153, 246, 326, 350, 356, 472, 478, 549, 607, 670, 749, 777, 783, 896, 902], "85": [29, 246], "font": [29, 246], "consola": [29, 246], "standard": [29, 200, 246, 336, 364, 450, 464, 469, 480, 562, 574, 638, 670, 759, 792, 888, 892, 904, 958], "stdev": [29, 246], "ipccompress": [30, 246], "arrow": [30, 72, 86, 101, 104, 112, 204, 246, 634, 670, 935, 940, 958], "ipc": [30, 104, 105, 112, 115, 246, 585], "binari": [30, 246, 300, 302, 303, 304, 521, 718, 720, 721, 722], "feather": [30, 104, 112, 246, 585], "lz4": [30, 33, 246, 634, 635, 670], "zstd": [30, 33, 246, 634, 635, 670], "pretti": [31, 246], "row_ori": [31, 246], "iobas": [31, 32, 106, 107, 246, 626, 651, 670], "serial": [31, 32, 246], "represent": [31, 32, 208, 246, 307, 330, 333, 336, 337, 339, 341, 343, 344, 347, 348, 351, 357, 358, 360, 510, 574, 597, 614, 670, 726, 753, 756, 758, 759, 763, 765, 768, 770, 771, 774, 775, 778, 784, 785, 787, 938, 942, 958], "orient": [31, 61, 63, 90, 92, 246, 670], "slower": [31, 90, 92, 128, 151, 179, 219, 228, 246, 605, 654, 670, 679, 958], "common": [31, 246, 579], "write_ndjson": [31, 246], "newlin": [32, 107, 113, 246], "delimit": [32, 94, 99, 100, 107, 110, 113, 181, 207, 246, 470, 894, 936, 958], "parquetcompress": [33, 246], "compression_level": [33, 246, 635, 670], "statist": [33, 99, 100, 108, 114, 134, 246, 364, 365, 398, 444, 445, 446, 447, 448, 449, 450, 451, 452, 464, 574, 635, 670, 742, 792, 793, 830, 868, 888, 958], "row_group_s": [33, 246, 635, 670], "use_pyarrow": [33, 99, 104, 108, 246, 635, 670, 939, 940, 958], "pyarrow_opt": [33, 102, 108, 111, 246], "parquet": [33, 108, 109, 114, 246, 585, 635, 670], "gzip": [33, 246, 635, 670], "lzo": [33, 246, 635, 670], "brotli": [33, 246, 635, 670], "choos": [33, 246, 634, 635, 670], "good": [33, 164, 246, 634, 635, 670], "perform": [33, 77, 87, 99, 100, 104, 108, 110, 112, 113, 114, 127, 128, 152, 153, 167, 184, 228, 246, 260, 430, 574, 606, 607, 612, 634, 635, 650, 654, 670, 679, 958], "fast": [33, 246, 369, 456, 574, 634, 635, 670, 796, 878, 958], "decompress": [33, 246, 634, 635, 670], "backward": [33, 143, 167, 246, 299, 371, 574, 601, 612, 635, 670, 798, 958], "guarante": [33, 87, 99, 100, 215, 246, 599, 635, 643, 670], "deal": [33, 164, 246, 349, 437, 496, 574, 635, 670, 776, 856, 920, 958], "older": [33, 246, 635, 670], "reader": [33, 96, 99, 100, 104, 108, 246, 586, 635, 670], "higher": [33, 183, 238, 246, 436, 448, 557, 574, 625, 635, 664, 670, 855, 867, 958], "mean": [33, 99, 100, 104, 108, 110, 134, 143, 151, 181, 226, 246, 368, 371, 445, 464, 477, 526, 574, 601, 605, 616, 635, 652, 670, 742, 795, 798, 803, 864, 888, 901, 958], "smaller": [33, 139, 246, 599, 635, 670, 790, 958], "disk": [33, 104, 246, 633, 634, 635, 670], "11": [33, 116, 153, 246, 323, 324, 336, 346, 350, 356, 384, 431, 451, 465, 499, 519, 528, 564, 574, 592, 607, 608, 615, 624, 635, 640, 670, 679, 773, 777, 783, 862, 958], "22": [33, 246, 350, 356, 359, 496, 528, 635, 670, 777, 783, 786, 920], "extra": [33, 99, 102, 103, 104, 108, 111, 112, 114, 141, 246, 635, 670, 678, 958], "comput": [33, 67, 68, 74, 139, 151, 167, 210, 215, 226, 238, 246, 252, 262, 263, 264, 265, 266, 267, 287, 288, 289, 312, 313, 315, 316, 317, 318, 319, 322, 361, 367, 398, 403, 404, 405, 422, 430, 431, 435, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 462, 463, 464, 468, 508, 509, 525, 531, 533, 540, 556, 561, 574, 605, 609, 611, 612, 635, 643, 649, 652, 664, 670, 674, 680, 681, 682, 683, 684, 685, 706, 707, 708, 734, 735, 736, 737, 738, 739, 744, 789, 790, 794, 830, 833, 834, 835, 842, 850, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 885, 886, 887, 888, 891, 932, 933, 941, 958], "reduc": [33, 99, 100, 108, 110, 112, 113, 114, 233, 234, 236, 239, 246, 459, 543, 574, 635, 659, 660, 662, 665, 670, 839, 853, 882, 928, 958], "pressur": [33, 108, 113, 114, 246, 459, 574, 635, 670, 882, 958], "improv": [33, 104, 112, 246, 635, 670], "speed": [33, 246, 260, 574, 635, 670], "minimum": [33, 120, 121, 122, 146, 175, 246, 363, 364, 365, 420, 426, 437, 554, 574, 622, 635, 670, 730, 767, 791, 792, 793, 847, 852, 856, 958], "implement": [33, 87, 127, 128, 228, 246, 260, 574, 654, 679, 876, 877, 958], "v": [33, 69, 139, 246, 455, 574, 741, 874, 958], "At": [33, 246], "moment": [33, 133, 246, 398, 464, 574, 830, 888, 958], "argument": [33, 99, 102, 108, 111, 133, 135, 140, 151, 152, 153, 171, 179, 180, 181, 193, 199, 201, 210, 216, 219, 223, 226, 246, 350, 356, 366, 385, 430, 432, 444, 445, 446, 447, 448, 450, 451, 452, 467, 483, 489, 495, 496, 525, 527, 528, 529, 530, 541, 551, 554, 560, 563, 574, 594, 598, 605, 606, 607, 623, 630, 637, 644, 648, 652, 670, 777, 783, 810, 907, 913, 919, 920, 941, 958], "pyarrow": [33, 86, 91, 99, 102, 104, 108, 111, 115, 116, 165, 204, 209, 210, 246, 586, 935, 939, 940, 941, 958], "write_t": [33, 246], "calendar": [35, 36, 152, 153, 167, 219, 246, 336, 346, 350, 356, 360, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 612, 670, 759, 773, 777, 783, 787], "time": [36, 38, 66, 67, 70, 110, 141, 152, 153, 167, 219, 246, 275, 276, 277, 297, 305, 325, 326, 327, 332, 346, 349, 355, 359, 496, 510, 511, 529, 530, 539, 545, 559, 574, 592, 606, 607, 612, 624, 670, 678, 694, 696, 723, 748, 749, 750, 755, 773, 776, 782, 786, 920, 942, 943, 958], "time_unit": [36, 38, 70, 93, 325, 326, 332, 355, 359, 545, 748, 749, 755, 782, 786], "time_zon": [36, 70, 93, 327, 349, 750, 776], "timezon": [36, 70, 496, 920], "m": [36, 38, 70, 325, 326, 332, 353, 355, 359, 496, 545, 748, 749, 755, 780, 782, 786, 920], "zone": [36, 70, 327, 349, 750, 776], "zoneinfo": 36, "run": [36, 67, 128, 151, 168, 181, 215, 228, 246, 260, 279, 320, 560, 574, 592, 597, 599, 605, 616, 620, 624, 633, 634, 635, 643, 654, 670, 679, 698, 740, 958, 965], "available_timezon": 36, "attribut": [36, 37, 38, 45, 119, 246, 568, 570, 575, 576, 580, 581, 582, 670, 952, 954, 959, 962, 963, 964], "128": [37, 62, 850, 958], "bit": [37, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 439, 471, 574, 858, 895, 958], "neg": [37, 152, 155, 169, 195, 196, 198, 202, 246, 291, 292, 457, 458, 465, 490, 574, 606, 631, 632, 636, 650, 670, 710, 711, 805, 832, 880, 881, 889, 914, 929, 958], "scale": [37, 139, 246, 790, 958], "experiment": [37, 69, 115, 193, 217, 218, 223, 246, 320, 350, 444, 445, 446, 447, 448, 450, 451, 452, 574, 630, 645, 648, 670, 740, 777, 806, 854, 958], "progress": 37, "expect": [37, 78, 80, 85, 260, 522, 549, 574, 614, 616, 670, 854, 958], "delta": [38, 102, 111, 200, 220, 246, 469, 517, 531, 556, 561, 562, 566, 574, 585, 638, 646, 670, 892, 948, 958], "32": [39, 42, 55, 62, 153, 163, 246, 423, 459, 574, 607, 670, 744, 774, 850, 867, 958], "sign": [41, 42, 43, 44, 346, 439, 499, 574, 773, 819, 858, 923, 958], "inner": [45, 51, 71, 166, 218, 246, 284, 322, 574, 611, 645, 651, 670, 703, 744, 958], "polarsdatatyp": [45, 97, 99, 100, 105, 109, 110, 119, 120, 121, 122, 124, 128, 138, 246, 260, 306, 366, 408, 410, 479, 522, 524, 528, 541, 549, 550, 574, 596, 670, 679, 724, 837, 903, 958], "pythondatatyp": 45, "nest": [45, 51, 93, 139, 246, 585, 790, 958], "arrai": [45, 86, 90, 99, 100, 108, 139, 204, 209, 210, 246, 275, 286, 287, 288, 289, 290, 293, 294, 302, 309, 310, 311, 315, 316, 317, 318, 319, 404, 444, 445, 447, 450, 451, 452, 456, 472, 474, 477, 478, 480, 540, 574, 670, 694, 705, 706, 707, 708, 709, 712, 713, 720, 730, 731, 732, 736, 737, 738, 739, 744, 790, 834, 835, 863, 864, 866, 869, 870, 871, 878, 883, 896, 898, 901, 902, 904, 935, 940, 941, 949, 958], "within": [45, 117, 118, 167, 246, 467, 574, 612, 670], "wrap": [47, 93, 385, 574], "arbitrari": [47, 121], "python": [47, 70, 99, 100, 116, 128, 164, 190, 206, 228, 246, 260, 326, 408, 522, 567, 574, 579, 654, 679, 749, 760, 761, 762, 767, 939, 958], "queri": [48, 67, 101, 104, 110, 112, 113, 114, 141, 168, 180, 246, 297, 410, 480, 574, 592, 597, 599, 608, 615, 624, 633, 650, 654, 670, 678, 904, 958, 965], "pars": [48, 99, 100, 103, 110, 112, 113, 129, 151, 193, 199, 213, 223, 226, 246, 385, 430, 467, 479, 485, 496, 525, 527, 529, 530, 545, 551, 554, 563, 574, 588, 605, 630, 637, 642, 648, 652, 670, 810, 903, 909, 920, 958], "transform": [48, 128, 246, 408, 497, 498, 574], "lf": [50, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 670], "under": [50, 61, 62, 63, 64, 568, 570, 575, 576, 580, 581, 582, 952, 954, 959, 962, 963, 964], "context": [51, 123, 177, 246, 254, 260, 279, 372, 416, 466, 467, 516, 522, 532, 542, 545, 560, 573, 574, 585, 649, 670, 698], "manag": [51, 585], "categor": [51, 71, 94, 166, 207, 208, 246, 307, 410, 510, 574, 725, 726, 942, 958], "temporarili": [51, 123, 152, 153, 246, 606, 607, 670], "cach": [51, 67, 71, 104, 110, 112, 114, 410, 444, 445, 446, 447, 448, 450, 451, 452, 496, 574, 592, 597, 599, 624, 633, 670, 920], "categori": [51, 69, 71, 307, 726, 741, 806, 854, 958], "until": [51, 168, 246], "finish": [51, 74, 141, 246, 678, 958], "global": [51, 71, 121, 410, 574], "invalid": [51, 99, 100, 110, 479, 480, 485, 512, 574, 903, 904, 909], "outermost": 51, "exit": [51, 125], "df1": [51, 60, 68, 71, 117, 141, 147, 210, 221, 246], "color": [51, 71, 228, 654], "red": [51, 71, 228, 654], "green": [51, 71, 228, 654], "blue": [51, 71], "orang": [51, 71, 132, 229, 230, 232, 233, 234, 236, 238, 239, 246, 655, 656, 658, 659, 660, 662, 664, 665], "uint8": [51, 71, 119, 208, 246, 318, 319, 410, 504, 519, 574, 738, 739, 928, 958], "df2": [51, 60, 68, 71, 117, 141, 147, 210, 221, 246], "yellow": [51, 71], "black": [51, 71, 128, 246], "join": [51, 60, 67, 71, 167, 218, 246, 384, 430, 574, 592, 597, 599, 612, 624, 633, 645, 649, 670], "succe": [51, 99, 100, 110], "df_join": [51, 71], "cat": [51, 69, 71, 208, 246, 471, 497, 498, 510, 530, 570, 574, 741, 806, 854, 895, 954, 958], "u8": [51, 71, 94, 207, 208, 246, 410, 519, 574, 936, 958], "schemadict": [52, 86, 88, 89, 90, 91, 92, 110, 192, 246, 563, 616, 629, 654, 670], "composit": 52, "dai": [53, 70, 152, 153, 165, 167, 219, 246, 332, 336, 343, 346, 347, 348, 350, 355, 356, 357, 358, 360, 444, 445, 446, 447, 448, 450, 451, 452, 537, 538, 539, 574, 606, 607, 612, 670, 773, 774, 777, 783, 785], "unsign": [54, 55, 56, 57, 439, 574, 819, 858, 958], "could": [58, 74, 137, 152, 246, 306, 534, 543, 574, 595, 606, 670, 724, 958], "static": [58, 654], "utf": 59, "descend": [60, 129, 199, 213, 246, 270, 293, 437, 456, 466, 467, 525, 574, 588, 637, 642, 670, 688, 712, 825, 856, 878, 890, 958], "union": [60, 67, 68, 179, 246, 592, 597, 599, 624, 633, 670, 744, 817, 877, 958], "uniqu": [60, 119, 120, 122, 162, 177, 237, 246, 261, 272, 388, 396, 424, 496, 514, 516, 523, 555, 574, 663, 670, 690, 742, 815, 827, 844, 920, 945, 947, 958], "fill": [60, 68, 97, 124, 142, 143, 196, 217, 246, 299, 316, 319, 370, 371, 377, 384, 444, 445, 447, 450, 451, 452, 458, 482, 488, 499, 544, 574, 600, 601, 632, 649, 670, 797, 798, 848, 863, 864, 866, 869, 870, 871, 881, 906, 912, 923, 958], "sort": [60, 61, 117, 129, 152, 153, 167, 174, 180, 181, 213, 219, 231, 240, 246, 270, 307, 372, 456, 467, 516, 518, 525, 574, 588, 597, 606, 607, 612, 621, 623, 624, 633, 642, 657, 666, 670, 688, 726, 825, 878, 944, 947, 958], "origin": [60, 99, 100, 215, 246, 349, 397, 410, 430, 439, 472, 477, 478, 480, 482, 488, 499, 574, 643, 670, 741, 776, 837, 854, 896, 901, 902, 904, 906, 912, 923, 958], "doe": [60, 80, 86, 88, 89, 90, 92, 93, 99, 100, 102, 103, 110, 111, 115, 117, 118, 141, 165, 189, 190, 215, 223, 246, 359, 410, 514, 542, 574, 599, 616, 643, 648, 670, 678, 786, 803, 837, 883, 949, 958], "receiv": [60, 110, 128, 180, 246, 432, 574, 623, 670], "now": [60, 153, 246, 496, 607, 670, 920], "whose": [60, 167, 181, 246, 366, 541, 574, 612, 670], "post": 60, "constrain": 60, "newli": 60, "boolean": [60, 65, 129, 144, 146, 199, 213, 246, 256, 257, 258, 276, 300, 335, 372, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 429, 467, 479, 518, 519, 525, 563, 574, 588, 602, 637, 642, 670, 676, 677, 689, 695, 718, 758, 799, 810, 811, 812, 814, 815, 817, 818, 820, 821, 822, 823, 827, 851, 852, 876, 895, 950, 958], "2022": [60, 70, 134, 150, 246, 326, 496, 539, 545, 749, 759, 920], "x": [60, 93, 99, 100, 101, 110, 120, 121, 139, 157, 160, 162, 166, 173, 181, 246, 253, 257, 260, 275, 284, 362, 376, 378, 379, 380, 400, 405, 407, 408, 421, 423, 427, 429, 433, 440, 461, 464, 492, 502, 510, 512, 519, 522, 534, 535, 536, 543, 549, 550, 558, 564, 574, 611, 616, 620, 636, 670, 675, 679, 798, 828, 885, 888, 916, 942, 958], "y": [60, 93, 120, 121, 139, 160, 162, 166, 173, 181, 246, 253, 257, 275, 284, 353, 362, 378, 379, 400, 407, 427, 429, 440, 496, 512, 519, 536, 549, 564, 574, 611, 620, 636, 670, 675, 780, 920, 958], "df3": [60, 246], "set_tbl_format": 60, "09": [60, 153, 246, 326, 336, 607, 670, 753], "01": [60, 70, 134, 150, 152, 153, 219, 246, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 496, 539, 606, 607, 670, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 920], "02": [60, 70, 116, 150, 152, 153, 219, 246, 325, 326, 332, 333, 334, 341, 342, 343, 349, 351, 352, 355, 357, 359, 453, 496, 539, 574, 606, 607, 670, 748, 749, 751, 752, 755, 756, 757, 760, 761, 762, 763, 765, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 920], "03": [60, 70, 93, 152, 153, 219, 246, 325, 326, 327, 331, 332, 334, 342, 343, 349, 350, 351, 352, 353, 355, 356, 357, 359, 606, 607, 670, 748, 749, 750, 753, 754, 755, 756, 757, 760, 761, 762, 763, 765, 767, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786], "af1": 60, "af2": 60, "af3": 60, "keep": [60, 99, 100, 110, 215, 218, 219, 246, 397, 410, 527, 574, 643, 645, 670, 741, 837, 854, 958], "easili": [60, 193, 223, 226, 246, 528, 563, 630, 648, 652, 670], "dot": [60, 574, 633, 670, 958], "product": [60, 133, 246, 318, 322, 522, 574, 738, 744, 958], "fill_nul": [60, 142, 246, 496, 574, 600, 649, 670, 920, 958], "167": 60, "47": 60, "callabl": [61, 62, 63, 64, 110, 128, 146, 180, 228, 246, 260, 297, 408, 409, 432, 443, 522, 534, 535, 543, 550, 558, 574, 616, 623, 654, 670, 679, 716, 862, 958], "decor": [61, 62, 63, 64, 121, 122, 128, 246, 260, 574, 679, 958], "access": [61, 62, 63, 64, 164, 189, 190, 246, 410, 574, 649, 670], "by_first_letter_of_column_nam": 61, "f": [61, 100, 134, 150, 165, 204, 214, 217, 246, 253, 260, 297, 459, 476, 496, 522, 529, 550, 574, 716, 900, 920], "fromkei": [61, 63], "by_first_letter_of_column_valu": 61, "starts_with": [61, 471, 475, 899], "slice": [61, 67, 139, 155, 165, 202, 246, 283, 295, 443, 444, 445, 446, 447, 448, 450, 451, 452, 574, 592, 597, 599, 616, 624, 633, 634, 635, 670, 702, 714, 790, 805, 862, 863, 864, 865, 866, 867, 869, 870, 871, 929, 958], "to_seri": [61, 65, 148, 246, 297, 716], "xx": [61, 63], "xy": [61, 63], "yy": [61, 63], "yz": [61, 63], "a2": [61, 63], "b1": [61, 63], "b2": [61, 63], "pow_n": 62, "powersofn": 62, "next": [62, 299, 437, 574, 856, 958], "p": [62, 180, 246, 432, 563, 574, 623, 670], "ceil": [62, 574, 958], "previou": [62, 125, 431, 501, 574, 850, 958], "floor": [62, 574, 958], "nearest": [62, 167, 183, 238, 246, 308, 375, 436, 448, 557, 574, 612, 625, 664, 670, 727, 801, 809, 855, 867, 958], "24": [62, 116, 128, 139, 153, 246, 318, 320, 334, 423, 574, 607, 670, 740, 757, 829, 958], "001": [62, 337, 338, 340, 345, 539, 764, 766, 772], "next_pow2": 62, "prev_pow2": 62, "nearest_pow2": 62, "split_by_column_dtyp": 63, "collect": [63, 67, 110, 111, 115, 121, 122, 168, 204, 246, 260, 389, 524, 529, 545, 563, 574, 588, 594, 595, 598, 599, 600, 601, 602, 603, 605, 606, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 623, 625, 627, 628, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 670, 817, 958], "31": [64, 70, 326, 330, 331, 343, 346, 357, 496, 537, 538, 545, 549, 749, 753, 754, 773, 920], "42": [64, 153, 154, 246, 607, 670, 804, 958], "961": 64, "1764": 64, "4160": 64, "eager": [65, 152, 217, 246, 524, 545, 559, 563, 573, 585, 606, 670], "evalu": [65, 142, 144, 167, 246, 257, 271, 320, 383, 385, 389, 410, 429, 521, 524, 540, 559, 563, 567, 574, 602, 609, 611, 612, 670, 689, 740, 950, 958], "immedi": [65, 437, 524, 559, 563, 574, 856, 958], "arg_tru": [65, 574, 958], "u32": [65, 152, 178, 224, 229, 237, 239, 246, 254, 261, 268, 269, 270, 271, 272, 273, 274, 277, 286, 314, 315, 330, 333, 337, 341, 343, 347, 348, 351, 357, 358, 401, 410, 424, 428, 437, 455, 472, 481, 484, 510, 514, 523, 525, 532, 555, 574, 606, 650, 655, 663, 665, 670, 688, 689, 690, 705, 724, 753, 756, 763, 765, 768, 770, 771, 774, 775, 778, 784, 785, 806, 856, 896, 905, 908, 942, 945, 947, 958], "build": [66, 87], "wa": 66, "compil": [66, 273, 274, 692, 693], "gate": 66, "info": [66, 102, 111, 116, 335, 758], "otherwis": [66, 123, 174, 193, 246, 301, 309, 310, 311, 349, 363, 364, 365, 439, 471, 473, 567, 574, 621, 630, 670, 679, 719, 730, 731, 732, 776, 791, 792, 793, 858, 876, 877, 895, 897, 958], "version": [66, 69, 94, 102, 111, 116, 496, 548, 556, 558, 561, 920], "depend": [66, 116, 260, 273, 274, 416, 437, 522, 542, 545, 574, 692, 693, 856, 958], "host": [66, 99, 104, 108, 112, 114], "git": 66, "lazy_fram": 67, "type_coercion": [67, 592, 597, 599, 624, 633, 634, 635, 670], "predicate_pushdown": [67, 592, 597, 599, 616, 624, 633, 634, 635, 670], "projection_pushdown": [67, 592, 597, 599, 616, 624, 633, 634, 635, 670], "simplify_express": [67, 592, 597, 599, 624, 633, 634, 635, 670], "no_optim": [67, 592, 599, 616, 624, 634, 635, 670], "slice_pushdown": [67, 592, 597, 599, 616, 624, 633, 634, 635, 670], "common_subplan_elimin": [67, 592, 597, 599, 624, 633, 670], "graph": [67, 168, 246, 609, 649, 670], "parallel": [67, 68, 96, 101, 108, 114, 152, 167, 168, 180, 246, 279, 320, 574, 585, 606, 611, 612, 670, 698, 740, 958], "threadpool": [67, 123], "coercion": [67, 440, 574, 592, 597, 599, 624, 633, 634, 635, 670], "optim": [67, 108, 110, 112, 113, 114, 164, 168, 180, 184, 190, 215, 246, 592, 597, 599, 616, 624, 633, 634, 635, 643, 650, 670], "predic": [67, 110, 112, 113, 114, 115, 144, 163, 189, 246, 372, 518, 543, 574, 592, 597, 599, 602, 616, 624, 627, 633, 634, 635, 650, 670, 799, 876, 877, 958], "pushdown": [67, 592, 597, 599, 616, 624, 627, 633, 634, 635, 650, 670, 876, 877, 958], "project": [67, 110, 112, 113, 114, 260, 466, 467, 574, 592, 597, 599, 616, 624, 627, 633, 634, 635, 651, 670], "turn": [67, 99, 100, 110, 516, 574, 592, 597, 599, 616, 624, 634, 635, 670], "off": [67, 99, 100, 110, 516, 574, 592, 597, 599, 616, 624, 634, 635, 670], "Will": [67, 214, 246, 592, 597, 599, 624, 633, 670, 958], "try": [67, 81, 83, 99, 100, 103, 104, 108, 110, 112, 114, 592, 597, 599, 624, 633, 670], "branch": [67, 592, 597, 599, 624, 633, 670], "subplan": [67, 592, 597, 599, 624, 633, 670], "occur": [67, 277, 422, 437, 574, 592, 597, 599, 624, 633, 670, 696, 842, 856, 958], "part": [67, 86, 492, 493, 592, 597, 599, 624, 633, 649, 670, 753, 756, 763, 765, 768, 770, 771, 778, 787, 916, 917], "fashion": [67, 166, 246, 592, 597, 599, 624, 633, 670], "item": [68, 100, 189, 191, 246, 276, 282, 284, 368, 454, 493, 574, 695, 701, 703, 795, 873, 917, 958], "iter": [68, 129, 151, 152, 153, 164, 165, 179, 189, 190, 193, 199, 213, 214, 223, 225, 226, 246, 320, 366, 430, 467, 525, 527, 528, 529, 530, 541, 551, 554, 560, 563, 567, 574, 588, 605, 606, 607, 630, 637, 642, 648, 652, 670, 740, 958], "concatmethod": 68, "vertic": [68, 141, 217, 221, 246, 470, 551, 554, 894], "rechunk": [68, 86, 91, 99, 100, 104, 108, 110, 112, 113, 114, 141, 246, 574, 678, 728, 843, 958], "aggreg": [68, 99, 100, 108, 146, 152, 170, 171, 172, 175, 177, 181, 182, 183, 200, 201, 217, 220, 226, 227, 230, 232, 246, 254, 372, 382, 408, 430, 443, 444, 445, 446, 447, 448, 450, 451, 452, 516, 534, 535, 536, 543, 548, 551, 554, 558, 564, 574, 606, 616, 617, 618, 619, 622, 625, 638, 639, 646, 652, 653, 656, 658, 670, 807, 862, 863, 864, 866, 869, 870, 871, 958], "concaten": [68, 146, 180, 246, 432, 529, 530, 574, 623, 670, 728, 843, 958], "diagon": [68, 214, 246], "strategi": [68, 99, 119, 120, 121, 122, 143, 152, 166, 167, 176, 246, 260, 297, 371, 574, 601, 606, 611, 612, 670, 716, 798, 958], "vstack": [68, 141, 246], "find": [68, 145, 246, 455, 574, 874, 958], "miss": [68, 99, 100, 110, 142, 246, 299, 363, 364, 365, 377, 384, 391, 393, 561, 574, 600, 670, 791, 792, 793, 949, 958], "stack": [68, 157, 221, 246], "length": [68, 69, 97, 110, 120, 124, 152, 153, 198, 246, 292, 320, 350, 356, 417, 443, 444, 445, 446, 447, 448, 450, 451, 452, 465, 482, 484, 488, 490, 499, 524, 574, 606, 607, 624, 636, 670, 711, 716, 728, 740, 741, 749, 777, 783, 831, 848, 854, 862, 863, 864, 865, 866, 867, 869, 870, 871, 889, 906, 908, 912, 914, 923, 958], "don": [68, 128, 215, 217, 246, 260, 279, 320, 522, 574, 643, 670, 679, 698, 740, 875, 949, 958], "t": [68, 103, 110, 128, 180, 215, 217, 246, 260, 279, 320, 349, 361, 363, 364, 365, 432, 483, 489, 495, 496, 522, 567, 574, 623, 643, 670, 679, 698, 740, 776, 789, 791, 792, 793, 875, 907, 913, 919, 920, 949, 958], "sure": [68, 86, 91, 99, 100, 101, 104, 108, 184, 246, 524], "contigu": [68, 86, 91, 99, 100, 104, 108, 110, 112, 113, 114, 184, 246], "relev": 68, "execut": [68, 168, 246, 279, 589, 616, 624, 670, 698], "df_h1": 68, "l1": 68, "l2": 68, "df_h2": 68, "r1": 68, "r2": 68, "r3": 68, "df_d1": 68, "df_d2": 68, "bin": [69, 485, 519, 568, 574, 741, 806, 854, 909, 952, 958], "label": [69, 443, 444, 445, 446, 447, 448, 450, 451, 452, 574, 624, 670, 741, 854, 862, 863, 864, 865, 866, 867, 869, 870, 871, 958], "break_point_label": [69, 741, 854, 958], "break_point": [69, 741, 806, 854, 958], "category_label": [69, 741, 854, 958], "discret": [69, 278, 321, 361, 574, 697, 741, 743, 789, 806, 854, 958], "deprec": [69, 94, 496, 548, 556, 561, 670, 920], "sinc": [69, 94, 102, 111, 332, 496, 545, 548, 556, 561, 755, 920], "assign": [69, 120, 152, 246, 437, 492, 493, 574, 606, 670, 741, 837, 854, 856, 916, 917, 958], "breakpoint": [69, 741, 854, 958], "inf": [69, 121, 122, 267, 387, 390, 512, 574, 685, 741, 806, 814, 818, 836, 850, 854, 946, 958], "interv": [70, 152, 153, 219, 246, 335, 350, 351, 356, 385, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 670, 753, 755, 756, 758, 763, 765, 768, 770, 771, 774, 775, 777, 778, 780, 782, 783, 784, 785, 787, 810, 958], "timedelta": [70, 152, 153, 219, 246, 330, 332, 333, 336, 341, 343, 346, 347, 348, 350, 351, 353, 355, 356, 357, 358, 360, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 670, 760, 762, 767, 773, 777, 783, 846, 847, 958], "1d": [70, 152, 153, 167, 219, 246, 325, 334, 342, 346, 350, 356, 359, 444, 445, 446, 447, 448, 450, 451, 452, 549, 574, 606, 607, 612, 670, 748, 755, 757, 760, 761, 762, 767, 769, 773, 777, 780, 782, 783, 785, 786], "closedinterv": [70, 152, 153, 246, 385, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 670, 810, 958], "lower": [70, 110, 152, 183, 238, 246, 309, 311, 385, 406, 436, 439, 448, 524, 557, 574, 599, 606, 625, 664, 670, 732, 810, 836, 855, 858, 867, 946, 958], "bound": [70, 99, 100, 139, 152, 246, 282, 296, 309, 310, 311, 385, 406, 515, 524, 574, 606, 670, 701, 715, 731, 732, 790, 810, 836, 946, 958], "upper": [70, 99, 100, 139, 152, 246, 309, 310, 385, 515, 524, 574, 606, 670, 731, 790, 810, 836, 946, 958], "period": [70, 152, 153, 195, 196, 246, 291, 350, 356, 363, 364, 365, 431, 457, 458, 574, 606, 607, 631, 632, 670, 710, 777, 783, 791, 792, 793, 850, 880, 881, 958], "like": [70, 87, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 160, 162, 166, 246, 279, 419, 437, 551, 554, 564, 574, 599, 626, 670, 698, 856, 958], "durat": [70, 167, 219, 246, 331, 334, 338, 340, 342, 345, 352, 359, 510, 574, 612, 670, 754, 757, 764, 766, 769, 772, 779, 786, 942, 958], "3d12h4m25": [70, 152, 153, 167, 219, 246, 350, 356, 606, 607, 612, 670, 777, 783], "hour": [70, 152, 153, 167, 219, 246, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 538, 539, 574, 606, 607, 612, 670, 773, 777, 783], "minut": [70, 152, 153, 167, 219, 246, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 538, 539, 574, 606, 607, 612, 670, 773, 777, 783], "tempor": [70, 152, 153, 164, 190, 206, 246, 385, 444, 445, 446, 447, 448, 450, 451, 452, 574, 585, 606, 607, 670, 810, 826, 958], "window": [70, 152, 153, 246, 320, 350, 356, 363, 364, 365, 430, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 529, 574, 606, 607, 670, 740, 777, 783, 791, 792, 793, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 958], "granular": 70, "finer": 70, "permut": 70, "1mo": [70, 152, 153, 167, 219, 246, 327, 331, 346, 349, 350, 353, 356, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 612, 670, 750, 754, 770, 773, 774, 775, 776, 777, 783, 784], "dtrang": 70, "1985": 70, "04": [70, 115, 152, 219, 246, 326, 327, 330, 331, 334, 341, 342, 343, 347, 349, 350, 351, 352, 353, 357, 358, 359, 496, 539, 606, 670, 750, 754, 757, 763, 765, 768, 769, 770, 771, 775, 776, 778, 779, 780, 784, 785, 786, 920], "05": [70, 115, 117, 118, 167, 219, 246, 326, 327, 331, 349, 351, 353, 612, 670, 749, 750, 751, 752, 753, 754, 776, 777, 781, 783, 785], "07": [70, 326, 330, 347, 349, 350, 356, 358, 496, 545, 749, 753, 776, 785, 920], "08": [70, 117, 118, 153, 246, 326, 350, 496, 539, 607, 670, 777, 783, 920], "america": 70, "new_york": 70, "\u03bc": [70, 93, 152, 153, 167, 219, 246, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 496, 539, 545, 606, 607, 612, 670, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 920], "est": 70, "combin": [70, 81, 83, 152, 153, 154, 167, 219, 246, 257, 271, 346, 356, 429, 483, 489, 495, 574, 606, 607, 612, 633, 670, 773, 783, 907, 913, 919], "offset_bi": 70, "get": [70, 95, 105, 109, 123, 129, 132, 138, 148, 149, 152, 153, 155, 156, 160, 162, 163, 169, 176, 189, 192, 194, 198, 202, 213, 222, 231, 240, 246, 254, 268, 269, 270, 272, 281, 285, 286, 298, 315, 316, 317, 318, 319, 332, 346, 373, 381, 386, 388, 396, 399, 402, 411, 412, 413, 416, 418, 420, 425, 426, 436, 465, 469, 481, 484, 504, 505, 513, 517, 542, 547, 551, 552, 553, 554, 562, 565, 566, 574, 588, 593, 596, 603, 606, 607, 608, 613, 615, 629, 636, 640, 642, 647, 657, 666, 670, 686, 687, 688, 689, 690, 700, 704, 705, 717, 728, 736, 737, 738, 739, 755, 773, 802, 805, 810, 812, 815, 827, 832, 838, 840, 841, 843, 846, 847, 851, 852, 855, 889, 892, 905, 908, 929, 935, 936, 944, 948, 949, 958], "last": [70, 129, 155, 167, 169, 181, 199, 202, 213, 215, 240, 246, 270, 282, 295, 320, 330, 347, 357, 466, 493, 505, 565, 574, 588, 612, 637, 640, 642, 643, 666, 670, 688, 701, 714, 740, 753, 774, 784, 805, 832, 917, 929, 958], "month": [70, 152, 153, 167, 219, 246, 330, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 537, 538, 574, 606, 607, 612, 670, 753, 773, 777, 783], "28": [70, 205, 246, 253, 349, 359, 574, 776, 786], "disabl": [71, 164, 246], "equal": [71, 99, 100, 110, 117, 118, 147, 152, 167, 174, 246, 362, 378, 400, 443, 444, 445, 446, 447, 448, 450, 451, 452, 481, 482, 488, 499, 524, 574, 606, 612, 621, 670, 862, 863, 864, 865, 866, 867, 869, 870, 871, 875, 905, 906, 912, 923, 958], "encount": [72, 152, 246, 425, 426, 479, 480, 531, 534, 543, 561, 574, 606, 670, 846, 847, 903, 904, 958], "duplic": [75, 160, 166, 167, 215, 246, 386, 574, 611, 612, 643, 670, 812, 958], "certain": [76, 102, 111, 158, 219, 246, 528, 592, 624, 634, 635, 670, 958], "least": [78, 121, 431, 516, 574, 850, 947, 958], "unexpect": [79, 246], "caus": [79, 87, 99, 100, 110, 127, 141, 246, 678, 958], "panic": 79, "mismatch": 81, "incompat": 83, "pa": [86, 115], "chunkedarrai": [86, 176, 246, 744, 958], "recordbatch": [86, 165, 246], "schemadefinit": [86, 88, 89, 90, 92, 246, 670], "schema_overrid": [86, 88, 89, 90, 91, 92, 165, 246, 670], "copi": [86, 87, 127, 130, 131, 165, 204, 210, 223, 246, 369, 499, 574, 590, 591, 648, 670, 675, 729, 733, 746, 796, 923, 935, 940, 941, 958], "closest": 86, "pair": [86, 88, 89, 90, 92, 185, 246, 627, 670], "declar": [86, 88, 89, 90, 92, 246, 670], "sever": [86, 88, 89, 90, 92, 246, 670], "wai": [86, 88, 89, 90, 92, 135, 151, 165, 180, 199, 226, 246, 430, 432, 467, 528, 574, 594, 605, 623, 637, 652, 670], "As": [86, 88, 89, 90, 92, 103, 246, 559, 670], "auto": [86, 88, 89, 90, 92, 108, 114, 214, 246, 496, 670, 920], "automat": [86, 88, 89, 90, 92, 93, 99, 100, 101, 110, 121, 122, 123, 193, 223, 246, 410, 483, 489, 495, 496, 574, 630, 648, 670, 837, 907, 913, 919, 920, 958], "equival": [86, 88, 89, 90, 92, 102, 163, 177, 246, 253, 257, 362, 376, 378, 379, 400, 407, 421, 423, 427, 429, 433, 484, 502, 512, 519, 574, 670, 829, 908, 921, 922, 958], "form": [86, 88, 89, 90, 92, 164, 190, 217, 246, 431, 574, 670, 850, 958], "them": [86, 88, 89, 90, 92, 110, 141, 152, 153, 167, 174, 219, 246, 284, 385, 425, 426, 529, 574, 606, 607, 612, 621, 670, 678, 703, 846, 847, 958], "dimens": [86, 88, 90, 92, 246, 441, 574, 670, 860, 958], "construct": [86, 88, 89, 90, 91, 92, 246, 410, 574, 604, 626, 670, 958], "allow_copi": [87, 127], "interchang": [87, 127], "protocol": [87, 101, 127], "__dataframe__": 87, "convers": [87, 127, 165, 210, 246, 496, 585, 920, 939, 940, 941, 958], "detail": [87, 101, 117, 118, 127, 246, 670, 966], "latest": [87, 102, 111, 127, 377, 417, 574], "index": [87, 91, 95, 101, 116, 127, 145, 152, 153, 158, 163, 167, 181, 187, 189, 198, 211, 219, 224, 246, 254, 268, 269, 270, 272, 273, 274, 282, 292, 296, 346, 444, 445, 446, 447, 448, 450, 451, 452, 455, 465, 477, 490, 506, 574, 606, 607, 612, 636, 650, 670, 686, 687, 688, 689, 690, 692, 693, 701, 711, 715, 773, 829, 848, 874, 877, 889, 901, 914, 930, 958], "throw": [87, 306, 479, 480, 574, 724, 903, 904, 958], "runtimeerror": 87, "from_panda": [87, 103], "from_arrow": 87, "effici": [87, 165, 246], "map": [88, 89, 99, 100, 104, 105, 108, 109, 110, 112, 128, 138, 164, 185, 189, 190, 205, 246, 350, 356, 409, 410, 516, 522, 574, 596, 627, 670, 777, 783, 837, 958], "clone": [88, 89, 90, 91, 92, 130, 209, 210, 246, 590, 670, 729, 939, 940, 941, 949, 958], "dimension": [88, 90, 92, 246, 670, 958], "infer_schema_length": [89, 92, 99, 100, 103, 110, 113, 246, 670], "NOT": [89, 117, 118], "typic": [89, 128, 246, 679, 958], "clearer": 89, "load": [89, 91, 102, 111, 246, 585, 608, 615, 670], "want": [89, 128, 141, 177, 246, 260, 309, 310, 311, 372, 408, 410, 444, 445, 446, 447, 448, 450, 451, 452, 534, 543, 574, 592, 608, 615, 670, 678, 679, 730, 731, 732, 940, 958], "_partial_": [89, 246, 670], "omit": [89, 93, 120, 121, 122, 125, 177, 246], "mani": [89, 92, 101, 141, 246, 678, 958], "scan": [89, 92, 99, 100, 108, 110, 111, 112, 113, 114, 115, 599, 608, 615, 670], "slow": [89, 92, 99, 100, 110, 260, 320, 574, 740, 958], "partial": 89, "present": [89, 117, 121, 389, 574, 949, 958], "np": [90, 144, 246, 506, 574, 670, 814, 818, 820, 821, 862, 930, 958], "ndarrai": [90, 144, 209, 246, 506, 574, 670, 744, 874, 877, 930, 940, 958], "numpi": [90, 116, 133, 209, 210, 246, 425, 426, 574, 670, 814, 818, 820, 821, 846, 847, 862, 874, 940, 941, 949, 958], "columnar": [90, 92, 164, 190, 246], "interpret": [90, 92, 99, 100, 110, 246, 670], "yield": [90, 92, 99, 100, 110, 139, 141, 214, 246, 670, 678, 790, 958], "conclus": [90, 92, 246, 670], "nan_to_nul": [91, 246, 670, 958], "include_index": 91, "panda": [91, 103, 116, 210, 246, 510, 574, 670, 941, 942, 958], "datetimeindex": [91, 744, 958], "instal": [91, 99, 100, 101, 104, 108, 116, 133, 209, 210, 246, 633, 670, 941, 958], "nan": [91, 117, 118, 121, 127, 142, 210, 246, 323, 324, 362, 370, 378, 379, 384, 391, 393, 394, 395, 400, 407, 411, 420, 425, 426, 427, 512, 531, 561, 574, 600, 670, 681, 685, 745, 797, 820, 821, 846, 847, 862, 941, 958], "convert": [91, 94, 102, 103, 111, 127, 205, 206, 207, 208, 209, 212, 246, 297, 327, 485, 496, 670, 716, 750, 909, 920, 927, 938, 939, 940, 941, 949, 958], "pd": [91, 103, 510, 574, 942, 958], "pd_df": 91, "pd_seri": 91, "tbl": [93, 96, 100], "reconstruct": 93, "repr": [93, 121, 122], "need": [93, 99, 100, 103, 117, 118, 152, 153, 197, 209, 246, 297, 410, 459, 481, 574, 606, 607, 670, 882, 905, 958], "trim": 93, "whitespac": [93, 483, 489, 495, 907, 913, 919], "prompt": 93, "extract": [93, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 357, 358, 360, 432, 478, 479, 480, 574, 751, 752, 753, 754, 756, 757, 759, 763, 764, 765, 766, 768, 769, 770, 771, 772, 774, 775, 778, 779, 781, 784, 785, 787, 902, 903, 904], "to_init_repr": [93, 246, 958], "handl": [93, 99, 100, 110, 115, 278, 321, 499, 574, 697, 743, 923, 958], "truncat": [93, 152, 246, 346, 606, 624, 670, 773], "identifi": [93, 173, 179, 215, 246, 620, 643, 670], "compound": 93, "struct": [93, 177, 193, 212, 216, 223, 246, 297, 410, 479, 492, 493, 516, 534, 535, 536, 550, 574, 630, 644, 648, 670, 716, 903, 916, 917], "source_ac": 93, "source_cha": 93, "ident": [93, 130, 131, 246, 590, 591, 670, 729, 733, 958], "timestamp": [93, 349, 545, 776], "tor_id": 93, "nnel_id": 93, "asia": [93, 751, 752, 781], "tokyo": 93, "123456780": 93, "9876543210": 93, "56": [93, 508, 574], "59": [93, 116, 326, 341, 351, 538, 749, 768, 778], "663053": 93, "jst": 93, "803065983": 93, "2055938745": 93, "38": [93, 121], "18": [93, 153, 246, 319, 350, 356, 359, 384, 397, 574, 607, 624, 670, 786], "050545": 93, "source_actor_id": 93, "source_channel_id": 93, "sr": [93, 675, 958], "dummi": [94, 207, 246, 936, 958], "to_dummi": [94, 246, 958], "foo_1": [94, 207, 246], "foo_2": [94, 207, 246], "bar_3": [94, 207, 246], "bar_4": [94, 207, 246], "ham_a": [94, 207, 246], "ham_b": [94, 207, 246], "datatypeclass": 95, "uint32": [95, 116, 139, 246, 270, 273, 274, 286, 330, 333, 337, 339, 341, 343, 344, 347, 348, 351, 357, 358, 440, 472, 481, 484, 506, 510, 574, 689, 692, 693, 705, 724, 753, 756, 763, 765, 768, 770, 771, 774, 775, 778, 784, 785, 790, 819, 875, 896, 942, 958], "regular": [95, 164, 189, 190, 219, 246, 366, 528, 541, 551, 554, 564, 574], "uint64": [95, 154, 246, 273, 274, 380, 439, 574, 692, 693, 804, 858, 958], "bigidx": 95, "read": [96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 141, 246, 408, 567, 574, 599, 604, 626, 670, 678, 958], "batch": [96, 100, 113, 616, 670], "over": [96, 99, 100, 102, 110, 121, 128, 141, 164, 165, 189, 190, 214, 225, 228, 246, 260, 320, 371, 384, 408, 409, 443, 444, 445, 446, 447, 448, 450, 451, 452, 522, 534, 535, 543, 550, 558, 574, 654, 678, 679, 740, 862, 863, 864, 866, 870, 958], "fetch": [96, 110, 168, 246, 590, 592, 608, 615, 670], "ideal": 96, "read_csv_batch": [96, 586], "tpch": [96, 100], "tables_scale_100": [96, 100], "lineitem": [96, 100, 101], "try_parse_d": [96, 99, 100, 110], "In": [97, 102, 111, 114, 121, 122, 124, 128, 139, 141, 152, 153, 177, 246, 260, 416, 574, 606, 607, 670, 678, 790, 857, 958], "probabl": [97, 124, 361, 574, 789, 958], "n_row": [98, 99, 100, 104, 108, 110, 112, 113, 114, 165, 246, 599, 670], "accept": [98, 99, 100, 102, 104, 108, 129, 140, 151, 193, 199, 213, 223, 226, 246, 253, 366, 385, 430, 467, 519, 525, 527, 528, 529, 530, 541, 551, 554, 563, 574, 588, 598, 605, 630, 637, 642, 648, 652, 670, 810, 958], "stop": [98, 99, 100, 104, 108, 110, 112, 113, 114, 330, 332, 333, 335, 336, 341, 343, 347, 348, 350, 351, 355, 356, 357, 358, 360, 748, 750, 753, 755, 756, 758, 763, 765, 768, 770, 771, 774, 775, 777, 778, 780, 782, 783, 784, 785, 786, 787], "textio": 99, "new_column": [99, 100, 103, 110, 186, 246], "comment_char": [99, 100, 110], "quote_char": [99, 100, 110], "skip_row": [99, 100, 110], "missing_utf8_is_empty_str": [99, 100, 110], "ignore_error": [99, 100, 110], "n_thread": [99, 100], "8192": 99, "csvencod": [99, 100, 110], "low_memori": [99, 100, 108, 110, 113, 114], "storage_opt": [99, 102, 104, 108, 111, 112, 114], "skip_rows_after_head": [99, 100, 110], "row_count_nam": [99, 100, 104, 108, 110, 112, 113, 114], "row_count_offset": [99, 100, 104, 108, 110, 112, 113, 114], "sample_s": [99, 100], "eol_char": [99, 100, 110], "we": [99, 100, 103, 110, 167, 246, 279, 485, 549, 567, 612, 616, 670, 679, 698, 806, 854, 909, 958], "handler": [99, 100, 103], "g": [99, 100, 102, 103, 104, 108, 111, 112, 114, 217, 246, 253, 260, 366, 459, 541, 574, 627, 670, 875, 940, 958], "builtin": [99, 100, 103], "stringio": [99, 100], "fsspec": [99, 100, 104, 108, 111, 112, 114, 116], "remot": [99, 100, 104, 108], "first": [99, 100, 103, 110, 113, 128, 150, 152, 155, 167, 169, 176, 180, 181, 202, 208, 214, 215, 219, 231, 246, 270, 272, 279, 282, 283, 320, 346, 350, 381, 388, 402, 410, 432, 455, 467, 477, 479, 480, 486, 487, 527, 534, 543, 547, 567, 574, 592, 606, 608, 612, 615, 623, 643, 649, 657, 670, 688, 698, 701, 702, 716, 740, 742, 773, 777, 805, 815, 832, 837, 874, 901, 903, 904, 910, 911, 929, 938, 958], "autogener": [99, 100, 110], "column_x": [99, 100, 110], "enumer": [99, 100, 110, 165, 246], "shorter": [99, 100], "remain": [99, 100, 110, 139, 246, 492, 493, 616, 670, 790, 916, 917, 958], "comment": [99, 100, 110], "instanc": [99, 100, 110, 121, 122, 125, 141, 146, 246, 297, 306, 417, 444, 445, 446, 447, 448, 450, 451, 452, 534, 543, 574, 616, 650, 670, 678, 724, 958], "special": [99, 100, 110, 679, 958], "escap": [99, 100, 110], "dure": [99, 100, 110, 125, 141, 246, 678, 958], "would": [99, 100, 110, 270, 282, 416, 437, 525, 574, 688, 701, 856, 940, 958], "prefer": [99, 100, 102, 110, 128, 141, 164, 189, 190, 228, 246, 260, 443, 574, 654, 670, 678, 679, 862, 958], "treat": [99, 100, 110, 471, 486, 487, 895, 910, 911], "10000": [99, 165, 246, 499], "check": [99, 100, 110, 117, 118, 147, 161, 163, 246, 256, 258, 276, 300, 303, 304, 385, 389, 471, 475, 494, 574, 616, 670, 676, 677, 695, 718, 721, 722, 811, 813, 816, 817, 819, 824, 825, 826, 828, 829, 875, 895, 899, 918, 958], "might": [99, 100, 110, 123, 260, 416, 514, 574, 941, 958], "issu": [99, 100, 103, 110, 318, 319, 504, 574, 738, 739, 928, 958], "iso8601": [99, 100, 110], "alwai": [99, 128, 228, 246, 416, 567, 616, 654, 670, 679, 958], "physic": [99, 100, 167, 246, 307, 510, 574, 589, 611, 612, 670, 726, 942, 958], "cpu": [99, 100], "system": [99, 100], "wrongli": 99, "done": [99, 100, 110, 115, 150, 167, 246, 259, 261, 306, 482, 488, 523, 574, 612, 670, 724, 906, 912, 958], "buffer": [99, 100, 139, 164, 246, 790, 958], "modifi": [99, 100, 110, 123, 125, 157, 164, 221, 246, 271, 349, 359, 574, 776, 786, 859, 921, 922, 958], "lossi": [99, 100, 110], "decod": [99, 100], "usag": [99, 100, 110, 121, 122, 197, 246, 883, 958], "expens": [99, 100, 108, 110, 113, 114, 128, 164, 189, 190, 214, 215, 246, 260, 574, 643, 670, 678, 679, 958], "nativ": [99, 104, 108, 128, 164, 190, 206, 228, 246, 260, 574, 579, 654, 679, 958], "parser": 99, "even": 99, "regard": [99, 531, 561], "sens": [99, 104, 108, 112, 114, 152, 153, 174, 219, 246, 606, 607, 621, 670], "particular": [99, 104, 108, 112, 114, 139, 246, 790, 958], "storag": [99, 102, 104, 108, 111, 112, 114], "skip": [99, 100, 103, 108, 110, 114, 217, 246, 679, 958], "offset": [99, 100, 104, 108, 110, 112, 113, 114, 152, 153, 198, 219, 224, 246, 292, 346, 350, 356, 465, 490, 496, 574, 606, 607, 636, 650, 670, 711, 773, 777, 783, 889, 914, 920, 958], "row_count": [99, 100, 104, 108, 110, 112, 113, 114], "sampl": [99, 100, 228, 246, 464, 574, 654, 888, 958], "estim": [99, 100, 139, 246, 261, 364, 365, 398, 523, 574, 670, 790, 792, 793, 830, 958], "alloc": [99, 100, 139, 184, 246, 790, 958], "scan_csv": [99, 100, 634, 635, 670], "lazili": [99, 100, 110, 111, 112, 113, 114, 410, 574], "glob": [99, 100, 110, 112, 113, 114], "pattern": [99, 100, 110, 112, 113, 114, 164, 246, 415, 471, 472, 477, 478, 486, 487, 876, 877, 895, 896, 901, 902, 910, 911, 958], "store": [99, 108, 141, 164, 190, 246, 678, 958], "continu": [99, 108, 464, 574, 888, 958], "benchmark": [99, 108], "50000": 100, "batchedcsvread": [100, 585], "upon": 100, "creation": 100, "gather": 100, "next_batch": 100, "big": 100, "interest": 100, "seen_group": 100, "big_fil": 100, "while": [100, 102, 103, 111, 121, 122, 164, 173, 214, 246, 620, 670], "df_current_batch": 100, "concat": [100, 728, 843, 958], "partition_df": 100, "partition_bi": [100, 165, 246], "as_dict": [100, 179, 246], "fh": 100, "write_csv": [100, 110, 246], "els": [100, 567], "partition_on": 101, "partition_rang": 101, "partition_num": 101, "dbreadengin": 101, "connectorx": [101, 116], "raw": 101, "partit": [101, 102, 108, 111, 115, 165, 179, 246], "backend": [101, 102, 111], "transfer": 101, "document": [101, 103, 353, 480, 496, 780, 904, 920], "redshift": 101, "mysql": 101, "mariadb": 101, "clickhous": 101, "oracl": 101, "bigqueri": 101, "pleas": 101, "doc": [101, 133, 246], "github": 101, "sfu": 101, "db": 101, "connector": 101, "destin": 101, "sqlite": 101, "develop": [101, 121, 122], "flight_sql": 101, "further": [101, 941, 958], "wide": [101, 150, 173, 217, 246, 620, 670], "adopt": 101, "significantli": 101, "better": [101, 128, 228, 246, 260, 516, 574, 654, 876, 877, 958], "driver": 101, "cpp": 101, "partition_col": 101, "explicitli": [101, 120, 121, 125, 410, 563, 574], "delta_table_opt": [102, 111], "lake": [102, 111, 585], "root": [102, 111, 397, 409, 418, 434, 468, 503, 573, 574, 891, 958], "filesystem": [102, 111], "absolut": [102, 111, 117, 118, 252, 363, 364, 365, 574, 674, 791, 792, 793, 958], "gc": [102, 111], "azur": [102, 111], "deltalak": [102, 111, 116], "cloud": [102, 111, 115], "configur": [102, 111], "authent": [102, 111], "keyword": [102, 108, 111, 133, 180, 189, 193, 223, 226, 246, 432, 560, 563, 574, 623, 630, 648, 652, 670, 958], "table_path": [102, 111], "avoid": 102, "year": [102, 111, 152, 153, 167, 219, 246, 335, 336, 346, 347, 350, 356, 357, 444, 445, 446, 447, 448, 450, 451, 452, 537, 538, 574, 606, 607, 612, 670, 758, 759, 773, 774, 777, 783, 784], "2021": [102, 111, 134, 150, 152, 219, 246, 496, 549, 606, 670, 751, 752, 759, 781, 826, 920, 958], "aw": [102, 111], "bucket": [102, 111, 350, 356, 777, 783, 806, 958], "aws_access_key_id": [102, 111], "the_aws_access_key_id": [102, 111], "aws_secret_access_kei": [102, 111], "the_aws_secret_access_kei": [102, 111], "googl": [102, 111], "service_account": [102, 111], "service_account_json_absolute_path": [102, 111], "az": [102, 111], "adl": [102, 111], "abf": [102, 111], "azure_storage_account_nam": [102, 111], "azure_storage_account_kei": [102, 111], "without_fil": [102, 111], "track": [102, 111, 128, 246], "sheet_id": 103, "sheet_nam": 103, "xlsx2csv_option": 103, "read_csv_opt": 103, "noreturn": 103, "xlsx2csv": [103, 116], "read_csv": [103, 110], "neither": [103, 191, 246], "nor": [103, 191, 246], "skip_empty_lin": 103, "my": [103, 115], "datasheet": 103, "correct": [103, 364, 365, 398, 449, 464, 574, 616, 670, 792, 793, 830, 868, 888, 958], "look": [103, 297, 300, 718], "fix": [103, 120, 121, 359, 444, 445, 446, 447, 448, 450, 451, 452, 574, 786], "whole": [103, 466, 467, 477, 574, 670, 901], "With": [103, 128, 163, 246, 260, 574, 679, 829, 958], "1000": [103, 139, 208, 246, 337, 338, 499, 764, 938, 958], "spreadsheet": [103, 181, 246], "xl": 103, "xlsm": 103, "xlsb": 103, "odf": 103, "od": [103, 495, 919], "odt": 103, "memory_map": [104, 108, 112], "v2": [104, 112], "greatli": [104, 112], "repeat": [104, 112, 438, 440, 574], "o": [104, 112, 305, 320, 476, 511, 574, 723, 740, 900, 943, 958], "page": [104, 108, 112, 114, 246, 574, 585, 635, 670, 958], "give": [104, 108, 112, 113, 114, 173, 215, 246, 332, 398, 440, 512, 574, 585, 620, 643, 670, 755, 830, 958], "That": [104, 616, 670], "filenam": 104, "my_fil": 104, "write_ipc": [104, 246], "read_ndjson": 106, "parallelstrategi": [108, 114], "use_statist": [108, 114], "awar": [108, 164, 190, 206, 246, 496, 920], "stabl": [108, 133, 191, 246, 405, 574, 620, 670], "row_group": [108, 114], "read_tabl": 108, "with_column_nam": 110, "push": [110, 112, 113, 114, 115], "down": [110, 112, 113, 114, 115, 375, 574, 801, 958], "therebi": [110, 112, 113, 114], "potenti": [110, 112, 113, 114], "overhead": [110, 112, 113, 114], "realloc": [110, 112, 113, 141, 246, 678, 958], "headerless": 110, "unlik": 110, "fewer": 110, "my_long_fil": 110, "doesn": [110, 361, 574, 789, 949, 958], "thing": [110, 520, 542], "less": [110, 167, 246, 400, 407, 482, 488, 493, 499, 574, 612, 670, 906, 912, 917, 923], "limit": [110, 143, 246, 299, 309, 310, 311, 371, 377, 574, 601, 608, 635, 670, 730, 731, 732, 798, 958], "breezah": 110, "languag": [110, 152, 153, 167, 219, 246, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 612, 670, 773, 777, 783], "hard": [110, 616, 670], "mydf": 110, "lambda": [110, 128, 146, 180, 228, 246, 260, 297, 363, 364, 365, 408, 409, 443, 522, 534, 535, 536, 543, 550, 558, 564, 574, 616, 623, 654, 670, 679, 716, 791, 792, 793, 958], "simpli": [110, 534, 543], "idx": [110, 152, 165, 246, 297, 606, 670, 716, 877, 958], "uint16": [110, 318, 319, 504, 574, 738, 739, 928, 958], "u16": 110, "aws_region": 111, "eu": 111, "central": [111, 398, 464, 574, 830, 888, 958], "allow_pyarrow_filt": 115, "comparison": 115, "dset": 115, "folder": 115, "1970": 115, "stdout": [116, 150, 246], "13": [116, 130, 131, 142, 143, 149, 153, 158, 168, 176, 223, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 443, 445, 529, 534, 543, 566, 574, 590, 591, 600, 601, 607, 614, 648, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 670, 679, 777, 783, 784, 958], "platform": 116, "maco": 116, "arm64": 116, "arm": 116, "64bit": [116, 439, 574, 858, 958], "main": 116, "feb": 116, "clang": 116, "14": [116, 128, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 336, 384, 574, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 777], "1400": 116, "29": 116, "202": 116, "2_alpha": 116, "detect": 116, "matplotlib": [116, 624, 633, 670], "check_dtyp": [117, 118], "check_exact": [117, 118], "rtol": [117, 118], "1e": [117, 118], "atol": [117, 118], "nans_compare_equ": [117, 118], "check_column_ord": 117, "check_row_ord": 117, "assertionerror": [117, 118], "compar": [117, 118, 147, 246, 362, 378, 379, 400, 407, 427, 521, 574, 875, 958], "exactli": [117, 118, 121, 122, 492, 493, 883, 916, 917, 958], "toler": [117, 118, 167, 246, 612, 670], "inexact": [117, 118], "assert": [117, 118, 120, 121, 122, 153, 246, 585, 607, 670, 803, 958], "irrespect": 117, "unsort": 117, "check_nam": 118, "s1": [118, 146, 246, 829, 941, 950, 958], "searchstrategi": [119, 121, 122], "null_prob": [119, 121, 122], "percentag": [119, 121, 122, 431, 574, 850, 958], "chanc": [119, 121, 122], "independ": [119, 121, 122], "flag": [119, 456, 574, 597, 616, 670, 878, 958], "hypothesi": [119, 120, 121, 122, 966], "sampled_from": 119, "unique_small_int": 119, "ccy": 119, "gbp": 119, "eur": [119, 134, 150, 246], "jpy": 119, "min_col": [120, 121], "max_col": [120, 121], "suitabl": [120, 128, 246, 260, 455, 574, 679, 874, 958], "standalon": [120, 121], "itself": [120, 614, 670], "mincol": 120, "exact": [120, 121, 122, 197, 246, 496, 512, 574, 920], "especi": 120, "punctuat": 120, "test_special_char_colname_init": 120, "test_unique_xyz": 120, "assert_someth": 120, "min_siz": [121, 122], "max_siz": [121, 122], "include_col": 121, "allow_infin": [121, 122], "allowed_dtyp": [121, 122], "excluded_dtyp": [121, 122], "describ": [121, 150, 246, 958], "desir": 121, "ignor": [121, 122, 171, 201, 246, 278, 321, 349, 363, 364, 365, 425, 426, 574, 697, 743, 776, 791, 792, 793, 846, 847, 958], "n_chunk": [121, 122, 246, 958], "randomis": 121, "onto": 121, "either": [121, 153, 163, 168, 171, 179, 189, 201, 246, 525, 563, 607, 614, 670], "pct": 121, "preced": 121, "disallow": [121, 122], "exclud": [121, 122, 316, 319, 385, 528, 561, 574, 810, 826, 958], "deploi": [121, 122], "characterist": [121, 122], "concret": [121, 122], "test_repr": [121, 122], "isinst": [121, 122, 246], "known": [121, 654], "df_strategi": 121, "15836": 121, "1755e": 121, "575050513": 121, "constructor": 122, "max_data_s": 122, "54666": 122, "6414": 122, "63290": 122, "polars_max_thread": 123, "behind": 123, "lock": 123, "reason": 123, "pyspark": 123, "udf": [123, 128, 180, 228, 246, 260, 432, 522, 574, 623, 654, 670, 679, 958], "similar": [123, 146, 167, 246, 430, 567, 574, 612, 670], "recommend": [123, 164, 180, 246], "scope": 125, "lifetim": 125, "initi": [125, 534, 543, 567], "whatev": 125, "were": 125, "enter": 125, "advantag": [125, 180, 246], "initialis": [125, 670], "set_": 125, "set_verbos": 125, "do_various_th": 125, "restor": 125, "init": 125, "prefix": [125, 304, 494, 499, 574, 722, 918, 923], "breviti": 125, "nan_as_nul": 127, "_pyarrowdatafram": 127, "nullabl": 127, "extens": [127, 210, 246, 941, 958], "propag": [127, 171, 201, 246, 425, 426, 574, 846, 847, 958], "inference_s": [128, 246], "256": [128, 246, 850, 958], "user": [128, 180, 228, 246, 260, 432, 456, 522, 574, 623, 654, 670, 679, 878, 958], "logic": [128, 228, 246, 257, 429, 510, 519, 574, 604, 611, 626, 651, 654, 670, 679, 942, 958], "almost": [128, 228, 246, 654, 679, 958], "_significantly_": [128, 228, 246, 654, 679, 958], "intens": [128, 228, 246, 654, 679, 958], "becaus": [128, 139, 152, 168, 217, 228, 246, 279, 606, 654, 670, 679, 698, 790, 958], "forc": [128, 167, 228, 246, 611, 612, 654, 670, 679, 958], "materi": [128, 228, 246, 624, 654, 670, 679, 958], "parallelis": [128, 228, 246, 654, 679, 958], "optimis": [128, 228, 246, 654, 670, 679, 876, 877, 958], "achiev": [128, 228, 246, 260, 574, 654, 679, 958], "best": [128, 228, 246, 260, 574, 654, 679, 958], "tri": [128, 246], "arbitrarili": [128, 246], "rearrang": [128, 246], "preserv": [128, 210, 246, 461, 574, 885, 941, 958], "lru_cach": [128, 246, 260, 574, 679, 958], "magnitud": [128, 246, 260, 574, 679, 958], "speedup": [128, 164, 246, 260, 574, 679, 958], "column_1": [128, 214, 246], "scalar": [128, 163, 189, 246, 455, 522, 549, 574, 829, 874, 958], "k": [129, 213, 246, 305, 307, 398, 511, 574, 588, 642, 670, 723, 726, 830, 943, 958], "intoexpr": [129, 151, 152, 153, 193, 199, 213, 223, 226, 246, 385, 430, 467, 525, 527, 529, 530, 534, 543, 551, 554, 560, 563, 567, 574, 588, 605, 606, 607, 630, 637, 642, 652, 670, 810, 958], "nulls_last": [129, 199, 213, 246, 270, 466, 574, 588, 637, 642, 670, 688, 958], "smallest": [129, 213, 246, 305, 574, 588, 642, 670, 723, 958], "largest": [129, 213, 246, 511, 574, 588, 642, 670, 943, 958], "top": [129, 213, 246, 588, 642, 670], "top_k": [129, 246, 305, 574, 588, 670, 723, 958], "cheap": [130, 131, 246, 590, 591, 670, 678, 729, 733, 958], "deepcopi": [130, 131, 246, 590, 591, 670, 729, 733, 958], "clear": [131, 246, 591, 670, 733, 958], "properti": [132, 138, 156, 192, 194, 222, 246, 585, 593, 596, 629, 647, 670], "appl": [132, 157, 166, 185, 187, 205, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 434, 442, 475, 494, 503, 574, 611, 627, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 670, 899, 918], "banana": [132, 205, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 434, 442, 503, 574, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665], "pearson": [133, 246, 398, 464, 531, 556, 574, 830, 888, 958], "correl": [133, 246, 531, 556, 561], "coeffici": [133, 246, 464, 574, 888, 958], "corrcoef": [133, 246], "percentil": [134, 246, 742, 958], "summari": [134, 246, 742, 958], "One": [134, 177, 181, 246, 257, 429, 574, 742, 958], "glimps": [134, 155, 246], "usd": [134, 150, 246], "2020": [134, 150, 153, 246, 327, 331, 334, 337, 338, 340, 342, 345, 349, 352, 353, 496, 607, 670, 750, 754, 757, 764, 766, 769, 772, 776, 779, 920], "null_count": [134, 137, 246, 320, 574, 740, 742, 958], "266667": [134, 246], "666667": [134, 171, 220, 234, 246, 363, 574, 646, 660, 670], "std": [134, 246, 443, 574, 670, 742, 869, 958], "101514": [134, 246], "707107": [134, 246, 364, 574, 792, 958], "57735": [134, 246], "median": [134, 181, 246, 446, 574, 649, 670, 742, 865, 958], "more_column": [135, 140, 216, 246, 366, 541, 574, 594, 598, 644, 670], "Or": [135, 151, 152, 153, 167, 199, 219, 226, 246, 430, 467, 528, 567, 574, 594, 605, 606, 607, 612, 637, 652, 670], "subset": [137, 177, 215, 246, 595, 643, 670], "snippet": [137, 246, 595, 670], "is_nul": [137, 246, 574, 595, 670, 958], "sizeunit": [139, 246, 790, 958], "heap": [139, 246, 790, 958], "its": [139, 246, 326, 350, 356, 467, 574, 749, 777, 783, 790, 958], "bitmap": [139, 246, 790, 958], "therefor": [139, 246, 297, 567, 790, 958], "structarrai": [139, 246, 790, 958], "constant": [139, 153, 246, 369, 574, 607, 670, 790, 796, 958], "unchang": [139, 246, 510, 574, 616, 654, 670, 790, 942, 958], "capac": [139, 197, 246, 790, 883, 958], "ffi": [139, 246, 790, 958], "kb": [139, 246, 790, 958], "mb": [139, 246, 790, 958], "gb": [139, 246, 790, 958], "tb": [139, 246, 790, 958], "revers": [139, 246, 315, 316, 317, 318, 319, 409, 434, 503, 574, 670, 736, 737, 738, 739, 958], "1_000_000": [139, 246, 790, 958], "25888898": [139, 246], "689577102661133": [139, 246], "long": [140, 173, 217, 246, 598, 620, 670], "letter": [140, 231, 240, 246, 366, 541, 574, 598, 657, 666, 670], "thu": [141, 246, 531, 561, 678, 958], "faster": [141, 217, 246, 260, 443, 484, 514, 574, 634, 635, 670, 678, 679, 862, 908, 958], "onlin": [141, 246, 678, 958], "rerun": [141, 246, 678, 958], "fill_valu": [142, 196, 217, 246, 458, 574, 632, 670, 881, 958], "Not": [142, 246, 391, 393, 410, 574, 600, 670], "To": [142, 246, 323, 324, 346, 371, 551, 554, 564, 574, 600, 670, 773], "fillnullstrategi": [143, 246, 371, 574, 601, 670, 798, 958], "matches_supertyp": [143, 246, 601, 670], "forward": [143, 167, 246, 371, 377, 574, 601, 612, 670, 798, 958], "consecut": [143, 246, 299, 371, 377, 470, 574, 601, 670, 798, 894, 958], "supertyp": [143, 246, 259, 574, 601, 670], "fill_nan": [143, 246, 574, 670, 958], "OR": [144, 246, 521, 602, 670], "reduct": [146, 246], "supercast": [146, 246], "parent": [146, 246], "rule": [146, 246, 353, 780], "arithmet": [146, 246], "zip_with": [146, 246, 958], "foo11": [146, 246], "bar22": [146, 246], "null_equ": [147, 246, 875, 958], "retriev": [148, 246, 273, 274, 500, 692, 693, 924], "return_as_str": [150, 246], "preview": [150, 246], "nice": [150, 246], "few": [150, 246], "rather": [150, 167, 246, 499, 612, 670, 923], "head": [150, 169, 202, 246, 259, 402, 574, 615, 670, 832, 929, 958], "tail": [150, 155, 246, 259, 464, 574, 670, 805, 888, 958], "more_bi": [151, 179, 199, 246, 467, 574, 605, 637, 670], "maintain_ord": [151, 179, 181, 215, 219, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 254, 260, 298, 506, 513, 532, 574, 592, 597, 599, 605, 624, 633, 634, 635, 643, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 670, 717, 741, 854, 944, 958], "consist": [151, 179, 246, 496, 605, 670, 920], "agg": [151, 152, 153, 246, 254, 260, 372, 374, 466, 467, 506, 518, 532, 574, 592, 597, 599, 605, 606, 607, 624, 633, 670], "anoth": [151, 246, 296, 320, 325, 574, 605, 649, 670, 715, 740, 748, 875, 958], "index_column": [152, 153, 246, 606, 607, 670], "include_boundari": [152, 246, 606, 670], "start_bi": [152, 246, 606, 670], "startbi": [152, 246, 606, 670], "dynamicgroupbi": [152, 246], "normal": [152, 246, 361, 398, 464, 574, 606, 670, 789, 830, 888, 958], "groupbi": [152, 153, 177, 246, 254, 260, 279, 320, 372, 374, 430, 466, 467, 506, 518, 522, 532, 574, 592, 597, 599, 606, 607, 624, 633, 670, 698, 740, 958], "member": [152, 246, 606, 670, 817, 958], "seen": [152, 246, 299, 377, 574, 606, 670], "roll": [152, 153, 246, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 529, 574, 606, 607, 670, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 958], "slot": [152, 246, 278, 320, 321, 574, 606, 670, 697, 740, 743, 958], "1n": [152, 153, 167, 219, 246, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 612, 670, 773, 777, 783], "nanosecond": [152, 153, 167, 219, 246, 346, 350, 351, 356, 444, 445, 446, 447, 448, 450, 451, 452, 539, 574, 606, 607, 612, 670, 773, 777, 778, 783], "1u": [152, 153, 167, 219, 246, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 612, 670, 773, 777, 783], "microsecond": [152, 153, 167, 219, 246, 346, 350, 351, 356, 444, 445, 446, 447, 448, 450, 451, 452, 538, 539, 574, 606, 607, 612, 624, 670, 773, 777, 783], "1m": [152, 153, 167, 219, 246, 337, 338, 340, 345, 346, 350, 352, 356, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 612, 670, 764, 766, 772, 773, 777, 779, 783], "millisecond": [152, 153, 167, 219, 246, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 539, 574, 606, 607, 612, 670, 773, 777, 783], "1h": [152, 153, 167, 219, 246, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 612, 670, 756, 773, 777, 783], "1w": [152, 153, 167, 219, 246, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 612, 670, 773, 777, 783], "week": [152, 153, 167, 219, 246, 346, 350, 356, 358, 444, 445, 446, 447, 448, 450, 451, 452, 539, 574, 606, 607, 612, 670, 773, 777, 783, 785], "1y": [152, 153, 167, 219, 246, 335, 346, 350, 356, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 612, 670, 758, 773, 777, 783, 787], "1i": [152, 153, 167, 219, 246, 346, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 607, 612, 670, 773], "10i": [152, 153, 246, 606, 607, 670], "ascend": [152, 153, 246, 606, 607, 670], "often": [152, 153, 246, 277, 440, 574, 606, 607, 670, 696], "dynam": [152, 246, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 670], "matter": [152, 153, 164, 190, 206, 246, 606, 607, 670], "_lower_bound": [152, 246, 606, 670], "_upper_bound": [152, 246, 606, 670], "impact": [152, 246, 606, 670], "harder": [152, 246, 606, 670], "inclus": [152, 153, 246, 385, 444, 445, 446, 447, 448, 450, 451, 452, 491, 492, 574, 606, 607, 670, 810, 915, 916, 958], "datapoint": [152, 246, 606, 670], "mondai": [152, 246, 358, 606, 670, 785], "date_rang": [152, 219, 246, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 606, 670, 748, 750, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787], "30m": [152, 246, 350, 356, 606, 670, 777, 783], "time_min": [152, 246, 606, 670], "time_max": [152, 246, 606, 670], "23": [152, 153, 246, 326, 333, 350, 538, 606, 607, 670, 749, 756], "boundari": [152, 246, 309, 310, 311, 574, 606, 670, 730, 731, 732, 806, 958], "time_count": [152, 246, 606, 670], "_lower_boundari": [152, 246, 606, 670], "_upper_boundari": [152, 246, 606, 670], "lower_bound": [152, 246, 309, 311, 385, 574, 606, 670, 730, 732, 810, 946, 958], "upper_bound": [152, 246, 297, 309, 310, 385, 574, 606, 670, 730, 731, 810, 836, 958], "time_agg_list": [152, 246, 606, 670], "arang": [152, 217, 228, 246, 606, 654, 670], "2i": [152, 246, 606, 670], "3i": [152, 246, 606, 670], "a_agg_list": [152, 246, 606, 670], "rollinggroupbi": [153, 246], "dynamic_groupbi": [153, 246, 607, 670], "groupby_dynam": [153, 246, 607, 670], "48": [153, 246, 607, 670], "19": [153, 167, 246, 350, 607, 612, 670, 777, 783], "43": [153, 246, 319, 574, 607, 670], "strptime": [153, 246, 349, 607, 670, 776], "2d": [153, 209, 246, 549, 607, 670, 753], "sum_a": [153, 246, 607, 670], "min_a": [153, 246, 607, 670], "max_a": [153, 246, 607, 670], "to_list": [153, 246, 297, 607, 670, 716, 958], "seed": [154, 191, 246, 380, 437, 454, 460, 574, 804, 856, 873, 884, 958], "seed_1": [154, 246, 380, 574, 804, 958], "seed_2": [154, 246, 380, 574, 804, 958], "seed_3": [154, 246, 380, 574, 804, 958], "hash": [154, 246, 574, 958], "u64": [154, 246, 380, 439, 574, 624, 670, 804, 958], "10783150408545073287": [154, 246], "1438741209321515184": [154, 246], "10047419486152048166": [154, 246], "2047317070637311557": [154, 246], "ab": [155, 169, 202, 223, 246, 500, 501, 551, 554, 574, 648, 670, 805, 832, 929, 958], "grown": [157, 246], "baz": [158, 159, 181, 216, 246, 491, 493, 610, 644, 670, 917], "intermedi": [159, 246, 610, 670, 809, 958], "linear": [159, 183, 238, 246, 275, 384, 413, 436, 448, 529, 530, 557, 574, 610, 625, 664, 670, 694, 809, 855, 867, 958], "mask": [160, 162, 246, 276, 300, 301, 386, 388, 396, 471, 473, 574, 695, 718, 719, 799, 810, 812, 815, 827, 851, 852, 876, 895, 897, 950, 958], "visual": [160, 162, 246], "buffer_s": [164, 246], "intern": [164, 246], "veri": [164, 214, 246, 260, 574, 591, 670, 733, 958], "fit": [164, 197, 217, 246, 459, 574, 882, 883, 958], "signific": [164, 246, 260, 574], "4x": [164, 246], "materialis": [164, 165, 189, 190, 246], "iter_row": [165, 189, 190, 246], "17_500": [165, 246], "klmnoopqrstuvwxyz": [165, 246], "__name__": [165, 246], "7500": [165, 246], "15_000": [165, 246], "record_batch": [165, 246], "to_arrow": [165, 246, 958], "to_batch": [165, 246], "date32": [165, 246], "large_str": [165, 204, 210, 246], "15000": [165, 246], "2500": [165, 246], "joinstrategi": [166, 246, 611, 670], "left_on": [166, 167, 246, 611, 612, 670], "right_on": [166, 167, 246, 611, 612, 670], "suffix": [166, 167, 193, 223, 226, 246, 303, 391, 393, 394, 395, 430, 442, 475, 574, 611, 612, 630, 648, 649, 652, 670, 721, 899], "_right": [166, 167, 246, 611, 612, 670], "outer": [166, 246, 611, 670], "semi": [166, 246, 611, 670], "anti": [166, 246, 611, 670, 876, 877, 958], "cross": [166, 246, 611, 670], "join_asof": [166, 246, 611, 670], "stringcach": [166, 246, 585], "other_df": [166, 246], "by_left": [167, 246, 612, 670], "by_right": [167, 246, 612, 670], "asofjoinstrategi": [167, 246, 612, 670], "allow_parallel": [167, 246, 611, 612, 670], "force_parallel": [167, 246, 611, 612, 670], "asof": [167, 246, 612, 670], "asof_join": [167, 246], "search": [167, 246, 612, 670], "greater": [167, 246, 378, 379, 464, 493, 574, 612, 670, 888, 917, 958], "distanc": [167, 246, 612, 670, 806, 958], "plan": [167, 168, 246, 589, 597, 604, 611, 612, 626, 633, 651, 670], "gdp": [167, 246, 612, 670], "2016": [167, 246, 612, 670], "2017": [167, 246, 612, 670], "2018": [167, 246, 349, 612, 670, 776], "2019": [167, 246, 612, 670], "record": [167, 246, 612, 670], "jan": [167, 246, 612, 670], "1st": [167, 246, 612, 670], "4164": [167, 246, 612, 670], "4411": [167, 246, 612, 670], "4566": [167, 246, 612, 670], "4696": [167, 246, 612, 670], "popul": [167, 246, 612, 670], "12th": [167, 246, 612, 670], "82": [167, 246, 612, 670], "66": [167, 246, 519, 574, 612, 670, 867, 958], "83": [167, 246, 612, 670], "52": [167, 223, 246, 453, 574, 612, 648, 670], "request": [168, 246], "small": [168, 246, 350, 599, 670], "describe_plan": [168, 246, 670], "unoptim": [168, 246, 670], "describe_optimized_plan": [168, 246, 670], "show_graph": [168, 246, 670], "un": [168, 246], "graphviz": [168, 246, 633, 670], "axi": [170, 171, 173, 175, 201, 246, 620, 670], "null_strategi": [171, 201, 246], "nullstrategi": [171, 201, 246], "spam": [171, 246], "id_var": [173, 246, 620, 670], "value_var": [173, 246, 620, 670], "variable_nam": [173, 246, 620, 670], "value_nam": [173, 246, 620, 670], "unpivot": [173, 246, 620, 670], "leav": [173, 246, 620, 670], "massag": [173, 246, 620, 670], "measur": [173, 246, 620, 670], "merg": [174, 246, 621, 670], "caller": [174, 246, 297, 616, 621, 654, 670], "respons": [174, 246, 621, 670], "what": [177, 246, 940, 949, 958], "pack": [177, 246], "expr_unique_subset": [177, 246], "df_nuniqu": [177, 246], "df_agg_nuniqu": [177, 246], "offer": [180, 246, 432, 574, 623, 670], "fulli": [180, 191, 246], "cast_str_to_int": [180, 246, 623, 670], "col_nam": [180, 246, 623, 670], "tdf": [180, 246, 623, 670], "aggregate_funct": [181, 246], "pivotagg": [181, 246], "nodefault": [181, 246, 496, 920], "_nodefault": [181, 246, 496, 920], "no_default": [181, 246, 496, 920], "sort_column": [181, 246], "predefin": [181, 246], "predict": [181, 184, 219, 246], "transpos": [181, 246], "discoveri": [181, 246], "col1": [181, 217, 246, 670], "col2": [181, 217, 246, 670], "col3": [181, 246], "tanh": [181, 246, 574, 958], "998347": [181, 246], "964028": [181, 246], "999954": [181, 246], "interpol": [183, 238, 246, 371, 413, 436, 448, 557, 574, 625, 664, 670, 855, 867, 958], "rollinginterpolationmethod": [183, 238, 246, 436, 448, 557, 574, 625, 664, 670, 855, 867, 958], "midpoint": [183, 238, 246, 436, 448, 557, 574, 625, 664, 670, 855, 867, 958], "old": [185, 246, 627, 670], "by_pred": [189, 246], "accord": [189, 246, 410, 574, 759], "never": [189, 246], "mutual": [189, 246], "exclus": [189, 246, 519, 574], "addition": [189, 246], "clariti": [189, 246], "anyth": [189, 246], "toomanyrowsreturnederror": [189, 246, 585], "norowsreturnederror": [189, 246, 585], "inherit": [189, 246], "rowserror": [189, 246, 585], "with_replac": [191, 246, 454, 574, 873, 958], "shuffl": [191, 228, 246, 454, 574, 654, 873, 958], "modul": [191, 246, 454, 460, 573, 574, 873, 884, 958], "more_expr": [193, 223, 246, 430, 525, 527, 529, 530, 551, 554, 560, 563, 574, 630, 648, 670], "named_expr": [193, 223, 246, 560, 563, 630, 648, 670], "threshold": [193, 246, 630, 670], "set_auto_structifi": [193, 223, 246, 630, 648, 670], "auto_structifi": [193, 223, 246, 630, 648, 670], "is_odd": [193, 246, 630, 670], "_is_odd": [193, 246, 630, 670], "shift_and_fil": [195, 246, 574, 670, 958], "shift": [196, 246, 278, 321, 431, 458, 529, 574, 632, 670, 697, 743, 850, 881, 958], "shrink": [197, 246, 459, 574, 882, 883, 958], "hold": [197, 246], "ddof": [200, 220, 246, 469, 517, 531, 556, 561, 562, 566, 574, 638, 646, 670, 892, 948, 958], "deviat": [200, 246, 364, 450, 469, 562, 574, 638, 670, 792, 892, 958], "degre": [200, 220, 246, 469, 517, 531, 556, 561, 562, 566, 574, 638, 646, 670, 892, 948, 958], "freedom": [200, 220, 246, 469, 517, 531, 556, 561, 562, 566, 574, 638, 646, 670, 892, 948, 958], "divisor": [200, 220, 246, 469, 517, 531, 556, 561, 562, 566, 574, 638, 646, 670, 892, 948, 958], "816497": [200, 246], "21": [201, 246, 545], "16a": [201, 246], "27b": [201, 246], "38c": [201, 246], "nth": [203, 246, 493, 507, 574, 641, 670, 917, 931, 958], "mostli": [204, 246, 372, 574], "categoricaltyp": [204, 246], "as_seri": [205, 246], "fruit": [205, 246, 434, 442, 475, 494, 503, 574, 899, 918], "car": [205, 246, 434, 442, 503, 574], "beetl": [205, 246, 434, 442, 503, 574], "audi": [205, 246, 434, 442, 503, 574], "300": [205, 246, 863, 864, 866, 958], "instantiat": [208, 246, 938, 958], "from_repr": [208, 246, 938, 958], "df_from_str_repr": [208, 246], "eval": [208, 246, 540, 938, 958], "re": [209, 246], "ll": [209, 246], "numpy_arrai": [209, 246], "use_pyarrow_extension_arrai": [210, 246, 941, 958], "trigger": [210, 246, 941, 958], "sent": [210, 246, 940, 941, 958], "pandas_df1": [210, 246], "pandas_df2": [210, 246], "pandas_df2_pa": [210, 246], "na": [210, 246, 941, 958], "get_column": [211, 246, 564], "four": [212, 246], "five": [212, 246], "bottom_k": [213, 246, 511, 574, 642, 670, 943, 958], "include_head": [214, 246], "header_nam": [214, 246], "column_nam": [214, 246], "perhap": [214, 246], "column_2": [214, 246], "name_gener": [214, 246, 297, 716], "base_nam": [214, 246], "my_column_": [214, 246], "my_column_0": [214, 246], "my_column_1": [214, 246], "my_column_2": [214, 246], "uniquekeepstrategi": [215, 246, 643, 670], "kept": [215, 246, 643, 670], "decompos": [216, 246, 644, 670], "t_a": [216, 246, 644, 670], "t_b": [216, 246, 644, 670], "t_c": [216, 246, 644, 670], "t_d": [216, 246, 644, 670], "womp": [216, 246, 644, 670], "t_": [216, 246, 644, 670], "t_struct": [216, 246, 644, 670], "step": [217, 246, 524], "unstackdirect": [217, 246], "much": [217, 246, 296, 320, 574, 715, 740, 958], "pivot": [217, 246], "phase": [217, 246], "subject": [217, 246], "ascii_uppercas": [217, 246], "h": [217, 246, 253, 353, 459, 496, 574, 920], "col1_0": [217, 246], "col1_1": [217, 246], "col1_2": [217, 246], "col2_0": [217, 246], "col2_1": [217, 246], "col2_2": [217, 246], "syntact": [218, 246, 536, 541, 542, 546, 557, 560, 564, 645, 670, 891, 958], "sugar": [218, 246, 536, 541, 542, 546, 557, 560, 564, 645, 670, 891, 958], "coalesc": [218, 246, 645, 670], "400": [218, 246, 645, 670, 863, 864, 866, 958], "600": [218, 246, 645, 670], "700": [218, 246, 645, 670], "new_df": [218, 246, 645, 670], "time_column": [219, 246], "frequenc": [219, 246], "forward_fil": [219, 246, 316, 319, 574], "06": [219, 246, 326, 336, 348, 349, 360, 776, 777, 785], "varianc": [220, 246, 365, 398, 452, 517, 566, 574, 646, 670, 793, 830, 871, 948, 958], "grow": [221, 246], "is_not": [223, 246, 574, 648, 670], "not_c": [223, 246, 648, 670], "diff": [223, 246, 331, 334, 338, 340, 342, 345, 352, 574, 648, 670, 754, 757, 764, 766, 769, 772, 779, 958], "_diff": [223, 246, 648, 670], "row_nr": [224, 246, 410, 574, 650, 670, 877, 958], "more_agg": [226, 652], "named_agg": [226, 652], "_sum": [226, 652], "_mean_squar": [226, 652], "b_sum": [226, 652], "c_mean_squar": [226, 652], "17": [226, 453, 496, 545, 548, 574, 652, 734, 777, 920, 958], "sub": [228, 574], "triangl": [228, 654], "group_df": [228, 654], "nr": [231, 240, 657, 666], "maxim": [233, 268, 574, 659, 686, 958], "833333": [234, 660], "minim": [236, 269, 274, 459, 467, 574, 662, 687, 693, 841, 882, 958], "overview": [246, 574, 585, 670, 958], "public": [246, 574, 585, 670, 958], "frameinittyp": [246, 670], "variou": [246, 574, 670, 958], "entri": [246, 670], "prevent": [246, 318, 319, 397, 504, 574, 670, 738, 739, 928, 958], "come": [246, 398, 574, 586, 669, 670, 830, 958], "behavior": [246, 260, 296, 522, 574, 715], "mydatafram": 246, "notic": [246, 670, 958], "df4": 246, "df5": 246, "df6": 246, "corr": [246, 556, 561], "drop_in_plac": 246, "drop_nul": [246, 323, 574, 670, 958], "estimated_s": [246, 958], "explod": [246, 374, 441, 574, 670, 860, 958], "find_idx_by_nam": 246, "fold": [246, 417, 527, 534, 535, 558, 564], "frame_equ": [246, 350, 356], "groupby_rol": [246, 444, 445, 446, 447, 448, 450, 451, 452, 574, 606, 670], "hash_row": 246, "hstack": 246, "insert_at_idx": 246, "is_dupl": [246, 574, 958], "is_empti": [246, 958], "is_uniqu": [246, 574, 958], "iter_slic": 246, "melt": [246, 670], "merge_sort": [246, 670], "n_uniqu": [246, 574, 958], "pipe": [246, 574, 670], "quantil": [246, 448, 574, 670, 854, 867, 958], "replace_at_idx": 246, "shrink_to_fit": [246, 958], "take_everi": [246, 574, 670, 958], "to_dict": 246, "to_numpi": [246, 408, 574, 958], "to_panda": [246, 958], "to_struct": 246, "unnest": [246, 492, 493, 501, 670, 916, 917], "unstack": 246, "updat": [246, 670], "upsampl": 246, "write_avro": 246, "write_databas": 246, "write_excel": 246, "write_json": [246, 626, 670], "write_parquet": 246, "cumprod": [253, 574, 958], "ghi": [253, 574], "94": [254, 574], "confus": [256, 391, 393, 574], "tt": [256, 574], "tf": [256, 258, 574], "ff": [256, 258, 574], "upcast": [259, 574], "skip_nul": [260, 574, 679, 958], "pass_nam": [260, 574], "applystrategi": [260, 574], "thread_loc": [260, 574], "unknown": [260, 410, 549, 574], "stage": [260, 574], "code": [260, 456, 574, 614, 670, 878, 958], "amount": [260, 574], "releas": [260, 574], "gil": [260, 574], "discourag": [260, 574], "loop": [260, 574], "a_times_2": [260, 574], "approx": [261, 523, 574, 670], "hyperloglog": [261, 523, 574, 670], "algorithm": [261, 523, 574, 670], "cardin": [261, 523, 574, 670], "invers": [262, 263, 264, 265, 266, 267, 574, 680, 681, 682, 683, 684, 685, 958], "cosin": [262, 263, 312, 313, 408, 574, 680, 681, 734, 735, 958], "570796": [262, 264, 574, 680, 682, 958], "hyperbol": [263, 265, 267, 313, 463, 509, 574, 681, 683, 685, 735, 887, 933, 958], "sine": [264, 265, 408, 462, 463, 574, 682, 683, 886, 887, 958], "881374": [265, 574, 683, 958], "tangent": [266, 267, 508, 509, 574, 684, 685, 932, 933, 958], "785398": [266, 574, 684, 958], "arg_wher": [271, 574], "sublist": [273, 274, 276, 278, 281, 282, 283, 284, 285, 292, 295, 296, 692, 693, 695, 697, 700, 701, 702, 703, 704, 711, 714, 715, 716, 817, 958], "membership": [276, 695], "listcol": 277, "number_of_two": 277, "null_behavior": [278, 321, 574, 697, 743, 958], "nullbehavior": [278, 321, 574, 697, 743, 958], "th": [278, 321, 464, 574, 697, 743, 888, 958], "against": [279, 670, 698, 965], "blindli": [279, 698], "worth": [279, 698], "enough": [279, 464, 574, 698, 888, 958], "concat_list": [279, 540, 698], "rank": [279, 531, 540, 561, 574, 698, 958], "exprnamespac": 280, "reshap": [280, 574, 699, 958], "flat": [280, 441, 574, 699, 860, 958], "taken": [292, 490, 506, 574, 711, 914], "null_on_oob": [296, 715], "cheaper": [296, 715], "n_field_strategi": [297, 716], "tostructstrategi": [297, 716], "first_non_nul": [297, 716], "max_width": [297, 716], "field_0": [297, 716], "field_1": [297, 716], "field_n": [297, 716], "know": [297, 484, 908, 940, 949, 958], "incorrectli": 297, "downstream": [297, 456, 574, 878, 958], "col_name_": [297, 716], "col_name_0": [297, 716], "col_name_1": [297, 716], "col_name_2": [297, 716], "maintain": [298, 455, 513, 574, 634, 635, 670, 717, 874, 944, 958], "substr": [300, 303, 304, 471, 475, 486, 487, 491, 492, 493, 494, 718, 721, 722, 895, 899, 910, 911, 915, 916, 917, 918], "transferencod": [301, 302, 473, 474, 719, 720, 897, 898], "strict": [301, 306, 471, 473, 485, 496, 574, 719, 724, 875, 895, 897, 909, 920, 958], "hex": [301, 302, 473, 474, 485, 719, 720, 897, 898, 909], "base64": [301, 302, 473, 474, 719, 720, 897, 898], "complex": [305, 320, 511, 574, 723, 740, 943, 958], "frac": [305, 363, 364, 365, 464, 511, 574, 723, 791, 792, 793, 888, 943, 958], "due": [306, 349, 574, 724, 776, 958], "overflow": [306, 318, 319, 485, 504, 574, 724, 738, 739, 909, 928, 958], "categoricalord": [307, 726], "lexic": [307, 726], "foo_clip": [309, 310, 311, 574], "clip": [310, 311, 574, 731, 732, 958], "543081": [313, 574, 735, 958], "cumul": [315, 316, 317, 318, 319, 534, 535, 536, 574, 736, 737, 738, 739, 958], "a_revers": [315, 316, 317, 318, 319, 409, 442, 503, 574], "value_cummax": [316, 574], "value_cummax_all_fil": [316, 574], "value_cumsum": [319, 574], "value_cumsum_all_fil": [319, 574], "min_period": [320, 363, 364, 365, 443, 444, 445, 446, 447, 448, 450, 451, 452, 574, 740, 791, 792, 793, 862, 863, 864, 865, 866, 867, 869, 870, 871, 958], "slide": [320, 574, 740, 958], "realli": [320, 574, 740, 958], "visit": [320, 574, 740, 958], "44": [322, 574], "drop_nan": [324, 574, 958], "lose": [325, 748], "2001": [325, 330, 332, 333, 335, 336, 341, 343, 346, 347, 348, 350, 351, 355, 356, 357, 358, 359, 360, 496, 748, 753, 755, 756, 758, 760, 761, 762, 763, 765, 767, 768, 770, 771, 773, 774, 775, 777, 778, 780, 782, 783, 784, 785, 786, 787, 920], "time_unit_m": [325, 748], "time_unit_n": [325, 748], "naiv": [326, 749], "compon": [326, 351, 496, 539, 749, 778], "resolv": 326, "tm": 326, "456000": [326, 749], "101000": 326, "456": [326, 749, 937, 958], "101": [326, 485, 909], "d1": 326, "d2": 326, "d3": 326, "utc": [327, 349, 496, 750, 776, 920], "europ": [327, 349, 750, 776], "london": [327, 349, 750, 776], "gmt": [327, 349, 750, 776], "bst": [327, 349, 750, 776], "weekdai": [330, 347], "day_of_month": [330, 347, 358], "ordinal_dai": [330, 358], "day_of_year": [330, 347, 358], "days_diff": 331, "epochtimeunit": [332, 545, 755], "unix": [332, 545, 755], "epoch_n": [332, 755], "epoch_": [332, 755], "978307200000000": [332, 355, 755, 782], "978307200": [332, 755], "978393600000000": [332, 355, 755, 782], "978393600": [332, 755], "978480000000000": [332, 355, 755, 782], "978480000": [332, 755], "hours_diff": 334, "leap": [335, 346, 758, 773], "2000": [335, 337, 346, 758, 773], "2002": [335, 336, 346, 348, 360, 758, 773, 787], "iso": [336, 357, 358, 759, 784, 785], "correspond": [336, 437, 574, 759, 856, 958], "2006": [336, 346, 773], "180": [336, 348, 360], "2004": [336, 346, 773], "2005": [336, 346, 773], "1_001": [337, 338, 340, 345], "002": [337, 338, 340, 345, 539, 764, 766, 772], "003": [337, 338, 340, 345], "3000": 337, "997": [337, 338, 340, 345], "997000": 337, "998": [337, 338, 340, 345], "998000": 337, "999": [337, 338, 340, 345], "999000": 337, "microseconds_diff": 338, "milliseconds_diff": 340, "minutes_diff": 342, "1440": [342, 769], "nanoseconds_diff": 345, "1000000": [345, 499, 772], "minu": [346, 773], "dictat": [346, 773], "date_plus_1i": [346, 773], "1y2mo": [346, 773], "date_min": 346, "1998": [346, 773], "1999": [346, 773], "2003": [346, 545, 773], "ordin": [347, 437, 574, 774, 856, 958], "366": [347, 774], "use_earliest": [349, 776], "convert_time_zon": [349, 776], "unset": [349, 776], "ambigu": [349, 776], "sai": [349, 776], "daylight": [349, 776], "earliest": [349, 776], "london_timezon": [349, 776], "amsterdam": [349, 776], "london_to_amsterdam": [349, 776], "cet": [349, 776], "cest": [349, 776], "dst": [349, 776], "ts_local": [349, 776], "brussel": [349, 776], "half": [350, 363, 364, 365, 574, 777, 791, 792, 793, 958], "225": [350, 356], "to_fram": [350, 356, 496, 876, 877, 916, 917, 920, 958], "10m": [350, 356, 777, 783], "milli": [351, 778], "micro": [351, 778], "456789": 351, "654321": 351, "111110": 351, "765431": 351, "sec": 351, "11111": 351, "seconds_diff": 352, "timestamp_n": [355, 782], "timestamp_m": 355, "978307200000": 355, "978393600000": 355, "978480000000": 355, "53": [357, 784], "sundai": [358, 785], "incorrect": [359, 456, 574, 654, 786, 878, 958], "time_unit_u": [359, 786], "32971": [359, 786], "32974": [359, 786], "32976": [359, 786], "718281828459045": [361, 403, 574, 789, 833, 958], "pk": [361, 574, 789, 958], "459148": [361, 574], "754888": [361, 574], "span": [363, 364, 365, 574, 791, 792, 793, 958], "half_lif": [363, 364, 365, 574, 791, 792, 793, 958], "adjust": [363, 364, 365, 464, 574, 791, 792, 793, 888, 958], "ignore_nul": [363, 364, 365, 574, 791, 792, 793, 949, 958], "exponenti": [363, 364, 365, 367, 433, 574, 791, 792, 793, 794, 958], "weight": [363, 364, 365, 443, 444, 445, 446, 447, 448, 450, 451, 452, 464, 574, 791, 792, 793, 862, 863, 864, 865, 866, 867, 869, 870, 871, 888, 958], "decai": [363, 364, 365, 574, 791, 792, 793, 958], "term": [363, 364, 365, 481, 484, 574, 791, 792, 793, 905, 908, 958], "mass": [363, 364, 365, 574, 791, 792, 793, 958], "gamma": [363, 364, 365, 574, 791, 792, 793, 958], "foral": [363, 364, 365, 574, 791, 792, 793, 958], "geq": [363, 364, 365, 574, 791, 792, 793, 958], "theta": [363, 364, 365, 574, 791, 792, 793, 958], "life": [363, 364, 365, 574, 791, 792, 793, 958], "exp": [363, 364, 365, 574, 791, 792, 793, 958], "ln": [363, 364, 365, 574, 791, 792, 793, 958], "smooth": [363, 364, 365, 574, 791, 792, 793, 958], "factor": [363, 364, 365, 510, 574, 791, 792, 793, 942, 958], "leq": [363, 364, 365, 574, 791, 792, 793, 958], "begin": [363, 364, 365, 477, 574, 791, 792, 793, 901, 958], "imbal": [363, 364, 365, 574, 791, 792, 793, 958], "ew": [363, 364, 365, 574, 791, 792, 793, 958], "w_i": [363, 364, 365, 574, 791, 792, 793, 958], "recurs": [363, 364, 365, 574, 791, 792, 793, 958], "y_0": [363, 364, 365, 574, 791, 792, 793, 958], "x_0": [363, 364, 365, 574, 791, 792, 793, 958], "y_t": [363, 364, 365, 574, 791, 792, 793, 958], "y_": [363, 364, 365, 574, 791, 792, 793, 958], "x_t": [363, 364, 365, 574, 791, 792, 793, 958], "observ": [363, 364, 365, 574, 791, 792, 793, 958], "x_2": [363, 364, 365, 574, 791, 792, 793, 958], "428571": [363, 574], "bia": [364, 365, 398, 449, 464, 574, 792, 793, 830, 868, 888, 958], "unbias": [364, 365, 574, 792, 793, 958], "963624": [364, 574, 792, 958], "928571": [365, 574, 793, 958], "wildcard": [366, 520, 528, 534, 535, 543, 558, 574], "regex": [366, 415, 471, 472, 475, 477, 478, 486, 487, 494, 541, 551, 554, 564, 574, 895, 896, 899, 901, 902, 910, 911, 918], "aa": [366, 541, 574], "ba": [366, 541, 574], "cc": [366, 541, 574], "718282": [367, 574], "389056": [367, 574], "54": [367, 574], "59815": [367, 574], "expand": [368, 414, 415, 440, 574, 795, 958], "exprlistnamespac": [368, 374, 441, 574], "exprstringnamespac": [368, 574], "pythonliter": [369, 551, 554, 574, 648, 670, 796, 838, 841, 958], "extrem": [369, 574, 796, 958], "group_col": [372, 518, 574], "g1": [372, 518, 574], "g2": [372, 518, 574], "lt": [372, 518, 574, 958], "gte": [372, 518, 574], "divis": [376, 512, 574], "truediv": [376, 574], "9774092659964970114": [380, 574], "13614470193936745724": [380, 574], "1101441246220388612": [380, 574], "11638928888656214026": [380, 574], "13382926553367784577": [380, 574], "cumsum": [383, 502, 574, 609, 670, 829, 958], "interpolationmethod": [384, 574, 809, 958], "regrid": [384, 574], "grid": [384, 574], "df_original_grid": [384, 574], "grid_point": [384, 574], "df_new_grid": [384, 574], "conflat": [385, 574], "finit": [387, 512, 531, 561, 574, 814, 958], "primit": [389, 574, 940, 958], "optional_memb": [389, 574, 817, 958], "infinit": [390, 512, 574, 818, 958], "_isnan": [391, 574], "b_isnan": [391, 574], "negat": [392, 574], "_is_not_nan": [393, 574], "b_is_not_nan": [393, 574], "_not_nul": [394, 574], "a_not_nul": [394, 574], "b_not_nul": [394, 574], "_isnul": [395, 574], "a_isnul": [395, 574], "b_isnul": [395, 574], "undo": [397, 419, 574], "duplicateerror": [397, 574, 585], "occurr": [397, 574, 806, 958], "333333": [397, 452, 574, 850, 871, 958], "fisher": [398, 464, 574, 830, 888, 958], "fourth": [398, 574, 830, 958], "subtract": [398, 502, 574, 830, 958], "distribut": [398, 464, 574, 830, 888, 958], "elimin": [398, 574, 830, 958], "bias": [398, 464, 574, 830, 888, 958], "scipi": [398, 464, 574, 830, 888, 958], "stat": [398, 464, 574, 830, 888, 958], "153061": [398, 574], "logarithm": [403, 404, 405, 574, 833, 834, 835, 958], "584963": [403, 574], "30103": [404, 574], "60206": [404, 574], "natur": [405, 574, 835, 958], "plu": [405, 574, 835, 958], "693147": [405, 574], "098612": [405, 574], "386294": [405, 574], "lowest": [406, 574], "9223372036854775808": [406, 574], "agg_list": [408, 574], "elementwis": [408, 443, 444, 445, 446, 447, 448, 450, 451, 452, 520, 521, 574, 862, 863, 864, 865, 866, 867, 869, 870, 871, 958], "third": [408, 574], "parti": [408, 574], "book": [408, 574], "argmax": [408, 574], "_revers": [409, 442, 503, 574], "b_revers": [409, 442, 503, 574], "remap": [410, 574, 837, 958], "lookup": [410, 574, 837, 958], "country_code_dict": [410, 574], "ca": [410, 574], "canada": [410, 574], "de": [410, 574], "germani": [410, 574], "fr": [410, 574], "franc": [410, 574], "country_cod": [410, 574], "rest": [410, 574], "computeerror": [416, 485, 585, 909], "keep_nam": [419, 574], "modulu": [421, 574], "xlog2": [423, 433, 574], "poison": [425, 426, 574, 846, 847, 958], "nanmax": [425, 426, 574, 846, 847, 958], "wherea": [425, 426, 574, 608, 615, 670, 846, 847, 958], "inequ": [427, 574], "outcom": [430, 574], "_max": [430, 574], "c_max": [430, 574], "_min": [430, 574], "c_min": [430, 574], "recent": [431, 574, 850, 958], "percent": [431, 574, 850, 958], "090909": [431, 574], "extract_numb": [432, 574], "r": [432, 472, 476, 477, 478, 486, 574, 896, 900, 901, 902, 910], "expon": [433, 574, 958], "512": [433, 574, 850, 958], "reverse_": [434, 574], "reverse_a": [434, 574], "reverse_fruit": [434, 574], "reverse_b": [434, 574], "reverse_car": [434, 574], "rankmethod": [437, 574, 856, 958], "ti": [437, 574, 856, 958], "competit": [437, 574, 856, 958], "highest": [437, 515, 531, 561, 574, 670, 856, 958], "safe": [439, 496, 574, 858, 920, 940, 958], "coerc": [440, 574], "fruits_revers": [442, 503, 574], "cars_revers": [442, 503, 574], "window_s": [443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 574, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 958], "rolling_min": [443, 574, 862, 958], "rolling_max": [443, 574, 862, 958], "rolling_mean": [443, 574, 862, 958], "rolling_sum": [443, 574, 862, 958], "multipli": [443, 444, 445, 446, 447, 448, 450, 451, 452, 574, 862, 863, 864, 865, 866, 867, 869, 870, 871, 958], "358899": [443, 574], "041452": [443, 574], "567764": [443, 574], "travers": [444, 445, 447, 450, 451, 452, 574, 863, 864, 866, 869, 870, 871, 958], "vector": [444, 445, 447, 450, 451, 452, 574, 863, 864, 866, 869, 870, 871, 958], "5h": [444, 445, 446, 447, 448, 450, 451, 452, 574], "33": [448, 453, 528, 574, 867, 958], "skew": [449, 574, 868, 958], "527525": [450, 574, 869, 958], "digit": [453, 499, 574, 872, 896, 923, 958], "searchsortedsid": [455, 574, 874, 958], "leftmost": [455, 574, 874, 958], "rightmost": [455, 574, 874, 958], "six": [455, 574], "extrema": [459, 574, 882, 958], "112": [459, 574], "129": [459, 574], "i8": [459, 574, 743, 861, 946, 958], "8589934592": [459, 574], "1073741824": [459, 574], "content": [460, 516, 574, 884, 958], "175201": [463, 574, 887, 958], "about": [464, 574, 888, 958], "unimod": [464, 574, 888, 958], "skewtest": [464, 574, 888, 958], "speak": [464, 574, 888, 958], "g_1": [464, 574, 888, 958], "m_3": [464, 574, 888, 958], "m_2": [464, 574, 888, 958], "m_i": [464, 574, 888, 958], "sum_": [464, 574, 888, 958], "texttt": [464, 574, 888, 958], "k_3": [464, 574, 888, 958], "k_2": [464, 574, 888, 958], "sqrt": [464, 574, 888, 958], "343622": [464, 574], "value1": [467, 574], "value2": [467, 574], "attain": [467, 574], "414214": [468, 574, 891, 958], "ends_with": [471, 494, 918], "crab": [471, 895], "dog": [471, 497, 498, 530, 895], "rab": [471, 895], "success": [472, 478, 896, 902], "overlap": [472, 478, 896, 902], "captur": [472, 477, 478, 896, 901, 902], "123": [472, 478, 487, 896, 902, 911, 937, 958], "bla": [472, 478, 896, 902], "asd": [472, 478, 896, 902], "678": [472, 478, 896, 902], "910t": [472, 478, 896, 902], "count_digit": 472, "666f6f": [474, 898], "626172": [474, 898], "mango": [475, 494, 899, 918], "go": [475, 899], "has_suffix": 475, "group_index": [477, 901], "vote": [477, 901], "ballon_dor": [477, 901], "candid": [477, 901], "messi": [477, 901], "ref": [477, 901], "candidat": [477, 901], "jorginho": [477, 901], "ronaldo": [477, 901], "extracted_nr": 478, "910": [478, 902], "json_path_match": [479, 903], "jsonpath": [479, 480, 903, 904], "json_path": [480, 904], "regardless": [480, 904], "json_val": [480, 904], "n_char": [481, 905], "caf\u00e9": [481, 484, 905, 908], "345": [481, 484, 905, 908], "\u6771\u4eac": [481, 484, 905, 908], "nchar": [481, 484], "fill_char": [482, 488, 906, 912], "justifi": [482, 488, 906, 912], "pad": [482, 488, 499, 906, 912, 923], "cow": [482, 488, 906, 912], "monkei": [482, 488, 906, 912], "hippopotamu": [482, 488, 906, 912], "strip": [483, 489, 907, 913], "tworld": [483, 495, 907, 919], "wod": [483, 489, 907, 913], "rld": [483, 907], "text": [484, 486, 487, 908], "radix": [485, 909], "parseerror": [485, 909], "becom": [485, 909], "silent": [485, 909], "110": [485, 909], "010": [485, 909], "fa1e": [485, 909], "ff00": [485, 909], "cafe": [485, 909], "64030": [485, 909], "65280": [485, 909], "51966": [485, 909], "replace_al": [486, 910], "123abc": [486, 910], "abc456": [486, 910], "abcabc": [487, 911], "123a123": [487, 911], "bc": [487, 564, 911], "trail": [489, 495, 913, 919], "worl": [489, 495, 913, 919], "subslic": [490, 914], "pear": [490, 914], "papaya": [490, 914], "dragonfruit": [490, 914], "s_slice": 490, "ear": [490, 914], "aya": [490, 914], "uit": [490, 914], "ya": [490, 914], "onf": [490, 914], "a_1": [492, 916, 936, 958], "d_4": [492, 916], "rename_field": [492, 493, 916, 917], "first_part": [492, 493, 916, 917], "second_part": [492, 493, 916, 917], "remaind": [493, 917], "app": [494, 918], "has_prefix": 494, "polarstemporaltyp": [496, 920], "tz_awar": [496, 920], "strftime": [496, 920], "anywher": [496, 920], "toggl": [496, 920], "futur": [496, 920], "3f": 496, "00z": [496, 920], "sun": [496, 920], "jul": [496, 920], "34": [496, 920], "lowercas": [497, 921], "variant": [497, 498], "uppercas": [498, 922], "100000": 499, "0010": 499, "0001": 499, "00000": 499, "00001": 499, "cd": [500, 501], "struct_col": [500, 501], "www": 501, "xxx": 501, "yyi": 501, "zzz": 501, "obvious": 501, "structfieldnotfounderror": [501, 585], "761594": [509, 574, 933, 958], "replic": [510, 574, 942, 958], "vals_phys": [510, 574], "floordiv": [512, 574], "behaviour": [512, 574], "ieee": [512, 574], "754": [512, 574], "mathemat": [512, 540, 574], "undefin": [512, 574], "On": [512, 574], "operand": [512, 574], "infin": [512, 574], "value_count": [514, 574, 958], "9223372036854775807": [515, 574], "multithread": [516, 574], "binary_str": [519, 574], "zfill": [519, 574], "250": [519, 574, 864, 958], "bin_x": [519, 574], "bin_i": [519, 574], "xor_xi": [519, 574], "bin_xor_xi": [519, 574], "00001010": [519, 574], "00000001": [519, 574], "00001011": [519, 574], "00001000": [519, 574], "00000010": [519, 574], "11111010": [519, 574], "00000011": [519, 574], "249": [519, 574], "11111001": [519, 574], "01000010": [519, 574], "00000100": [519, 574], "70": [519, 574], "01000110": [519, 574], "columnwis": [520, 521], "AND": 520, "bitwis": [520, 521], "returns_scalar": 522, "product_a": 522, "49": 522, "Be": 524, "more_nam": 528, "hamburg": 528, "lag": 529, "mimic": 529, "a_lag_": 529, "a_rol": 529, "plai": 530, "swim": 530, "walk": 530, "full_sent": 530, "correlationmethod": 531, "propagate_nan": [531, 561], "spearman": [531, 561], "larger": [531, 561, 634, 635, 670], "544705": [531, 556], "covari": 533, "acc": [534, 535, 543, 558], "include_init": 534, "accumul": [534, 535, 543, 558], "fn": [534, 535, 543, 558], "new_valu": [534, 535, 543, 558], "cumreduc": 534, "cumfold": 536, "999999": 538, "tbl_width_char": 539, "120": 539, "add_week": 539, "add_dai": 539, "add_second": 539, "add_milli": 539, "add_hour": 539, "arr": [540, 575, 940, 958, 959], "a_b_doubl": 540, "f_string": 544, "placehold": 544, "hello_": 544, "_world": 544, "foo_": 544, "_bar_": 544, "foo_a_bar_1": 544, "foo_b_bar_2": 544, "foo_c_bar_3": 544, "epoch": 545, "timestep": 545, "1666683077": 545, "1666683099": 545, "39": 545, "12345": [545, 727, 801, 872, 958], "12346": 545, "agg_group": [546, 574], "favor": [548, 556, 561], "implod": [548, 574, 958], "allow_object": 549, "valueexcept": 549, "foo_bar": 549, "test_func": 550, "selector": [551, 554, 564], "605551": 562, "605551275463989": 562, "my_struct": 563, "q": 563, "statement": 567, "chain": 567, "isn": 567, "thens": 567, "elif": 567, "pick": 567, "sometim": 573, "and_": 574, "approx_uniqu": [574, 670], "arcco": [574, 958], "arccosh": [574, 958], "arcsin": [574, 958], "arcsinh": [574, 958], "arctan": [574, 958], "arctanh": [574, 958], "arg_max": [574, 958], "arg_min": [574, 958], "arg_sort": [574, 958], "arg_uniqu": [574, 958], "backward_fil": 574, "clip_max": [574, 958], "clip_min": [574, 958], "co": [574, 958], "cosh": [574, 958], "cumcount": 574, "cummax": [574, 958], "cummin": [574, 958], "cumulative_ev": [574, 958], "entropi": [574, 958], "eq": [574, 958], "ewm_mean": [574, 958], "ewm_std": [574, 958], "ewm_var": [574, 958], "extend_const": [574, 958], "flatten": 574, "ge": [574, 958], "gt": [574, 958], "inspect": [574, 670], "is_between": [574, 958], "is_finit": [574, 958], "is_first": [574, 958], "is_in": [574, 958], "is_infinit": [574, 958], "is_nan": [574, 958], "is_not_nan": [574, 958], "is_not_nul": [574, 958], "kurtosi": [574, 958], "le": [574, 958], "log10": [574, 958], "log1p": [574, 958], "map_alia": 574, "map_dict": [574, 958], "mod": 574, "mul": 574, "nan_max": [574, 958], "nan_min": [574, 958], "ne": [574, 958], "or_": 574, "pct_chang": [574, 958], "pow": [574, 958], "reinterpret": [574, 958], "repeat_bi": 574, "rolling_appli": [574, 958], "rolling_median": [574, 958], "rolling_quantil": [574, 958], "rolling_skew": [574, 958], "rolling_std": [574, 958], "rolling_var": [574, 958], "search_sort": [574, 958], "set_sort": [574, 958], "shrink_dtyp": [574, 958], "sin": [574, 958], "sinh": [574, 958], "sort_bi": 574, "tan": [574, 958], "to_phys": [574, 958], "unique_count": [574, 958], "xor": 574, "expos": 585, "registr": 585, "miscellan": 585, "arrowerror": 585, "columnnotfounderror": 585, "invalidoperationerror": 585, "nodataerror": 585, "polarspanicerror": 585, "schemaerror": 585, "schemafieldnotfounderror": 585, "shapeerror": 585, "build_info": 585, "get_index_typ": 585, "show_vers": 585, "threadpool_s": 585, "sqlcontext": [585, 965], "hit": [589, 670], "node": [589, 609, 616, 620, 624, 627, 670], "huge": [592, 670], "saver": [592, 670], "purpos": [599, 670], "influenc": [599, 616, 670], "read_json": [604, 651, 670], "lazygroupbi": [605, 606, 607, 670], "other_lf": [611, 670], "validate_output_schema": [616, 670], "streamabl": [616, 620, 670], "past": [616, 670], "assum": [616, 654, 670], "paramount": [616, 670], "bug": [616, 654, 670], "elig": [616, 670], "invari": [616, 670], "upheld": [616, 670], "prune": [616, 670], "show_plot": [624, 670], "truncate_nod": [624, 670], "figsiz": [624, 633, 670], "gantt": [624, 670], "plot": [624, 633, 670], "groupby_partit": [624, 670], "470": [624, 670], "475": [624, 670], "1964": [624, 670], "from_json": [626, 670], "swap": [627, 670], "output_path": [633, 670], "raw_output": [633, 670], "figur": [633, 670], "persist": [634, 635, 670], "ram": [634, 635, 670], "slightli": [634, 635, 670], "my_larger_than_ram_fil": [634, 635, 670], "data_pagesize_limit": [635, 670], "290994": [638, 670], "118034": [638, 670], "433013": [638, 670], "1875": [646, 670], "polarsexprtyp": [648, 670], "extern": [649, 670], "lf_other": [649, 670], "afoo": [649, 670], "cfoo": [649, 670], "train_lf": [649, 670], "feature_0": [649, 670], "feature_1": [649, 670], "test_lf": [649, 670], "_train": [649, 670], "feature_0_train": [649, 670], "dataframescan": [651, 670], "output_schema": [651, 670], "lf2": 670, "lf3": 670, "lf4": 670, "lf5": 670, "lf6": 670, "explain": 670, "profil": 670, "sink_ipc": 670, "sink_parquet": 670, "with_context": 670, "new_aliased_sr": [675, 958], "append_chunk": [678, 958], "super": [678, 958], "141593": [680, 958], "292432": [681, 958], "549306": [685, 958], "listnamespac": [691, 795, 860, 958], "catnamespac": 725, "56789": [727, 801, 872, 958], "901234": [727, 801, 872, 958], "pi": [734, 886, 932, 958], "1232e": [734, 958], "quick": [742, 958], "series_num": [742, 958], "581139": [742, 958], "series_str": [742, 958], "datetimenamespac": 747, "ser": [751, 752, 781], "replace_time_zon": [751, 752, 781], "kathmandu": [751, 752, 781], "0545": [751, 752, 781], "500m": [763, 765, 771, 778], "500000": 763, "2m": 768, "500000000": 771, "date_minus_1y_2mon": 773, "165": [777, 783], "series_equ": [777, 783, 958], "timestamp_u": 782, "978307200000000000": 782, "978393600000000000": 782, "978480000000000000": 782, "005": [789, 958], "06293300616044681": [789, 958], "65": [789, 958], "8568409950394724": [789, 958], "4000000": [790, 958], "814697265625": [790, 958], "stringnamespac": [795, 893, 958], "bitmask": [803, 958], "swiftli": [803, 958], "10734580197236529959": [804, 958], "3022416320763508302": [804, 958], "13756996518000038261": [804, 958], "bin_count": [806, 958], "a_count": [806, 958], "fall": [810, 958], "2147483648": [836, 958], "iso3166": [837, 958], "tur": [837, 958], "jpn": [837, 958], "nld": [837, 958], "country_lookup": [837, 958], "japan": [837, 958], "t\u00fcrkiy": [837, 958], "netherland": [837, 958], "unrecognis": [837, 958], "unspecifi": [837, 958], "country_nam": [837, 958], "166667": [850, 958], "142857": [850, 958], "peak": [851, 852, 958], "quanil": [854, 958], "nanstd": [862, 958], "858612": [862, 958], "200": [863, 864, 866, 958], "150": [864, 958], "350": [864, 958], "450": [864, 958], "381802": [868, 958], "dev": [869, 958], "57": [872, 958], "frequent": [876, 877, 958], "mutat": [877, 958], "2246e": [886, 932, 958], "6331e16": [932, 958], "lib": [935, 958], "int64arrai": [935, 958], "a_2": [936, 958], "a_3": [936, 958], "s_from_str_repr": [938, 958], "zero_copy_onli": [940, 958], "writabl": [940, 958], "complet": [940, 958], "view": [940, 958], "presenc": [940, 958], "immut": [940, 958], "127": [946, 958], "seriesview": [949, 958], "arraylik": 958, "dtype_if_empti": 958, "position": 958, "scenario": 958, "through": 958, "chunk_length": 958, "cut": 958, "get_chunk": 958, "has_valid": 958, "hist": 958, "is_boolean": 958, "is_float": 958, "is_integ": 958, "is_numer": 958, "is_sort": 958, "is_tempor": 958, "is_utf8": 958, "new_from_index": 958, "peak_max": 958, "peak_min": 958, "power": 958, "qcut": 958, "set_at_idx": 958}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [965, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 0, 1, "", "Struct"], [53, 0, 1, "", "Time"], [54, 0, 1, "", "UInt16"], [55, 0, 1, "", "UInt32"], [56, 0, 1, "", "UInt64"], [57, 0, 1, "", "UInt8"], [58, 0, 1, "", "Unknown"], [59, 0, 1, "", "Utf8"], [60, 4, 1, "", "align_frames"], [520, 4, 1, "", "all"], [521, 4, 1, "", "any"], [522, 4, 1, "", "apply"], [523, 4, 1, "", "approx_unique"], [524, 4, 1, "", "arange"], [525, 4, 1, "", "arg_sort_by"], [65, 4, 1, "", "arg_where"], [526, 4, 1, "", "avg"], [66, 4, 1, "", "build_info"], [527, 4, 1, "", "coalesce"], [528, 4, 1, "", "col"], [67, 4, 1, "", "collect_all"], [68, 4, 1, "", "concat"], [529, 4, 1, "", "concat_list"], [530, 4, 1, "", "concat_str"], [531, 4, 1, "", "corr"], [532, 4, 1, "", "count"], [533, 4, 1, "", "cov"], [534, 4, 1, "", "cumfold"], [535, 4, 1, "", "cumreduce"], [536, 4, 1, "", "cumsum"], [69, 4, 1, "", "cut"], [537, 4, 1, "", "date"], [70, 4, 1, "", "date_range"], [538, 4, 1, "", "datetime"], [539, 4, 1, "", "duration"], [540, 4, 1, "", "element"], [71, 4, 1, "", "enable_string_cache"], [541, 4, 1, "", "exclude"], [542, 4, 1, "", "first"], [543, 4, 1, "", "fold"], [544, 4, 1, "", "format"], [86, 4, 1, "", "from_arrow"], [87, 4, 1, "", "from_dataframe"], [88, 4, 1, "", "from_dict"], [89, 4, 1, "", "from_dicts"], [545, 4, 1, "", "from_epoch"], [90, 4, 1, "", "from_numpy"], [91, 4, 1, "", "from_pandas"], [92, 4, 1, "", "from_records"], [93, 4, 1, "", "from_repr"], [94, 4, 1, "", "get_dummies"], [95, 4, 1, "", "get_index_type"], [546, 4, 1, "", "groups"], [547, 4, 1, "", "head"], [548, 4, 1, "", "list"], [549, 4, 1, "", "lit"], [550, 4, 1, "", "map"], [551, 4, 1, "", "max"], [552, 4, 1, "", "mean"], [553, 4, 1, "", "median"], [554, 4, 1, "", "min"], [555, 4, 1, "", "n_unique"], [97, 4, 1, "", "ones"], [556, 4, 1, "", "pearson_corr"], [557, 4, 1, "", "quantile"], [98, 4, 1, "", "read_avro"], [99, 4, 1, "", "read_csv"], [100, 4, 1, "", "read_csv_batched"], [101, 4, 1, "", "read_database"], [102, 4, 1, "", "read_delta"], [103, 4, 1, "", "read_excel"], [104, 4, 1, "", "read_ipc"], [105, 4, 1, "", "read_ipc_schema"], [106, 4, 1, "", "read_json"], [107, 4, 1, "", "read_ndjson"], [108, 4, 1, "", "read_parquet"], [109, 4, 1, "", "read_parquet_schema"], [558, 4, 1, "", "reduce"], [559, 4, 1, "", "repeat"], [110, 4, 1, "", "scan_csv"], [111, 4, 1, "", "scan_delta"], [112, 4, 1, "", "scan_ipc"], [113, 4, 1, "", "scan_ndjson"], [114, 4, 1, "", "scan_parquet"], [115, 4, 1, "", "scan_pyarrow_dataset"], [560, 4, 1, "", "select"], [116, 4, 1, "", "show_versions"], [561, 4, 1, "", "spearman_rank_corr"], [562, 4, 1, "", "std"], [563, 4, 1, "", "struct"], [564, 4, 1, "", "sum"], [565, 4, 1, "", "tail"], [123, 4, 1, "", "threadpool_size"], [566, 4, 1, "", "var"], [567, 4, 1, "", "when"], [124, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[127, 1, 1, "", "__dataframe__"], [128, 1, 1, "", "apply"], [129, 1, 1, "", "bottom_k"], [130, 1, 1, "", "clear"], [131, 1, 1, "", "clone"], [132, 2, 1, "", "columns"], [133, 1, 1, "", "corr"], [134, 1, 1, "", "describe"], [135, 1, 1, "", "drop"], [136, 1, 1, "", "drop_in_place"], [137, 1, 1, "", "drop_nulls"], [138, 2, 1, "", "dtypes"], [139, 1, 1, "", "estimated_size"], [140, 1, 1, "", "explode"], [141, 1, 1, "", "extend"], [142, 1, 1, "", "fill_nan"], [143, 1, 1, "", "fill_null"], [144, 1, 1, "", "filter"], [145, 1, 1, "", "find_idx_by_name"], [146, 1, 1, "", "fold"], [147, 1, 1, "", "frame_equal"], [148, 1, 1, "", "get_column"], [149, 1, 1, "", "get_columns"], [150, 1, 1, "", "glimpse"], [151, 1, 1, "", "groupby"], [152, 1, 1, "", "groupby_dynamic"], [153, 1, 1, "", "groupby_rolling"], [154, 1, 1, "", "hash_rows"], [155, 1, 1, "", "head"], [156, 2, 1, "", "height"], [157, 1, 1, "", "hstack"], [158, 1, 1, "", "insert_at_idx"], [159, 1, 1, "", "interpolate"], [160, 1, 1, "", "is_duplicated"], [161, 1, 1, "", "is_empty"], [162, 1, 1, "", "is_unique"], [163, 1, 1, "", "item"], [164, 1, 1, "", "iter_rows"], [165, 1, 1, "", "iter_slices"], [166, 1, 1, "", "join"], [167, 1, 1, "", "join_asof"], [168, 1, 1, "", "lazy"], [169, 1, 1, "", "limit"], [170, 1, 1, "", "max"], [171, 1, 1, "", "mean"], [172, 1, 1, "", "median"], [173, 1, 1, "", "melt"], [174, 1, 1, "", "merge_sorted"], [175, 1, 1, "", "min"], [176, 1, 1, "", "n_chunks"], [177, 1, 1, "", "n_unique"], [178, 1, 1, "", "null_count"], [179, 1, 1, "", "partition_by"], [180, 1, 1, "", "pipe"], [181, 1, 1, "", "pivot"], [182, 1, 1, "", "product"], [183, 1, 1, "", "quantile"], [184, 1, 1, "", "rechunk"], [185, 1, 1, "", "rename"], [186, 1, 1, "", "replace"], [187, 1, 1, "", "replace_at_idx"], [188, 1, 1, "", "reverse"], [189, 1, 1, "", "row"], [190, 1, 1, "", "rows"], [191, 1, 1, "", "sample"], [192, 2, 1, "", "schema"], [193, 1, 1, "", "select"], [194, 2, 1, "", "shape"], [195, 1, 1, "", "shift"], [196, 1, 1, "", "shift_and_fill"], [197, 1, 1, "", "shrink_to_fit"], [198, 1, 1, "", "slice"], [199, 1, 1, "", "sort"], [200, 1, 1, "", "std"], [201, 1, 1, "", "sum"], [202, 1, 1, "", "tail"], [203, 1, 1, "", "take_every"], [204, 1, 1, "", "to_arrow"], [205, 1, 1, "", "to_dict"], [206, 1, 1, "", "to_dicts"], [207, 1, 1, "", "to_dummies"], [208, 1, 1, "", "to_init_repr"], [209, 1, 1, "", "to_numpy"], [210, 1, 1, "", "to_pandas"], [211, 1, 1, "", "to_series"], [212, 1, 1, "", "to_struct"], [213, 1, 1, "", "top_k"], [214, 1, 1, "", "transpose"], [215, 1, 1, "", "unique"], [216, 1, 1, "", "unnest"], [217, 1, 1, "", "unstack"], [218, 1, 1, "", "update"], [219, 1, 1, "", "upsample"], [220, 1, 1, "", "var"], [221, 1, 1, "", "vstack"], [222, 2, 1, "", "width"], [223, 1, 1, "", "with_columns"], [224, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[252, 1, 1, "", "abs"], [253, 1, 1, "", "add"], [254, 1, 1, "", "agg_groups"], [255, 1, 1, "", "alias"], [256, 1, 1, "", "all"], [257, 1, 1, "", "and_"], [258, 1, 1, "", "any"], [259, 1, 1, "", "append"], [260, 1, 1, "", "apply"], [261, 1, 1, "", "approx_unique"], [262, 1, 1, "", "arccos"], [263, 1, 1, "", "arccosh"], [264, 1, 1, "", "arcsin"], [265, 1, 1, "", "arcsinh"], [266, 1, 1, "", "arctan"], [267, 1, 1, "", "arctanh"], [268, 1, 1, "", "arg_max"], [269, 1, 1, "", "arg_min"], [270, 1, 1, "", "arg_sort"], [271, 1, 1, "", "arg_true"], [272, 1, 1, "", "arg_unique"], [299, 1, 1, "", "backward_fill"], [305, 1, 1, "", "bottom_k"], [306, 1, 1, "", "cast"], [308, 1, 1, "", "ceil"], [309, 1, 1, "", "clip"], [310, 1, 1, "", "clip_max"], [311, 1, 1, "", "clip_min"], [312, 1, 1, "", "cos"], [313, 1, 1, "", "cosh"], [314, 1, 1, "", "count"], [315, 1, 1, "", "cumcount"], [316, 1, 1, "", "cummax"], [317, 1, 1, "", "cummin"], [318, 1, 1, "", "cumprod"], [319, 1, 1, "", "cumsum"], [320, 1, 1, "", "cumulative_eval"], [321, 1, 1, "", "diff"], [322, 1, 1, "", "dot"], [323, 1, 1, "", "drop_nans"], [324, 1, 1, "", "drop_nulls"], [361, 1, 1, "", "entropy"], [362, 1, 1, "", "eq"], [363, 1, 1, "", "ewm_mean"], [364, 1, 1, "", "ewm_std"], [365, 1, 1, "", "ewm_var"], [366, 1, 1, "", "exclude"], [367, 1, 1, "", "exp"], [368, 1, 1, "", "explode"], [369, 1, 1, "", "extend_constant"], [370, 1, 1, "", "fill_nan"], [371, 1, 1, "", "fill_null"], [372, 1, 1, "", "filter"], [373, 1, 1, "", "first"], [374, 1, 1, "", "flatten"], [375, 1, 1, "", "floor"], [376, 1, 1, "", "floordiv"], [377, 1, 1, "", "forward_fill"], [378, 1, 1, "", "ge"], [379, 1, 1, "", "gt"], [380, 1, 1, "", "hash"], [381, 1, 1, "", "head"], [382, 1, 1, "", "implode"], [383, 1, 1, "", "inspect"], [384, 1, 1, "", "interpolate"], [385, 1, 1, "", "is_between"], [386, 1, 1, "", "is_duplicated"], [387, 1, 1, "", "is_finite"], [388, 1, 1, "", "is_first"], [389, 1, 1, "", "is_in"], [390, 1, 1, "", "is_infinite"], [391, 1, 1, "", "is_nan"], [392, 1, 1, "", "is_not"], [393, 1, 1, "", "is_not_nan"], [394, 1, 1, "", "is_not_null"], [395, 1, 1, "", "is_null"], [396, 1, 1, "", "is_unique"], [397, 1, 1, "", "keep_name"], [398, 1, 1, "", "kurtosis"], [399, 1, 1, "", "last"], [400, 1, 1, "", "le"], [401, 1, 1, "", "len"], [402, 1, 1, "", "limit"], [403, 1, 1, "", "log"], [404, 1, 1, "", "log10"], [405, 1, 1, "", "log1p"], [406, 1, 1, "", "lower_bound"], [407, 1, 1, "", "lt"], [408, 1, 1, "", "map"], [409, 1, 1, "", "map_alias"], [410, 1, 1, "", "map_dict"], [411, 1, 1, "", "max"], [412, 1, 1, "", "mean"], [413, 1, 1, "", "median"], [420, 1, 1, "", "min"], [421, 1, 1, "", "mod"], [422, 1, 1, "", "mode"], [423, 1, 1, "", "mul"], [424, 1, 1, "", "n_unique"], [425, 1, 1, "", "nan_max"], [426, 1, 1, "", "nan_min"], [427, 1, 1, "", "ne"], [428, 1, 1, "", "null_count"], [429, 1, 1, "", "or_"], [430, 1, 1, "", "over"], [431, 1, 1, "", "pct_change"], [432, 1, 1, "", "pipe"], [433, 1, 1, "", "pow"], [434, 1, 1, "", "prefix"], [435, 1, 1, "", "product"], [436, 1, 1, "", "quantile"], [437, 1, 1, "", "rank"], [438, 1, 1, "", "rechunk"], [439, 1, 1, "", "reinterpret"], [440, 1, 1, "", "repeat_by"], [441, 1, 1, "", "reshape"], [442, 1, 1, "", "reverse"], [443, 1, 1, "", "rolling_apply"], [444, 1, 1, "", "rolling_max"], [445, 1, 1, "", "rolling_mean"], [446, 1, 1, "", "rolling_median"], [447, 1, 1, "", "rolling_min"], [448, 1, 1, "", "rolling_quantile"], [449, 1, 1, "", "rolling_skew"], [450, 1, 1, "", "rolling_std"], [451, 1, 1, "", "rolling_sum"], [452, 1, 1, "", "rolling_var"], [453, 1, 1, "", "round"], [454, 1, 1, "", "sample"], [455, 1, 1, "", "search_sorted"], [456, 1, 1, "", "set_sorted"], [457, 1, 1, "", "shift"], [458, 1, 1, "", "shift_and_fill"], [459, 1, 1, "", "shrink_dtype"], [460, 1, 1, "", "shuffle"], [461, 1, 1, "", "sign"], [462, 1, 1, "", "sin"], [463, 1, 1, "", "sinh"], [464, 1, 1, "", "skew"], [465, 1, 1, "", "slice"], [466, 1, 1, "", "sort"], [467, 1, 1, "", "sort_by"], [468, 1, 1, "", "sqrt"], [469, 1, 1, "", "std"], [502, 1, 1, "", "sub"], [503, 1, 1, "", "suffix"], [504, 1, 1, "", "sum"], [505, 1, 1, "", "tail"], [506, 1, 1, "", "take"], [507, 1, 1, "", "take_every"], [508, 1, 1, "", "tan"], [509, 1, 1, "", "tanh"], [510, 1, 1, "", "to_physical"], [511, 1, 1, "", "top_k"], [512, 1, 1, "", "truediv"], [513, 1, 1, "", "unique"], [514, 1, 1, "", "unique_counts"], [515, 1, 1, "", "upper_bound"], [516, 1, 1, "", "value_counts"], [517, 1, 1, "", "var"], [518, 1, 1, "", "where"], [519, 1, 1, "", "xor"]], "polars.Expr.arr": [[273, 1, 1, "", "arg_max"], [274, 1, 1, "", "arg_min"], [275, 1, 1, "", "concat"], [276, 1, 1, "", "contains"], [277, 1, 1, "", "count_match"], [278, 1, 1, "", "diff"], [279, 1, 1, "", "eval"], [280, 1, 1, "", "explode"], [281, 1, 1, "", "first"], [282, 1, 1, "", "get"], [283, 1, 1, "", "head"], [284, 1, 1, "", "join"], [285, 1, 1, "", "last"], [286, 1, 1, "", "lengths"], [287, 1, 1, "", "max"], [288, 1, 1, "", "mean"], [289, 1, 1, "", "min"], [290, 1, 1, "", "reverse"], [291, 1, 1, "", "shift"], [292, 1, 1, "", "slice"], [293, 1, 1, "", "sort"], [294, 1, 1, "", "sum"], [295, 1, 1, "", "tail"], [296, 1, 1, "", "take"], [297, 1, 1, "", "to_struct"], [298, 1, 1, "", "unique"]], "polars.Expr.bin": [[300, 1, 1, "", "contains"], [301, 1, 1, "", "decode"], [302, 1, 1, "", "encode"], [303, 1, 1, "", "ends_with"], [304, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[307, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[325, 1, 1, "", "cast_time_unit"], [326, 1, 1, "", "combine"], [327, 1, 1, "", "convert_time_zone"], [328, 1, 1, "", "date"], [329, 1, 1, "", "datetime"], [330, 1, 1, "", "day"], [331, 1, 1, "", "days"], [332, 1, 1, "", "epoch"], [333, 1, 1, "", "hour"], [334, 1, 1, "", "hours"], [335, 1, 1, "", "is_leap_year"], [336, 1, 1, "", "iso_year"], [337, 1, 1, "", "microsecond"], [338, 1, 1, "", "microseconds"], [339, 1, 1, "", "millisecond"], [340, 1, 1, "", "milliseconds"], [341, 1, 1, "", "minute"], [342, 1, 1, "", "minutes"], [343, 1, 1, "", "month"], [344, 1, 1, "", "nanosecond"], [345, 1, 1, "", "nanoseconds"], [346, 1, 1, "", "offset_by"], [347, 1, 1, "", "ordinal_day"], [348, 1, 1, "", "quarter"], [349, 1, 1, "", "replace_time_zone"], [350, 1, 1, "", "round"], [351, 1, 1, "", "second"], [352, 1, 1, "", "seconds"], [353, 1, 1, "", "strftime"], [354, 1, 1, "", "time"], [355, 1, 1, "", "timestamp"], [356, 1, 1, "", "truncate"], [357, 1, 1, "", "week"], [358, 1, 1, "", "weekday"], [359, 1, 1, "", "with_time_unit"], [360, 1, 1, "", "year"]], "polars.Expr.meta": [[414, 1, 1, "", "has_multiple_outputs"], [415, 1, 1, "", "is_regex_projection"], [416, 1, 1, "", "output_name"], [417, 1, 1, "", "pop"], [418, 1, 1, "", "root_names"], [419, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[470, 1, 1, "", "concat"], [471, 1, 1, "", "contains"], [472, 1, 1, "", "count_match"], [473, 1, 1, "", "decode"], [474, 1, 1, "", "encode"], [475, 1, 1, "", "ends_with"], [476, 1, 1, "", "explode"], [477, 1, 1, "", "extract"], [478, 1, 1, "", "extract_all"], [479, 1, 1, "", "json_extract"], [480, 1, 1, "", "json_path_match"], [481, 1, 1, "", "lengths"], [482, 1, 1, "", "ljust"], [483, 1, 1, "", "lstrip"], [484, 1, 1, "", "n_chars"], [485, 1, 1, "", "parse_int"], [486, 1, 1, "", "replace"], [487, 1, 1, "", "replace_all"], [488, 1, 1, "", "rjust"], [489, 1, 1, "", "rstrip"], [490, 1, 1, "", "slice"], [491, 1, 1, "", "split"], [492, 1, 1, "", "split_exact"], [493, 1, 1, "", "splitn"], [494, 1, 1, "", "starts_with"], [495, 1, 1, "", "strip"], [496, 1, 1, "", "strptime"], [497, 1, 1, "", "to_lowercase"], [498, 1, 1, "", "to_uppercase"], [499, 1, 1, "", "zfill"]], "polars.Expr.struct": [[500, 1, 1, "", "field"], [501, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[588, 1, 1, "", "bottom_k"], [589, 1, 1, "", "cache"], [590, 1, 1, "", "clear"], [591, 1, 1, "", "clone"], [592, 1, 1, "", "collect"], [593, 2, 1, "", "columns"], [594, 1, 1, "", "drop"], [595, 1, 1, "", "drop_nulls"], [596, 2, 1, "", "dtypes"], [597, 1, 1, "", "explain"], [598, 1, 1, "", "explode"], [599, 1, 1, "", "fetch"], [600, 1, 1, "", "fill_nan"], [601, 1, 1, "", "fill_null"], [602, 1, 1, "", "filter"], [603, 1, 1, "", "first"], [604, 1, 1, "", "from_json"], [605, 1, 1, "", "groupby"], [606, 1, 1, "", "groupby_dynamic"], [607, 1, 1, "", "groupby_rolling"], [608, 1, 1, "", "head"], [609, 1, 1, "", "inspect"], [610, 1, 1, "", "interpolate"], [611, 1, 1, "", "join"], [612, 1, 1, "", "join_asof"], [613, 1, 1, "", "last"], [614, 1, 1, "", "lazy"], [615, 1, 1, "", "limit"], [616, 1, 1, "", "map"], [617, 1, 1, "", "max"], [618, 1, 1, "", "mean"], [619, 1, 1, "", "median"], [620, 1, 1, "", "melt"], [621, 1, 1, "", "merge_sorted"], [622, 1, 1, "", "min"], [623, 1, 1, "", "pipe"], [624, 1, 1, "", "profile"], [625, 1, 1, "", "quantile"], [626, 1, 1, "", "read_json"], [627, 1, 1, "", "rename"], [628, 1, 1, "", "reverse"], [629, 2, 1, "", "schema"], [630, 1, 1, "", "select"], [631, 1, 1, "", "shift"], [632, 1, 1, "", "shift_and_fill"], [633, 1, 1, "", "show_graph"], [634, 1, 1, "", "sink_ipc"], [635, 1, 1, "", "sink_parquet"], [636, 1, 1, "", "slice"], [637, 1, 1, "", "sort"], [638, 1, 1, "", "std"], [639, 1, 1, "", "sum"], [640, 1, 1, "", "tail"], [641, 1, 1, "", "take_every"], [642, 1, 1, "", "top_k"], [643, 1, 1, "", "unique"], [644, 1, 1, "", "unnest"], [645, 1, 1, "", "update"], [646, 1, 1, "", "var"], [647, 2, 1, "", "width"], [648, 1, 1, "", "with_columns"], [649, 1, 1, "", "with_context"], [650, 1, 1, "", "with_row_count"], [651, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"]], "polars.Series": [[674, 1, 1, "", "abs"], [675, 1, 1, "", "alias"], [676, 1, 1, "", "all"], [677, 1, 1, "", "any"], [678, 1, 1, "", "append"], [679, 1, 1, "", "apply"], [680, 1, 1, "", "arccos"], [681, 1, 1, "", "arccosh"], [682, 1, 1, "", "arcsin"], [683, 1, 1, "", "arcsinh"], [684, 1, 1, "", "arctan"], [685, 1, 1, "", "arctanh"], [686, 1, 1, "", "arg_max"], [687, 1, 1, "", "arg_min"], [688, 1, 1, "", "arg_sort"], [689, 1, 1, "", "arg_true"], [690, 1, 1, "", "arg_unique"], [691, 3, 1, "", "arr"], [723, 1, 1, "", "bottom_k"], [724, 1, 1, "", "cast"], [725, 3, 1, "", "cat"], [727, 1, 1, "", "ceil"], [728, 1, 1, "", "chunk_lengths"], [729, 1, 1, "", "clear"], [730, 1, 1, "", "clip"], [731, 1, 1, "", "clip_max"], [732, 1, 1, "", "clip_min"], [733, 1, 1, "", "clone"], [734, 1, 1, "", "cos"], [735, 1, 1, "", "cosh"], [736, 1, 1, "", "cummax"], [737, 1, 1, "", "cummin"], [738, 1, 1, "", "cumprod"], [739, 1, 1, "", "cumsum"], [740, 1, 1, "", "cumulative_eval"], [741, 1, 1, "", "cut"], [742, 1, 1, "", "describe"], [743, 1, 1, "", "diff"], [744, 1, 1, "", "dot"], [745, 1, 1, "", "drop_nans"], [746, 1, 1, "", "drop_nulls"], [747, 3, 1, "", "dt"], [788, 3, 1, "", "dtype"], [789, 1, 1, "", "entropy"], [790, 1, 1, "", "estimated_size"], [791, 1, 1, "", "ewm_mean"], [792, 1, 1, "", "ewm_std"], [793, 1, 1, "", "ewm_var"], [794, 1, 1, "", "exp"], [795, 1, 1, "", "explode"], [796, 1, 1, "", "extend_constant"], [797, 1, 1, "", "fill_nan"], [798, 1, 1, "", "fill_null"], [799, 1, 1, "", "filter"], [800, 3, 1, "", "flags"], [801, 1, 1, "", "floor"], [802, 1, 1, "", "get_chunks"], [803, 1, 1, "", "has_validity"], [804, 1, 1, "", "hash"], [805, 1, 1, "", "head"], [806, 1, 1, "", "hist"], [807, 1, 1, "", "implode"], [808, 3, 1, "", "inner_dtype"], [809, 1, 1, "", "interpolate"], [810, 1, 1, "", "is_between"], [811, 1, 1, "", "is_boolean"], [812, 1, 1, "", "is_duplicated"], [813, 1, 1, "", "is_empty"], [814, 1, 1, "", "is_finite"], [815, 1, 1, "", "is_first"], [816, 1, 1, "", "is_float"], [817, 1, 1, "", "is_in"], [818, 1, 1, "", "is_infinite"], [819, 1, 1, "", "is_integer"], [820, 1, 1, "", "is_nan"], [821, 1, 1, "", "is_not_nan"], [822, 1, 1, "", "is_not_null"], [823, 1, 1, "", "is_null"], [824, 1, 1, "", "is_numeric"], [825, 1, 1, "", "is_sorted"], [826, 1, 1, "", "is_temporal"], [827, 1, 1, "", "is_unique"], [828, 1, 1, "", "is_utf8"], [829, 1, 1, "", "item"], [830, 1, 1, "", "kurtosis"], [831, 1, 1, "", "len"], [832, 1, 1, "", "limit"], [833, 1, 1, "", "log"], [834, 1, 1, "", "log10"], [835, 1, 1, "", "log1p"], [836, 1, 1, "", "lower_bound"], [837, 1, 1, "", "map_dict"], [838, 1, 1, "", "max"], [839, 1, 1, "", "mean"], [840, 1, 1, "", "median"], [841, 1, 1, "", "min"], [842, 1, 1, "", "mode"], [843, 1, 1, "", "n_chunks"], [844, 1, 1, "", "n_unique"], [845, 3, 1, "", "name"], [846, 1, 1, "", "nan_max"], [847, 1, 1, "", "nan_min"], [848, 1, 1, "", "new_from_index"], [849, 1, 1, "", "null_count"], [850, 1, 1, "", "pct_change"], [851, 1, 1, "", "peak_max"], [852, 1, 1, "", "peak_min"], [853, 1, 1, "", "product"], [854, 1, 1, "", "qcut"], [855, 1, 1, "", "quantile"], [856, 1, 1, "", "rank"], [857, 1, 1, "", "rechunk"], [858, 1, 1, "", "reinterpret"], [859, 1, 1, "", "rename"], [860, 1, 1, "", "reshape"], [861, 1, 1, "", "reverse"], [862, 1, 1, "", "rolling_apply"], [863, 1, 1, "", "rolling_max"], [864, 1, 1, "", "rolling_mean"], [865, 1, 1, "", "rolling_median"], [866, 1, 1, "", "rolling_min"], [867, 1, 1, "", "rolling_quantile"], [868, 1, 1, "", "rolling_skew"], [869, 1, 1, "", "rolling_std"], [870, 1, 1, "", "rolling_sum"], [871, 1, 1, "", "rolling_var"], [872, 1, 1, "", "round"], [873, 1, 1, "", "sample"], [874, 1, 1, "", "search_sorted"], [875, 1, 1, "", "series_equal"], [876, 1, 1, "", "set"], [877, 1, 1, "", "set_at_idx"], [878, 1, 1, "", "set_sorted"], [879, 3, 1, "", "shape"], [880, 1, 1, "", "shift"], [881, 1, 1, "", "shift_and_fill"], [882, 1, 1, "", "shrink_dtype"], [883, 1, 1, "", "shrink_to_fit"], [884, 1, 1, "", "shuffle"], [885, 1, 1, "", "sign"], [886, 1, 1, "", "sin"], [887, 1, 1, "", "sinh"], [888, 1, 1, "", "skew"], [889, 1, 1, "", "slice"], [890, 1, 1, "", "sort"], [891, 1, 1, "", "sqrt"], [892, 1, 1, "", "std"], [893, 3, 1, "", "str"], [928, 1, 1, "", "sum"], [929, 1, 1, "", "tail"], [930, 1, 1, "", "take"], [931, 1, 1, "", "take_every"], [932, 1, 1, "", "tan"], [933, 1, 1, "", "tanh"], [934, 3, 1, "", "time_unit"], [935, 1, 1, "", "to_arrow"], [936, 1, 1, "", "to_dummies"], [937, 1, 1, "", "to_frame"], [938, 1, 1, "", "to_init_repr"], [939, 1, 1, "", "to_list"], [940, 1, 1, "", "to_numpy"], [941, 1, 1, "", "to_pandas"], [942, 1, 1, "", "to_physical"], [943, 1, 1, "", "top_k"], [944, 1, 1, "", "unique"], [945, 1, 1, "", "unique_counts"], [946, 1, 1, "", "upper_bound"], [947, 1, 1, "", "value_counts"], [948, 1, 1, "", "var"], [949, 1, 1, "", "view"], [950, 1, 1, "", "zip_with"]], "polars.Series.arr": [[692, 1, 1, "", "arg_max"], [693, 1, 1, "", "arg_min"], [694, 1, 1, "", "concat"], [695, 1, 1, "", "contains"], [696, 1, 1, "", "count_match"], [697, 1, 1, "", "diff"], [698, 1, 1, "", "eval"], [699, 1, 1, "", "explode"], [700, 1, 1, "", "first"], [701, 1, 1, "", "get"], [702, 1, 1, "", "head"], [703, 1, 1, "", "join"], [704, 1, 1, "", "last"], [705, 1, 1, "", "lengths"], [706, 1, 1, "", "max"], [707, 1, 1, "", "mean"], [708, 1, 1, "", "min"], [709, 1, 1, "", "reverse"], [710, 1, 1, "", "shift"], [711, 1, 1, "", "slice"], [712, 1, 1, "", "sort"], [713, 1, 1, "", "sum"], [714, 1, 1, "", "tail"], [715, 1, 1, "", "take"], [716, 1, 1, "", "to_struct"], [717, 1, 1, "", "unique"]], "polars.Series.bin": [[718, 1, 1, "", "contains"], [719, 1, 1, "", "decode"], [720, 1, 1, "", "encode"], [721, 1, 1, "", "ends_with"], [722, 1, 1, "", "starts_with"]], "polars.Series.cat": [[726, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[748, 1, 1, "", "cast_time_unit"], [749, 1, 1, "", "combine"], [750, 1, 1, "", "convert_time_zone"], [751, 1, 1, "", "date"], [752, 1, 1, "", "datetime"], [753, 1, 1, "", "day"], [754, 1, 1, "", "days"], [755, 1, 1, "", "epoch"], [756, 1, 1, "", "hour"], [757, 1, 1, "", "hours"], [758, 1, 1, "", "is_leap_year"], [759, 1, 1, "", "iso_year"], [760, 1, 1, "", "max"], [761, 1, 1, "", "mean"], [762, 1, 1, "", "median"], [763, 1, 1, "", "microsecond"], [764, 1, 1, "", "microseconds"], [765, 1, 1, "", "millisecond"], [766, 1, 1, "", "milliseconds"], [767, 1, 1, "", "min"], [768, 1, 1, "", "minute"], [769, 1, 1, "", "minutes"], [770, 1, 1, "", "month"], [771, 1, 1, "", "nanosecond"], [772, 1, 1, "", "nanoseconds"], [773, 1, 1, "", "offset_by"], [774, 1, 1, "", "ordinal_day"], [775, 1, 1, "", "quarter"], [776, 1, 1, "", "replace_time_zone"], [777, 1, 1, "", "round"], [778, 1, 1, "", "second"], [779, 1, 1, "", "seconds"], [780, 1, 1, "", "strftime"], [781, 1, 1, "", "time"], [782, 1, 1, "", "timestamp"], [783, 1, 1, "", "truncate"], [784, 1, 1, "", "week"], [785, 1, 1, "", "weekday"], [786, 1, 1, "", "with_time_unit"], [787, 1, 1, "", "year"]], "polars.Series.str": [[894, 1, 1, "", "concat"], [895, 1, 1, "", "contains"], [896, 1, 1, "", "count_match"], [897, 1, 1, "", "decode"], [898, 1, 1, "", "encode"], [899, 1, 1, "", "ends_with"], [900, 1, 1, "", "explode"], [901, 1, 1, "", "extract"], [902, 1, 1, "", "extract_all"], [903, 1, 1, "", "json_extract"], [904, 1, 1, "", "json_path_match"], [905, 1, 1, "", "lengths"], [906, 1, 1, "", "ljust"], [907, 1, 1, "", "lstrip"], [908, 1, 1, "", "n_chars"], [909, 1, 1, "", "parse_int"], [910, 1, 1, "", "replace"], [911, 1, 1, "", "replace_all"], [912, 1, 1, "", "rjust"], [913, 1, 1, "", "rstrip"], [914, 1, 1, "", "slice"], [915, 1, 1, "", "split"], [916, 1, 1, "", "split_exact"], [917, 1, 1, "", "splitn"], [918, 1, 1, "", "starts_with"], [919, 1, 1, "", "strip"], [920, 1, 1, "", "strptime"], [921, 1, 1, "", "to_lowercase"], [922, 1, 1, "", "to_uppercase"], [923, 1, 1, "", "zfill"]], "polars.Series.struct": [[924, 1, 1, "", "field"], [925, 3, 1, "", "fields"], [926, 1, 1, "", "rename_fields"], [927, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.Struct": [[52, 1, 1, "", "__init__"]], "polars.Time": [[53, 1, 1, "", "__init__"]], "polars.UInt16": [[54, 1, 1, "", "__init__"]], "polars.UInt32": [[55, 1, 1, "", "__init__"]], "polars.UInt64": [[56, 1, 1, "", "__init__"]], "polars.UInt8": [[57, 1, 1, "", "__init__"]], "polars.Unknown": [[58, 1, 1, "", "__init__"]], "polars.Utf8": [[59, 1, 1, "", "__init__"]], "polars.api": [[61, 4, 1, "", "register_dataframe_namespace"], [62, 4, 1, "", "register_expr_namespace"], [63, 4, 1, "", "register_lazyframe_namespace"], [64, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[225, 1, 1, "", "__iter__"], [226, 1, 1, "", "agg"], [227, 1, 1, "", "all"], [228, 1, 1, "", "apply"], [229, 1, 1, "", "count"], [230, 1, 1, "", "first"], [231, 1, 1, "", "head"], [232, 1, 1, "", "last"], [233, 1, 1, "", "max"], [234, 1, 1, "", "mean"], [235, 1, 1, "", "median"], [236, 1, 1, "", "min"], [237, 1, 1, "", "n_unique"], [238, 1, 1, "", "quantile"], [239, 1, 1, "", "sum"], [240, 1, 1, "", "tail"]], "polars.exceptions": [[72, 5, 1, "", "ArrowError"], [73, 5, 1, "", "ColumnNotFoundError"], [74, 5, 1, "", "ComputeError"], [75, 5, 1, "", "DuplicateError"], [76, 5, 1, "", "InvalidOperationError"], [77, 5, 1, "", "NoDataError"], [78, 5, 1, "", "NoRowsReturnedError"], [79, 5, 1, "", "PolarsPanicError"], [80, 5, 1, "", "RowsError"], [81, 5, 1, "", "SchemaError"], [82, 5, 1, "", "SchemaFieldNotFoundError"], [83, 5, 1, "", "ShapeError"], [84, 5, 1, "", "StructFieldNotFoundError"], [85, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[96, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[652, 1, 1, "", "agg"], [653, 1, 1, "", "all"], [654, 1, 1, "", "apply"], [655, 1, 1, "", "count"], [656, 1, 1, "", "first"], [657, 1, 1, "", "head"], [658, 1, 1, "", "last"], [659, 1, 1, "", "max"], [660, 1, 1, "", "mean"], [661, 1, 1, "", "median"], [662, 1, 1, "", "min"], [663, 1, 1, "", "n_unique"], [664, 1, 1, "", "quantile"], [665, 1, 1, "", "sum"], [666, 1, 1, "", "tail"]], "polars.testing": [[117, 4, 1, "", "assert_frame_equal"], [118, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[119, 0, 1, "", "column"], [120, 4, 1, "", "columns"], [121, 4, 1, "", "dataframes"], [122, 4, 1, "", "series"]], "polars.testing.parametric.column": [[119, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 141], "api": [1, 61, 62, 63, 64, 585], "provid": 1, "new": 1, "function": [1, 573, 584], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950], "binari": [2, 568, 579, 952], "boolean": [3, 569, 953], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125], "activate_decim": 5, "load": [6, 125], "restore_default": 7, "save": [8, 125], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 125], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 651], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 328, 537, 751], "datetim": [36, 329, 538, 752], "decim": 37, "durat": [38, 539], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 548, 575, 959], "null": 46, "object": 47, "sqlcontext": [48, 49, 50], "execut": 48, "queri": 49, "regist": 50, "stringcach": [51, 584], "struct": [52, 500, 501, 563, 581, 924, 925, 926, 927, 963], "time": [53, 354, 781], "uint16": 54, "uint32": 55, "uint64": 56, "uint8": 57, "unknown": 58, "utf8": 59, "align_fram": 60, "register_dataframe_namespac": 61, "register_expr_namespac": 62, "register_lazyframe_namespac": 63, "register_series_namespac": 64, "arg_wher": 65, "build_info": 66, "collect_al": 67, "concat": [68, 275, 470, 694, 894], "cut": [69, 741], "date_rang": 70, "enable_string_cach": 71, "except": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 250], "arrowerror": 72, "columnnotfounderror": 73, "computeerror": 74, "duplicateerror": 75, "invalidoperationerror": 76, "nodataerror": 77, "norowsreturnederror": 78, "polarspanicerror": 79, "rowserror": 80, "schemaerror": 81, "schemafieldnotfounderror": 82, "shapeerror": 83, "structfieldnotfounderror": 84, "toomanyrowsreturnederror": 85, "from_arrow": 86, "from_datafram": 87, "from_dict": [88, 89], "from_numpi": 90, "from_panda": 91, "from_record": 92, "from_repr": 93, "get_dummi": 94, "get_index_typ": 95, "io": 96, "csv": [96, 586], "batched_read": 96, "batchedcsvread": [96, 586], "next_batch": 96, "ones": 97, "read_avro": 98, "read_csv": 99, "read_csv_batch": 100, "read_databas": 101, "read_delta": 102, "read_excel": 103, "read_ipc": 104, "read_ipc_schema": 105, "read_json": [106, 626], "read_ndjson": 107, "read_parquet": 108, "read_parquet_schema": 109, "scan_csv": 110, "scan_delta": 111, "scan_ipc": 112, "scan_ndjson": 113, "scan_parquet": 114, "scan_pyarrow_dataset": 115, "show_vers": 116, "test": [117, 118, 119, 120, 121, 122, 966], "assert_frame_equ": 117, "assert_series_equ": 118, "parametr": [119, 120, 121, 122], "column": [119, 120, 132, 571, 593], "seri": [122, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 958], "threadpool_s": 123, "zero": 124, "option": 125, "current": 125, "us": 125, "context": 125, "manag": 125, "aggreg": [126, 251, 587, 673], "__dataframe__": 127, "appli": [128, 228, 260, 522, 654, 679], "bottom_k": [129, 305, 588, 723], "clear": [130, 590, 729], "clone": [131, 591, 733], "corr": [133, 531], "describ": [134, 742], "drop": [135, 594], "drop_in_plac": 136, "drop_nul": [137, 324, 595, 746], "dtype": [138, 596, 788], "estimated_s": [139, 790], "explod": [140, 280, 368, 476, 598, 699, 795, 900], "fill_nan": [142, 370, 600, 797], "fill_nul": [143, 371, 601, 798], "filter": [144, 372, 602, 799], "find_idx_by_nam": 145, "fold": [146, 543], "frame_equ": 147, "get_column": [148, 149], "glimps": 150, "groupbi": [151, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 605, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669], "groupby_dynam": [152, 606], "groupby_rol": [153, 607], "hash_row": 154, "head": [155, 231, 283, 381, 547, 608, 657, 702, 805], "height": 156, "hstack": 157, "insert_at_idx": 158, "interpol": [159, 384, 610, 809], "is_dupl": [160, 386, 812], "is_empti": [161, 813], "is_uniqu": [162, 396, 827], "item": [163, 829], "iter_row": 164, "iter_slic": 165, "join": [166, 284, 611, 703], "join_asof": [167, 612], "lazi": [168, 584, 614], "limit": [169, 402, 615, 832], "max": [170, 233, 287, 411, 551, 617, 659, 706, 760, 838], "mean": [171, 234, 288, 412, 552, 618, 660, 707, 761, 839], "median": [172, 235, 413, 553, 619, 661, 762, 840], "melt": [173, 620], "merge_sort": [174, 621], "min": [175, 236, 289, 420, 554, 622, 662, 708, 767, 841], "n_chunk": [176, 843], "n_uniqu": [177, 237, 424, 555, 663, 844], "null_count": [178, 428, 849], "partition_bi": 179, "pipe": [180, 432, 623], "pivot": 181, "product": [182, 435, 853], "quantil": [183, 238, 436, 557, 625, 664, 855], "rechunk": [184, 438, 857], "renam": [185, 627, 859], "replac": [186, 486, 910], "replace_at_idx": 187, "revers": [188, 290, 442, 628, 709, 861], "row": [189, 190], "sampl": [191, 454, 873], "schema": [192, 629], "select": [193, 248, 560, 578, 630, 672, 961], "shape": [194, 879], "shift": [195, 291, 457, 631, 710, 880], "shift_and_fil": [196, 458, 632, 881], "shrink_to_fit": [197, 883], "slice": [198, 292, 465, 490, 636, 711, 889, 914], "sort": [199, 293, 466, 637, 712, 890], "std": [200, 469, 562, 638, 892], "sum": [201, 239, 294, 504, 564, 639, 665, 713, 928], "tail": [202, 240, 295, 505, 565, 640, 666, 714, 929], "take_everi": [203, 507, 641, 931], "to_arrow": [204, 935], "to_dict": [205, 206], "to_dummi": [207, 936], "to_init_repr": [208, 938], "to_numpi": [209, 940], "to_panda": [210, 941], "to_seri": 211, "to_struct": [212, 297, 716], "top_k": [213, 511, 642, 943], "transpos": 214, "uniqu": [215, 298, 513, 643, 717, 944], "unnest": [216, 644, 927], "unstack": 217, "updat": [218, 645], "upsampl": 219, "var": [220, 517, 566, 646, 948], "vstack": 221, "width": [222, 647], "with_column": [223, 648], "with_row_count": [224, 650], "__iter__": 225, "agg": [226, 652], "all": [227, 256, 520, 653, 676], "count": [229, 314, 532, 655], "first": [230, 281, 373, 542, 603, 656, 700], "last": [232, 285, 399, 613, 658, 704], "attribut": [241, 667, 951], "comput": [242, 572, 955], "descript": [243, 668, 956], "export": [244, 957], "miscellan": [247, 577, 584, 671, 960], "manipul": [248, 578, 672, 961], "data": 249, "type": 249, "numer": [249, 579], "tempor": [249, 582, 964], "nest": 249, "other": 249, "expr": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519], "ab": [252, 674], "add": 253, "agg_group": 254, "alia": [255, 675], "and_": 257, "ani": [258, 521, 677], "append": [259, 678], "approx_uniqu": [261, 523], "arcco": [262, 680], "arccosh": [263, 681], "arcsin": [264, 682], "arcsinh": [265, 683], "arctan": [266, 684], "arctanh": [267, 685], "arg_max": [268, 273, 686, 692], "arg_min": [269, 274, 687, 693], "arg_sort": [270, 688], "arg_tru": [271, 689], "arg_uniqu": [272, 690], "arr": [273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717], "contain": [276, 300, 471, 695, 718, 895], "count_match": [277, 472, 696, 896], "diff": [278, 321, 697, 743], "eval": [279, 698], "get": [282, 701], "length": [286, 481, 705, 905], "take": [296, 506, 715, 930], "backward_fil": 299, "bin": [300, 301, 302, 303, 304, 718, 719, 720, 721, 722], "decod": [301, 473, 719, 897], "encod": [302, 474, 720, 898], "ends_with": [303, 475, 721, 899], "starts_with": [304, 494, 722, 918], "cast": [306, 724], "cat": [307, 725, 726], "set_ord": [307, 726], "ceil": [308, 727], "clip": [309, 730], "clip_max": [310, 731], "clip_min": [311, 732], "co": [312, 734], "cosh": [313, 735], "cumcount": 315, "cummax": [316, 736], "cummin": [317, 737], "cumprod": [318, 738], "cumsum": [319, 536, 739], "cumulative_ev": [320, 740], "dot": [322, 744], "drop_nan": [323, 745], "dt": [325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787], "cast_time_unit": [325, 748], "combin": [326, 749], "convert_time_zon": [327, 750], "dai": [330, 331, 753, 754], "epoch": [332, 755], "hour": [333, 334, 756, 757], "is_leap_year": [335, 758], "iso_year": [336, 759], "microsecond": [337, 338, 763, 764], "millisecond": [339, 340, 765, 766], "minut": [341, 342, 768, 769], "month": [343, 770], "nanosecond": [344, 345, 771, 772], "offset_bi": [346, 773], "ordinal_dai": [347, 774], "quarter": [348, 775], "replace_time_zon": [349, 776], "round": [350, 453, 777, 872], "second": [351, 352, 778, 779], "strftime": [353, 780], "timestamp": [355, 782], "truncat": [356, 783], "week": [357, 784], "weekdai": [358, 785], "with_time_unit": [359, 786], "year": [360, 787], "entropi": [361, 789], "eq": 362, "ewm_mean": [363, 791], "ewm_std": [364, 792], "ewm_var": [365, 793], "exclud": [366, 541], "exp": [367, 794], "extend_const": [369, 796], "flatten": 374, "floor": [375, 801], "floordiv": 376, "forward_fil": 377, "ge": 378, "gt": 379, "hash": [380, 804], "implod": [382, 807], "inspect": [383, 609], "is_between": [385, 810], "is_finit": [387, 814], "is_first": [388, 815], "is_in": [389, 817], "is_infinit": [390, 818], "is_nan": [391, 820], "is_not": 392, "is_not_nan": [393, 821], "is_not_nul": [394, 822], "is_nul": [395, 823], "keep_nam": 397, "kurtosi": [398, 830], "le": 400, "len": [401, 831], "log": [403, 833], "log10": [404, 834], "log1p": [405, 835], "lower_bound": [406, 836], "lt": 407, "map": [408, 550, 616], "map_alia": 409, "map_dict": [410, 837], "meta": [414, 415, 416, 417, 418, 419, 576], "has_multiple_output": 414, "is_regex_project": 415, "output_nam": 416, "pop": 417, "root_nam": 418, "undo_alias": 419, "mod": 421, "mode": [422, 842], "mul": 423, "nan_max": [425, 846], "nan_min": [426, 847], "ne": 427, "or_": 429, "over": 430, "pct_chang": [431, 850], "pow": 433, "prefix": 434, "rank": [437, 856], "reinterpret": [439, 858], "repeat_bi": 440, "reshap": [441, 860], "rolling_appli": [443, 862], "rolling_max": [444, 863], "rolling_mean": [445, 864], "rolling_median": [446, 865], "rolling_min": [447, 866], "rolling_quantil": [448, 867], "rolling_skew": [449, 868], "rolling_std": [450, 869], "rolling_sum": [451, 870], "rolling_var": [452, 871], "search_sort": [455, 874], "set_sort": [456, 878], "shrink_dtyp": [459, 882], "shuffl": [460, 884], "sign": [461, 885], "sin": [462, 886], "sinh": [463, 887], "skew": [464, 888], "sort_bi": 467, "sqrt": [468, 891], "str": [470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923], "extract": [477, 901], "extract_al": [478, 902], "json_extract": [479, 903], "json_path_match": [480, 904], "ljust": [482, 906], "lstrip": [483, 907], "n_char": [484, 908], "parse_int": [485, 909], "replace_al": [487, 911], "rjust": [488, 912], "rstrip": [489, 913], "split": [491, 915], "split_exact": [492, 916], "splitn": [493, 917], "strip": [495, 919], "strptime": [496, 920], "to_lowercas": [497, 921], "to_uppercas": [498, 922], "zfill": [499, 923], "field": [500, 924, 925], "rename_field": [501, 926], "sub": 502, "suffix": 503, "tan": [508, 932], "tanh": [509, 933], "to_phys": [510, 942], "truediv": 512, "unique_count": [514, 945], "upper_bound": [515, 946], "value_count": [516, 947], "where": 518, "xor": 519, "arang": 524, "arg_sort_bi": 525, "avg": 526, "coalesc": 527, "col": 528, "concat_list": 529, "concat_str": 530, "cov": 533, "cumfold": 534, "cumreduc": 535, "element": 540, "format": 544, "from_epoch": 545, "group": 546, "lit": 549, "pearson_corr": 556, "reduc": 558, "repeat": 559, "spearman_rank_corr": 561, "when": 567, "categori": [570, 954], "name": [571, 845], "express": 574, "oper": 579, "conjunct": 579, "comparison": 579, "string": [580, 962], "window": 583, "convers": 584, "eager": 584, "parallel": 584, "refer": 585, "input": 586, "output": 586, "feather": 586, "ipc": 586, "parquet": 586, "databas": 586, "json": 586, "avro": 586, "excel": 586, "delta": 586, "lake": 586, "dataset": 586, "lazyfram": [588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670], "cach": 589, "collect": 592, "explain": 597, "fetch": 599, "from_json": 604, "profil": 624, "show_graph": 633, "sink_ipc": 634, "sink_parquet": 635, "with_context": 649, "lazygroupbi": [652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666], "read": 671, "write": 671, "logic": 671, "plan": 671, "chunk_length": 728, "flag": 800, "get_chunk": 802, "has_valid": 803, "hist": 806, "inner_dtyp": 808, "is_boolean": 811, "is_float": 816, "is_integ": 819, "is_numer": 824, "is_sort": 825, "is_tempor": 826, "is_utf8": 828, "new_from_index": 848, "peak_max": 851, "peak_min": 852, "qcut": 854, "series_equ": 875, "set": 876, "set_at_idx": 877, "time_unit": 934, "to_fram": 937, "to_list": 939, "view": 949, "zip_with": 950, "sql": 965, "method": 965, "assert": 966, "properti": 966, "base": 966, "strategi": 966, "helper": 966, "util": 967}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.api.register_series_namespace": [[64, "polars-api-register-series-namespace"]], "polars.UInt32": [[55, "polars-uint32"]], "polars.Unknown": [[58, "polars-unknown"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.Binary": [[2, "polars-binary"]], "polars.build_info": [[66, "polars-build-info"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.UInt8": [[57, "polars-uint8"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.Null": [[46, "polars-null"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.Object": [[47, "polars-object"]], "polars.arg_where": [[65, "polars-arg-where"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Utf8": [[59, "polars-utf8"]], "polars.api.register_expr_namespace": [[62, "polars-api-register-expr-namespace"]], "polars.Int32": [[42, "polars-int32"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Float32": [[39, "polars-float32"]], "polars.Date": [[35, "polars-date"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.Struct": [[52, "polars-struct"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.Float64": [[40, "polars-float64"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.Int8": [[44, "polars-int8"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Duration": [[38, "polars-duration"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Int64": [[43, "polars-int64"]], "polars.UInt64": [[56, "polars-uint64"]], "polars.api.register_lazyframe_namespace": [[63, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.List": [[45, "polars-list"]], "polars.api.register_dataframe_namespace": [[61, "polars-api-register-dataframe-namespace"]], "polars.Time": [[53, "polars-time"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.Int16": [[41, "polars-int16"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.concat": [[68, "polars-concat"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataType": [[34, "polars-datatype"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.StringCache": [[51, "polars-stringcache"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.collect_all": [[67, "polars-collect-all"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.UInt16": [[54, "polars-uint16"]], "polars.align_frames": [[60, "polars-align-frames"]], "polars.read_database": [[101, "polars-read-database"]], "polars.testing.parametric.series": [[122, "polars-testing-parametric-series"]], "polars.zeros": [[124, "polars-zeros"]], "polars.DataFrame.drop_in_place": [[136, "polars-dataframe-drop-in-place"]], "polars.exceptions.ColumnNotFoundError": [[73, "polars-exceptions-columnnotfounderror"]], "polars.read_ndjson": [[107, "polars-read-ndjson"]], "polars.show_versions": [[116, "polars-show-versions"]], "polars.read_csv": [[99, "polars-read-csv"]], "polars.from_dict": [[88, "polars-from-dict"]], "polars.DataFrame.__dataframe__": [[127, "polars-dataframe-dataframe"]], "polars.DataFrame.columns": [[132, "polars-dataframe-columns"]], "polars.exceptions.NoRowsReturnedError": [[78, "polars-exceptions-norowsreturnederror"]], "polars.from_pandas": [[91, "polars-from-pandas"]], "polars.scan_csv": [[110, "polars-scan-csv"]], "polars.from_records": [[92, "polars-from-records"]], "polars.scan_pyarrow_dataset": [[115, "polars-scan-pyarrow-dataset"]], "polars.scan_ndjson": [[113, "polars-scan-ndjson"]], "polars.get_dummies": [[94, "polars-get-dummies"]], "polars.testing.parametric.columns": [[120, "polars-testing-parametric-columns"]], "polars.exceptions.ShapeError": [[83, "polars-exceptions-shapeerror"]], "polars.read_ipc_schema": [[105, "polars-read-ipc-schema"]], "polars.scan_parquet": [[114, "polars-scan-parquet"]], "polars.exceptions.TooManyRowsReturnedError": [[85, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_dicts": [[89, "polars-from-dicts"]], "polars.scan_delta": [[111, "polars-scan-delta"]], "polars.exceptions.ComputeError": [[74, "polars-exceptions-computeerror"]], "polars.from_numpy": [[90, "polars-from-numpy"]], "polars.testing.parametric.column": [[119, "polars-testing-parametric-column"]], "Config": [[125, "config"]], "Config options": [[125, "config-options"]], "Config load, save, and current state": [[125, "config-load-save-and-current-state"]], "Use as a context manager": [[125, "use-as-a-context-manager"]], "polars.from_dataframe": [[87, "polars-from-dataframe"]], "polars.read_avro": [[98, "polars-read-avro"]], "polars.date_range": [[70, "polars-date-range"]], "polars.exceptions.ArrowError": [[72, "polars-exceptions-arrowerror"]], "polars.read_json": [[106, "polars-read-json"]], "polars.testing.assert_frame_equal": [[117, "polars-testing-assert-frame-equal"]], "polars.read_csv_batched": [[100, "polars-read-csv-batched"]], "polars.from_repr": [[93, "polars-from-repr"]], "polars.read_ipc": [[104, "polars-read-ipc"]], "polars.testing.parametric.dataframes": [[121, "polars-testing-parametric-dataframes"]], "polars.ones": [[97, "polars-ones"]], "polars.DataFrame.clone": [[131, "polars-dataframe-clone"]], "polars.read_parquet_schema": [[109, "polars-read-parquet-schema"]], "polars.read_parquet": [[108, "polars-read-parquet"]], "polars.exceptions.RowsError": [[80, "polars-exceptions-rowserror"]], "polars.enable_string_cache": [[71, "polars-enable-string-cache"]], "polars.scan_ipc": [[112, "polars-scan-ipc"]], "polars.threadpool_size": [[123, "polars-threadpool-size"]], "polars.read_excel": [[103, "polars-read-excel"]], "polars.cut": [[69, "polars-cut"]], "polars.DataFrame.corr": [[133, "polars-dataframe-corr"]], "polars.exceptions.InvalidOperationError": [[76, "polars-exceptions-invalidoperationerror"]], "polars.get_index_type": [[95, "polars-get-index-type"]], "polars.exceptions.PolarsPanicError": [[79, "polars-exceptions-polarspanicerror"]], "polars.exceptions.SchemaError": [[81, "polars-exceptions-schemaerror"]], "Aggregation": [[126, "aggregation"], [673, "aggregation"], [587, "aggregation"], [251, "aggregation"]], "polars.read_delta": [[102, "polars-read-delta"]], "polars.exceptions.DuplicateError": [[75, "polars-exceptions-duplicateerror"]], "polars.exceptions.StructFieldNotFoundError": [[84, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.bottom_k": [[129, "polars-dataframe-bottom-k"]], "polars.exceptions.SchemaFieldNotFoundError": [[82, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.NoDataError": [[77, "polars-exceptions-nodataerror"]], "polars.DataFrame.clear": [[130, "polars-dataframe-clear"]], "polars.DataFrame.drop_nulls": [[137, "polars-dataframe-drop-nulls"]], "polars.DataFrame.drop": [[135, "polars-dataframe-drop"]], "polars.DataFrame.describe": [[134, "polars-dataframe-describe"]], "polars.testing.assert_series_equal": [[118, "polars-testing-assert-series-equal"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[96, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.DataFrame.apply": [[128, "polars-dataframe-apply"]], "polars.from_arrow": [[86, "polars-from-arrow"]], "Utils": [[967, "utils"]], "Testing": [[966, "testing"]], "Asserts": [[966, "asserts"]], "Property-based testing": [[966, "property-based-testing"]], "Strategies": [[966, "strategies"]], "Strategy helpers": [[966, "strategy-helpers"]], "polars.Series.skew": [[888, "polars-series-skew"]], "polars.Series.n_unique": [[844, "polars-series-n-unique"]], "polars.Series.reverse": [[861, "polars-series-reverse"]], "polars.Series.set_sorted": [[878, "polars-series-set-sorted"]], "polars.Series.max": [[838, "polars-series-max"]], "polars.Series.log": [[833, "polars-series-log"]], "polars.Series.log10": [[834, "polars-series-log10"]], "polars.Series.qcut": [[854, "polars-series-qcut"]], "polars.Series.null_count": [[849, "polars-series-null-count"]], "polars.Series.set": [[876, "polars-series-set"]], "polars.Series.is_utf8": [[828, "polars-series-is-utf8"]], "polars.Series.log1p": [[835, "polars-series-log1p"]], "polars.Series.quantile": [[855, "polars-series-quantile"]], "polars.Series.mode": [[842, "polars-series-mode"]], "polars.Series.kurtosis": [[830, "polars-series-kurtosis"]], "polars.Series.limit": [[832, "polars-series-limit"]], "polars.Series.set_at_idx": [[877, "polars-series-set-at-idx"]], "polars.Series.rolling_max": [[863, "polars-series-rolling-max"]], "polars.Series.reinterpret": [[858, "polars-series-reinterpret"]], "polars.Series.peak_max": [[851, "polars-series-peak-max"]], "polars.Series.rolling_var": [[871, "polars-series-rolling-var"]], "polars.Series.nan_max": [[846, "polars-series-nan-max"]], "polars.Series.rolling_apply": [[862, "polars-series-rolling-apply"]], "polars.Series.str.concat": [[894, "polars-series-str-concat"]], "polars.Series.item": [[829, "polars-series-item"]], "polars.Series.search_sorted": [[874, "polars-series-search-sorted"]], "polars.Series.product": [[853, "polars-series-product"]], "polars.Series.mean": [[839, "polars-series-mean"]], "polars.Series.shrink_dtype": [[882, "polars-series-shrink-dtype"]], "polars.Series.slice": [[889, "polars-series-slice"]], "polars.Series.rechunk": [[857, "polars-series-rechunk"]], "polars.Series.min": [[841, "polars-series-min"]], "polars.Series.lower_bound": [[836, "polars-series-lower-bound"]], "polars.Series.shrink_to_fit": [[883, "polars-series-shrink-to-fit"]], "polars.Series.shift_and_fill": [[881, "polars-series-shift-and-fill"]], "polars.Series.std": [[892, "polars-series-std"]], "polars.Series.str.contains": [[895, "polars-series-str-contains"]], "polars.Series.rolling_mean": [[864, "polars-series-rolling-mean"]], "polars.Series.sort": [[890, "polars-series-sort"]], "polars.Series.rename": [[859, "polars-series-rename"]], "polars.Series.round": [[872, "polars-series-round"]], "polars.Series.sample": [[873, "polars-series-sample"]], "polars.Series.sinh": [[887, "polars-series-sinh"]], "polars.Series.rolling_skew": [[868, "polars-series-rolling-skew"]], "polars.Series.sin": [[886, "polars-series-sin"]], "polars.Series.str.count_match": [[896, "polars-series-str-count-match"]], "polars.Series.rank": [[856, "polars-series-rank"]], "polars.Series.peak_min": [[852, "polars-series-peak-min"]], "polars.Series.rolling_median": [[865, "polars-series-rolling-median"]], "polars.Series.str": [[893, "polars-series-str"]], "polars.Series.sqrt": [[891, "polars-series-sqrt"]], "polars.Series.shift": [[880, "polars-series-shift"]], "polars.Series.rolling_quantile": [[867, "polars-series-rolling-quantile"]], "polars.Series.nan_min": [[847, "polars-series-nan-min"]], "polars.Series.rolling_min": [[866, "polars-series-rolling-min"]], "polars.Series.series_equal": [[875, "polars-series-series-equal"]], "polars.Series.reshape": [[860, "polars-series-reshape"]], "polars.Series.name": [[845, "polars-series-name"]], "polars.Series.pct_change": [[850, "polars-series-pct-change"]], "polars.Series.sign": [[885, "polars-series-sign"]], "polars.Series.median": [[840, "polars-series-median"]], "polars.Series.new_from_index": [[848, "polars-series-new-from-index"]], "polars.Series.shape": [[879, "polars-series-shape"]], "polars.Series.rolling_sum": [[870, "polars-series-rolling-sum"]], "polars.Series.n_chunks": [[843, "polars-series-n-chunks"]], "polars.Series.len": [[831, "polars-series-len"]], "polars.Series.shuffle": [[884, "polars-series-shuffle"]], "polars.Series.map_dict": [[837, "polars-series-map-dict"]], "polars.Series.rolling_std": [[869, "polars-series-rolling-std"]], "polars.Series.dtype": [[788, "polars-series-dtype"]], "polars.Series.dt.truncate": [[783, "polars-series-dt-truncate"]], "polars.Series.fill_null": [[798, "polars-series-fill-null"]], "polars.Series.dt.iso_year": [[759, "polars-series-dt-iso-year"]], "polars.Series.dt.microsecond": [[763, "polars-series-dt-microsecond"]], "polars.Series.is_boolean": [[811, "polars-series-is-boolean"]], "polars.Series.has_validity": [[803, "polars-series-has-validity"]], "polars.Series.dt.milliseconds": [[766, "polars-series-dt-milliseconds"]], "polars.Series.is_float": [[816, "polars-series-is-float"]], "polars.Series.ewm_std": [[792, "polars-series-ewm-std"]], "polars.Series.dt.millisecond": [[765, "polars-series-dt-millisecond"]], "polars.Series.is_first": [[815, "polars-series-is-first"]], "polars.Series.is_not_null": [[822, "polars-series-is-not-null"]], "polars.Series.dt.second": [[778, "polars-series-dt-second"]], "polars.Series.fill_nan": [[797, "polars-series-fill-nan"]], "polars.Series.dt.mean": [[761, "polars-series-dt-mean"]], "polars.Series.flags": [[800, "polars-series-flags"]], "polars.Series.is_empty": [[813, "polars-series-is-empty"]], "polars.Series.dt.median": [[762, "polars-series-dt-median"]], "polars.Series.ewm_var": [[793, "polars-series-ewm-var"]], "polars.Series.is_integer": [[819, "polars-series-is-integer"]], "polars.Series.is_nan": [[820, "polars-series-is-nan"]], "polars.Series.dt.replace_time_zone": [[776, "polars-series-dt-replace-time-zone"]], "polars.Series.hash": [[804, "polars-series-hash"]], "polars.Series.explode": [[795, "polars-series-explode"]], "polars.Series.is_numeric": [[824, "polars-series-is-numeric"]], "polars.Series.dt.year": [[787, "polars-series-dt-year"]], "polars.Series.dt.ordinal_day": [[774, "polars-series-dt-ordinal-day"]], "polars.Series.implode": [[807, "polars-series-implode"]], "polars.Series.dt.strftime": [[780, "polars-series-dt-strftime"]], "polars.Series.dt.microseconds": [[764, "polars-series-dt-microseconds"]], "polars.Series.entropy": [[789, "polars-series-entropy"]], "polars.Series.dt.round": [[777, "polars-series-dt-round"]], "polars.Series.hist": [[806, "polars-series-hist"]], "polars.Series.is_infinite": [[818, "polars-series-is-infinite"]], "polars.Series.is_null": [[823, "polars-series-is-null"]], "polars.Series.dt.weekday": [[785, "polars-series-dt-weekday"]], "polars.Series.estimated_size": [[790, "polars-series-estimated-size"]], "polars.Series.is_between": [[810, "polars-series-is-between"]], "polars.Series.dt.seconds": [[779, "polars-series-dt-seconds"]], "polars.Series.dt.week": [[784, "polars-series-dt-week"]], "polars.Series.dt.with_time_unit": [[786, "polars-series-dt-with-time-unit"]], "polars.Series.head": [[805, "polars-series-head"]], "polars.Series.interpolate": [[809, "polars-series-interpolate"]], "polars.Series.floor": [[801, "polars-series-floor"]], "polars.Series.inner_dtype": [[808, "polars-series-inner-dtype"]], "polars.Series.is_duplicated": [[812, "polars-series-is-duplicated"]], "polars.Series.is_sorted": [[825, "polars-series-is-sorted"]], "polars.Series.is_finite": [[814, "polars-series-is-finite"]], "polars.Series.dt.timestamp": [[782, "polars-series-dt-timestamp"]], "polars.Series.filter": [[799, "polars-series-filter"]], "polars.Series.is_in": [[817, "polars-series-is-in"]], "polars.Series.extend_constant": [[796, "polars-series-extend-constant"]], "polars.Series.exp": [[794, "polars-series-exp"]], "polars.Series.dt.max": [[760, "polars-series-dt-max"]], "polars.Series.is_not_nan": [[821, "polars-series-is-not-nan"]], "polars.Series.dt.quarter": [[775, "polars-series-dt-quarter"]], "polars.Series.dt.time": [[781, "polars-series-dt-time"]], "polars.Series.dt.minute": [[768, "polars-series-dt-minute"]], "polars.Series.is_unique": [[827, "polars-series-is-unique"]], "polars.Series.dt.nanosecond": [[771, "polars-series-dt-nanosecond"]], "polars.Series.is_temporal": [[826, "polars-series-is-temporal"]], "polars.Series.dt.nanoseconds": [[772, "polars-series-dt-nanoseconds"]], "polars.Series.dt.month": [[770, "polars-series-dt-month"]], "polars.Series.dt.offset_by": [[773, "polars-series-dt-offset-by"]], "polars.Series.ewm_mean": [[791, "polars-series-ewm-mean"]], "polars.Series.dt.min": [[767, "polars-series-dt-min"]], "polars.Series.dt.minutes": [[769, "polars-series-dt-minutes"]], "polars.Series.get_chunks": [[802, "polars-series-get-chunks"]], "polars.Series.cosh": [[735, "polars-series-cosh"]], "polars.Series.arr.eval": [[698, "polars-series-arr-eval"]], "polars.Series.cat": [[725, "polars-series-cat"]], "polars.Series.arr.to_struct": [[716, "polars-series-arr-to-struct"]], "polars.Series.arr.mean": [[707, "polars-series-arr-mean"]], "polars.Series.dot": [[744, "polars-series-dot"]], "polars.Series.cut": [[741, "polars-series-cut"]], "polars.Series.arr.take": [[715, "polars-series-arr-take"]], "polars.Series.clip": [[730, "polars-series-clip"]], "polars.Series.arr.count_match": [[696, "polars-series-arr-count-match"]], "polars.Series.arr": [[691, "polars-series-arr"]], "polars.Series.dt.hour": [[756, "polars-series-dt-hour"]], "polars.Series.arr.unique": [[717, "polars-series-arr-unique"]], "polars.Series.describe": [[742, "polars-series-describe"]], "polars.Series.dt.days": [[754, "polars-series-dt-days"]], "polars.Series.cos": [[734, "polars-series-cos"]], "polars.Series.bin.decode": [[719, "polars-series-bin-decode"]], "polars.Series.arr.join": [[703, "polars-series-arr-join"]], "polars.Series.dt.is_leap_year": [[758, "polars-series-dt-is-leap-year"]], "polars.Series.arr.reverse": [[709, "polars-series-arr-reverse"]], "polars.Series.dt.cast_time_unit": [[748, "polars-series-dt-cast-time-unit"]], "polars.Series.arr.first": [[700, "polars-series-arr-first"]], "polars.Series.dt.datetime": [[752, "polars-series-dt-datetime"]], "polars.Series.arr.head": [[702, "polars-series-arr-head"]], "polars.Series.diff": [[743, "polars-series-diff"]], "polars.Series.cummin": [[737, "polars-series-cummin"]], "polars.Series.arr.sort": [[712, "polars-series-arr-sort"]], "polars.Series.arr.min": [[708, "polars-series-arr-min"]], "polars.Series.ceil": [[727, "polars-series-ceil"]], "polars.Series.bin.contains": [[718, "polars-series-bin-contains"]], "polars.Series.drop_nans": [[745, "polars-series-drop-nans"]], "polars.Series.dt": [[747, "polars-series-dt"]], "polars.Series.dt.date": [[751, "polars-series-dt-date"]], "polars.Series.arr.arg_max": [[692, "polars-series-arr-arg-max"]], "polars.Series.clear": [[729, "polars-series-clear"]], "polars.Series.clip_min": [[732, "polars-series-clip-min"]], "polars.Series.arr.shift": [[710, "polars-series-arr-shift"]], "polars.Series.cummax": [[736, "polars-series-cummax"]], "polars.Series.clone": [[733, "polars-series-clone"]], "polars.Series.dt.hours": [[757, "polars-series-dt-hours"]], "polars.Series.bottom_k": [[723, "polars-series-bottom-k"]], "polars.Series.arr.get": [[701, "polars-series-arr-get"]], "polars.Series.arr.arg_min": [[693, "polars-series-arr-arg-min"]], "polars.Series.bin.ends_with": [[721, "polars-series-bin-ends-with"]], "polars.Series.dt.combine": [[749, "polars-series-dt-combine"]], "polars.Series.arg_unique": [[690, "polars-series-arg-unique"]], "polars.Series.arr.concat": [[694, "polars-series-arr-concat"]], "polars.Series.cast": [[724, "polars-series-cast"]], "polars.Series.chunk_lengths": [[728, "polars-series-chunk-lengths"]], "polars.Series.cumprod": [[738, "polars-series-cumprod"]], "polars.Series.arr.slice": [[711, "polars-series-arr-slice"]], "polars.Series.drop_nulls": [[746, "polars-series-drop-nulls"]], "polars.Series.clip_max": [[731, "polars-series-clip-max"]], "polars.Series.arr.sum": [[713, "polars-series-arr-sum"]], "polars.Series.arr.diff": [[697, "polars-series-arr-diff"]], "polars.Series.cat.set_ordering": [[726, "polars-series-cat-set-ordering"]], "polars.Series.bin.starts_with": [[722, "polars-series-bin-starts-with"]], "polars.Series.arr.tail": [[714, "polars-series-arr-tail"]], "polars.Series.dt.convert_time_zone": [[750, "polars-series-dt-convert-time-zone"]], "polars.Series.bin.encode": [[720, "polars-series-bin-encode"]], "polars.Series.cumsum": [[739, "polars-series-cumsum"]], "polars.Series.arr.contains": [[695, "polars-series-arr-contains"]], "polars.Series.arr.explode": [[699, "polars-series-arr-explode"]], "polars.Series.arr.last": [[704, "polars-series-arr-last"]], "polars.Series.arr.lengths": [[705, "polars-series-arr-lengths"]], "polars.Series.dt.epoch": [[755, "polars-series-dt-epoch"]], "polars.Series.cumulative_eval": [[740, "polars-series-cumulative-eval"]], "polars.Series.dt.day": [[753, "polars-series-dt-day"]], "polars.Series.arr.max": [[706, "polars-series-arr-max"]], "polars.Series.str.split_exact": [[916, "polars-series-str-split-exact"]], "polars.Series.to_pandas": [[941, "polars-series-to-pandas"]], "Export": [[957, "export"], [244, "export"]], "polars.Series.str.parse_int": [[909, "polars-series-str-parse-int"]], "Temporal": [[964, "temporal"], [582, "temporal"], [249, "temporal"]], "polars.Series.str.splitn": [[917, "polars-series-str-splitn"]], "polars.Series.str.decode": [[897, "polars-series-str-decode"]], "polars.Series.str.extract": [[901, "polars-series-str-extract"]], "polars.Series.zip_with": [[950, "polars-series-zip-with"]], "SQL": [[965, "sql"]], "Methods": [[965, "methods"]], "polars.Series.tanh": [[933, "polars-series-tanh"]], "polars.Series.str.lengths": [[905, "polars-series-str-lengths"]], "polars.Series.to_frame": [[937, "polars-series-to-frame"]], "polars.Series.str.json_extract": [[903, "polars-series-str-json-extract"]], "polars.Series.str.replace": [[910, "polars-series-str-replace"]], "polars.Series.str.ljust": [[906, "polars-series-str-ljust"]], "polars.Series.sum": [[928, "polars-series-sum"]], "polars.Series.str.split": [[915, "polars-series-str-split"]], "Attributes": [[951, "attributes"], [667, "attributes"], [241, "attributes"]], "Struct": [[963, "struct"], [581, "struct"]], "polars.Series.struct.field": [[924, "polars-series-struct-field"]], "String": [[962, "string"], [580, "string"]], "polars.Series.str.json_path_match": [[904, "polars-series-str-json-path-match"]], "polars.Series.var": [[948, "polars-series-var"]], "polars.Series.str.strip": [[919, "polars-series-str-strip"]], "polars.Series.str.strptime": [[920, "polars-series-str-strptime"]], "polars.Series.str.to_uppercase": [[922, "polars-series-str-to-uppercase"]], "polars.Series.value_counts": [[947, "polars-series-value-counts"]], "Descriptive": [[956, "descriptive"], [668, "descriptive"], [243, "descriptive"]], "polars.Series.str.n_chars": [[908, "polars-series-str-n-chars"]], "polars.Series.time_unit": [[934, "polars-series-time-unit"]], "polars.Series.str.rstrip": [[913, "polars-series-str-rstrip"]], "polars.Series.str.to_lowercase": [[921, "polars-series-str-to-lowercase"]], "polars.Series.to_numpy": [[940, "polars-series-to-numpy"]], "polars.Series.str.slice": [[914, "polars-series-str-slice"]], "polars.Series.unique": [[944, "polars-series-unique"]], "polars.Series.str.explode": [[900, "polars-series-str-explode"]], "polars.Series.str.ends_with": [[899, "polars-series-str-ends-with"]], "polars.Series.top_k": [[943, "polars-series-top-k"]], "Binary": [[952, "binary"], [568, "binary"], [579, "binary"]], "Categories": [[954, "categories"], [570, "categories"]], "polars.Series.to_physical": [[942, "polars-series-to-physical"]], "polars.Series.tail": [[929, "polars-series-tail"]], "polars.Series.str.extract_all": [[902, "polars-series-str-extract-all"]], "polars.Series.str.rjust": [[912, "polars-series-str-rjust"]], "polars.Series.str.starts_with": [[918, "polars-series-str-starts-with"]], "polars.Series.upper_bound": [[946, "polars-series-upper-bound"]], "polars.Series.view": [[949, "polars-series-view"]], "Computation": [[955, "computation"], [572, "computation"], [242, "computation"]], "polars.Series.to_list": [[939, "polars-series-to-list"]], "Miscellaneous": [[960, "miscellaneous"], [671, "miscellaneous"], [577, "miscellaneous"], [584, "miscellaneous"], [247, "miscellaneous"]], "polars.Series.str.replace_all": [[911, "polars-series-str-replace-all"]], "Series": [[958, "series"]], "polars.Series.take": [[930, "polars-series-take"]], "polars.Series.struct.fields": [[925, "polars-series-struct-fields"]], "Boolean": [[953, "boolean"], [569, "boolean"]], "polars.Series.to_dummies": [[936, "polars-series-to-dummies"]], "polars.Series.take_every": [[931, "polars-series-take-every"]], "polars.Series.tan": [[932, "polars-series-tan"]], "polars.Series.to_init_repr": [[938, "polars-series-to-init-repr"]], "polars.Series.struct.rename_fields": [[926, "polars-series-struct-rename-fields"]], "polars.Series.str.encode": [[898, "polars-series-str-encode"]], "polars.Series.str.zfill": [[923, "polars-series-str-zfill"]], "polars.Series.struct.unnest": [[927, "polars-series-struct-unnest"]], "polars.Series.to_arrow": [[935, "polars-series-to-arrow"]], "polars.Series.unique_counts": [[945, "polars-series-unique-counts"]], "List": [[959, "list"], [575, "list"]], "Manipulation/selection": [[961, "manipulation-selection"], [672, "manipulation-selection"], [578, "manipulation-selection"], [248, "manipulation-selection"]], "polars.Series.str.lstrip": [[907, "polars-series-str-lstrip"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[665, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.shift": [[631, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[633, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sink_parquet": [[635, "polars-lazyframe-sink-parquet"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[657, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.with_row_count": [[650, "polars-lazyframe-with-row-count"]], "polars.Series.arccosh": [[681, "polars-series-arccosh"]], "polars.Series.all": [[676, "polars-series-all"]], "polars.Series.arctan": [[684, "polars-series-arctan"]], "polars.LazyFrame.var": [[646, "polars-lazyframe-var"]], "polars.LazyFrame.slice": [[636, "polars-lazyframe-slice"]], "polars.Series.arg_sort": [[688, "polars-series-arg-sort"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[660, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.append": [[678, "polars-series-append"]], "polars.LazyFrame.sort": [[637, "polars-lazyframe-sort"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[653, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.LazyFrame.select": [[630, "polars-lazyframe-select"]], "polars.LazyFrame.shift_and_fill": [[632, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.unique": [[643, "polars-lazyframe-unique"]], "polars.LazyFrame.pipe": [[623, "polars-lazyframe-pipe"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[662, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.min": [[622, "polars-lazyframe-min"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[666, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arcsin": [[682, "polars-series-arcsin"]], "polars.Series.arcsinh": [[683, "polars-series-arcsinh"]], "polars.Series.arg_min": [[687, "polars-series-arg-min"]], "polars.LazyFrame.sink_ipc": [[634, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.take_every": [[641, "polars-lazyframe-take-every"]], "polars.LazyFrame.width": [[647, "polars-lazyframe-width"]], "polars.LazyFrame.merge_sorted": [[621, "polars-lazyframe-merge-sorted"]], "polars.Series.alias": [[675, "polars-series-alias"]], "polars.Series.arg_true": [[689, "polars-series-arg-true"]], "polars.LazyFrame.read_json": [[626, "polars-lazyframe-read-json"]], "polars.LazyFrame.top_k": [[642, "polars-lazyframe-top-k"]], "polars.Series.any": [[677, "polars-series-any"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[659, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.LazyFrame.unnest": [[644, "polars-lazyframe-unnest"]], "polars.LazyFrame.sum": [[639, "polars-lazyframe-sum"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[655, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.Series.arctanh": [[685, "polars-series-arctanh"]], "polars.Series.abs": [[674, "polars-series-abs"]], "polars.Series.arccos": [[680, "polars-series-arccos"]], "polars.LazyFrame.reverse": [[628, "polars-lazyframe-reverse"]], "polars.LazyFrame.write_json": [[651, "polars-lazyframe-write-json"]], "polars.LazyFrame.profile": [[624, "polars-lazyframe-profile"]], "polars.LazyFrame.tail": [[640, "polars-lazyframe-tail"]], "polars.LazyFrame.with_columns": [[648, "polars-lazyframe-with-columns"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[658, "polars-lazyframe-groupby-lazygroupby-last"]], "Read/write logical plan": [[671, "read-write-logical-plan"]], "polars.Series.apply": [[679, "polars-series-apply"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[663, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.quantile": [[625, "polars-lazyframe-quantile"]], "polars.LazyFrame.update": [[645, "polars-lazyframe-update"]], "LazyFrame": [[670, "lazyframe"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[656, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[661, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[654, "polars-lazyframe-groupby-lazygroupby-apply"]], "GroupBy": [[669, "groupby"], [245, "groupby"]], "polars.LazyFrame.rename": [[627, "polars-lazyframe-rename"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[664, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.with_context": [[649, "polars-lazyframe-with-context"]], "polars.LazyFrame.std": [[638, "polars-lazyframe-std"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[652, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arg_max": [[686, "polars-series-arg-max"]], "polars.LazyFrame.schema": [[629, "polars-lazyframe-schema"]], "polars.first": [[542, "polars-first"]], "polars.count": [[532, "polars-count"]], "polars.Expr.str.to_lowercase": [[497, "polars-expr-str-to-lowercase"]], "polars.coalesce": [[527, "polars-coalesce"]], "polars.Expr.sub": [[502, "polars-expr-sub"]], "polars.Expr.str.split_exact": [[492, "polars-expr-str-split-exact"]], "polars.Expr.suffix": [[503, "polars-expr-suffix"]], "polars.Expr.tail": [[505, "polars-expr-tail"]], "polars.Expr.to_physical": [[510, "polars-expr-to-physical"]], "polars.Expr.struct.rename_fields": [[501, "polars-expr-struct-rename-fields"]], "polars.concat_list": [[529, "polars-concat-list"]], "polars.Expr.str.parse_int": [[485, "polars-expr-str-parse-int"]], "polars.Expr.str.starts_with": [[494, "polars-expr-str-starts-with"]], "polars.cumfold": [[534, "polars-cumfold"]], "polars.format": [[544, "polars-format"]], "polars.from_epoch": [[545, "polars-from-epoch"]], "polars.Expr.value_counts": [[516, "polars-expr-value-counts"]], "polars.max": [[551, "polars-max"]], "polars.Expr.upper_bound": [[515, "polars-expr-upper-bound"]], "polars.list": [[548, "polars-list"]], "polars.cumsum": [[536, "polars-cumsum"]], "polars.map": [[550, "polars-map"]], "polars.cov": [[533, "polars-cov"]], "polars.Expr.unique": [[513, "polars-expr-unique"]], "polars.any": [[521, "polars-any"]], "polars.Expr.unique_counts": [[514, "polars-expr-unique-counts"]], "polars.Expr.top_k": [[511, "polars-expr-top-k"]], "polars.col": [[528, "polars-col"]], "polars.Expr.str.to_uppercase": [[498, "polars-expr-str-to-uppercase"]], "polars.Expr.struct.field": [[500, "polars-expr-struct-field"]], "polars.Expr.str.replace": [[486, "polars-expr-str-replace"]], "polars.duration": [[539, "polars-duration"]], "polars.exclude": [[541, "polars-exclude"]], "polars.Expr.sum": [[504, "polars-expr-sum"]], "polars.Expr.str.rjust": [[488, "polars-expr-str-rjust"]], "polars.Expr.str.replace_all": [[487, "polars-expr-str-replace-all"]], "polars.Expr.str.strip": [[495, "polars-expr-str-strip"]], "polars.head": [[547, "polars-head"]], "polars.Expr.take": [[506, "polars-expr-take"]], "polars.Expr.tanh": [[509, "polars-expr-tanh"]], "polars.Expr.truediv": [[512, "polars-expr-truediv"]], "polars.corr": [[531, "polars-corr"]], "polars.Expr.str.lstrip": [[483, "polars-expr-str-lstrip"]], "polars.Expr.tan": [[508, "polars-expr-tan"]], "polars.Expr.str.split": [[491, "polars-expr-str-split"]], "polars.Expr.where": [[518, "polars-expr-where"]], "polars.lit": [[549, "polars-lit"]], "polars.date": [[537, "polars-date"]], "polars.Expr.str.slice": [[490, "polars-expr-str-slice"]], "polars.apply": [[522, "polars-apply"]], "polars.all": [[520, "polars-all"]], "polars.cumreduce": [[535, "polars-cumreduce"]], "polars.arg_sort_by": [[525, "polars-arg-sort-by"]], "polars.datetime": [[538, "polars-datetime"]], "polars.Expr.str.rstrip": [[489, "polars-expr-str-rstrip"]], "polars.Expr.str.strptime": [[496, "polars-expr-str-strptime"]], "polars.element": [[540, "polars-element"]], "polars.Expr.str.zfill": [[499, "polars-expr-str-zfill"]], "polars.Expr.str.n_chars": [[484, "polars-expr-str-n-chars"]], "polars.Expr.str.splitn": [[493, "polars-expr-str-splitn"]], "polars.avg": [[526, "polars-avg"]], "polars.approx_unique": [[523, "polars-approx-unique"]], "polars.arange": [[524, "polars-arange"]], "polars.concat_str": [[530, "polars-concat-str"]], "polars.Expr.take_every": [[507, "polars-expr-take-every"]], "polars.Expr.xor": [[519, "polars-expr-xor"]], "polars.groups": [[546, "polars-groups"]], "polars.Expr.var": [[517, "polars-expr-var"]], "polars.fold": [[543, "polars-fold"]], "polars.Expr.min": [[420, "polars-expr-min"]], "polars.Expr.slice": [[465, "polars-expr-slice"]], "polars.Expr.shift": [[457, "polars-expr-shift"]], "polars.Expr.reverse": [[442, "polars-expr-reverse"]], "polars.Expr.reinterpret": [[439, "polars-expr-reinterpret"]], "polars.Expr.search_sorted": [[455, "polars-expr-search-sorted"]], "polars.Expr.mod": [[421, "polars-expr-mod"]], "polars.Expr.shuffle": [[460, "polars-expr-shuffle"]], "polars.Expr.rolling_sum": [[451, "polars-expr-rolling-sum"]], "polars.Expr.str.explode": [[476, "polars-expr-str-explode"]], "polars.Expr.nan_max": [[425, "polars-expr-nan-max"]], "polars.Expr.meta.root_names": [[418, "polars-expr-meta-root-names"]], "polars.Expr.repeat_by": [[440, "polars-expr-repeat-by"]], "polars.Expr.str.ljust": [[482, "polars-expr-str-ljust"]], "polars.Expr.pow": [[433, "polars-expr-pow"]], "polars.Expr.rank": [[437, "polars-expr-rank"]], "polars.Expr.prefix": [[434, "polars-expr-prefix"]], "polars.Expr.str.concat": [[470, "polars-expr-str-concat"]], "polars.Expr.str.json_extract": [[479, "polars-expr-str-json-extract"]], "polars.Expr.mul": [[423, "polars-expr-mul"]], "polars.Expr.sin": [[462, "polars-expr-sin"]], "polars.Expr.null_count": [[428, "polars-expr-null-count"]], "polars.Expr.round": [[453, "polars-expr-round"]], "polars.Expr.shift_and_fill": [[458, "polars-expr-shift-and-fill"]], "polars.Expr.n_unique": [[424, "polars-expr-n-unique"]], "polars.Expr.str.json_path_match": [[480, "polars-expr-str-json-path-match"]], "polars.Expr.str.contains": [[471, "polars-expr-str-contains"]], "polars.Expr.str.decode": [[473, "polars-expr-str-decode"]], "polars.Expr.over": [[430, "polars-expr-over"]], "polars.Expr.str.count_match": [[472, "polars-expr-str-count-match"]], "polars.Expr.str.lengths": [[481, "polars-expr-str-lengths"]], "polars.Expr.pct_change": [[431, "polars-expr-pct-change"]], "polars.Expr.meta.undo_aliases": [[419, "polars-expr-meta-undo-aliases"]], "polars.Expr.rolling_std": [[450, "polars-expr-rolling-std"]], "polars.Expr.meta.is_regex_projection": [[415, "polars-expr-meta-is-regex-projection"]], "polars.Expr.ne": [[427, "polars-expr-ne"]], "polars.Expr.reshape": [[441, "polars-expr-reshape"]], "polars.Expr.nan_min": [[426, "polars-expr-nan-min"]], "polars.Expr.rolling_min": [[447, "polars-expr-rolling-min"]], "polars.Expr.skew": [[464, "polars-expr-skew"]], "polars.Expr.rolling_median": [[446, "polars-expr-rolling-median"]], "polars.Expr.sort": [[466, "polars-expr-sort"]], "polars.Expr.sqrt": [[468, "polars-expr-sqrt"]], "polars.Expr.quantile": [[436, "polars-expr-quantile"]], "polars.Expr.sign": [[461, "polars-expr-sign"]], "polars.Expr.rolling_var": [[452, "polars-expr-rolling-var"]], "polars.Expr.sort_by": [[467, "polars-expr-sort-by"]], "polars.Expr.str.extract": [[477, "polars-expr-str-extract"]], "polars.Expr.or_": [[429, "polars-expr-or"]], "polars.Expr.mode": [[422, "polars-expr-mode"]], "polars.Expr.shrink_dtype": [[459, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_apply": [[443, "polars-expr-rolling-apply"]], "polars.Expr.meta.output_name": [[416, "polars-expr-meta-output-name"]], "polars.Expr.meta.pop": [[417, "polars-expr-meta-pop"]], "polars.Expr.rechunk": [[438, "polars-expr-rechunk"]], "polars.Expr.meta.has_multiple_outputs": [[414, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.rolling_mean": [[445, "polars-expr-rolling-mean"]], "polars.Expr.rolling_quantile": [[448, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_skew": [[449, "polars-expr-rolling-skew"]], "polars.Expr.sample": [[454, "polars-expr-sample"]], "polars.Expr.sinh": [[463, "polars-expr-sinh"]], "polars.Expr.std": [[469, "polars-expr-std"]], "polars.Expr.str.encode": [[474, "polars-expr-str-encode"]], "polars.Expr.product": [[435, "polars-expr-product"]], "polars.Expr.str.extract_all": [[478, "polars-expr-str-extract-all"]], "polars.Expr.rolling_max": [[444, "polars-expr-rolling-max"]], "polars.Expr.str.ends_with": [[475, "polars-expr-str-ends-with"]], "polars.Expr.set_sorted": [[456, "polars-expr-set-sorted"]], "polars.Expr.pipe": [[432, "polars-expr-pipe"]], "polars.Expr.dt.strftime": [[353, "polars-expr-dt-strftime"]], "polars.Expr.le": [[400, "polars-expr-le"]], "polars.Expr.gt": [[379, "polars-expr-gt"]], "polars.Expr.explode": [[368, "polars-expr-explode"]], "polars.Expr.is_duplicated": [[386, "polars-expr-is-duplicated"]], "polars.Expr.ewm_mean": [[363, "polars-expr-ewm-mean"]], "polars.Expr.dt.ordinal_day": [[347, "polars-expr-dt-ordinal-day"]], "polars.Expr.keep_name": [[397, "polars-expr-keep-name"]], "polars.Expr.dt.timestamp": [[355, "polars-expr-dt-timestamp"]], "polars.Expr.mean": [[412, "polars-expr-mean"]], "polars.Expr.dt.truncate": [[356, "polars-expr-dt-truncate"]], "polars.Expr.head": [[381, "polars-expr-head"]], "polars.Expr.max": [[411, "polars-expr-max"]], "polars.Expr.filter": [[372, "polars-expr-filter"]], "polars.Expr.is_first": [[388, "polars-expr-is-first"]], "polars.Expr.is_not_nan": [[393, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[394, "polars-expr-is-not-null"]], "polars.Expr.floordiv": [[376, "polars-expr-floordiv"]], "polars.Expr.dt.time": [[354, "polars-expr-dt-time"]], "polars.Expr.interpolate": [[384, "polars-expr-interpolate"]], "polars.Expr.is_finite": [[387, "polars-expr-is-finite"]], "polars.Expr.dt.weekday": [[358, "polars-expr-dt-weekday"]], "polars.Expr.is_nan": [[391, "polars-expr-is-nan"]], "polars.Expr.ewm_std": [[364, "polars-expr-ewm-std"]], "polars.Expr.kurtosis": [[398, "polars-expr-kurtosis"]], "polars.Expr.dt.week": [[357, "polars-expr-dt-week"]], "polars.Expr.fill_nan": [[370, "polars-expr-fill-nan"]], "polars.Expr.eq": [[362, "polars-expr-eq"]], "polars.Expr.floor": [[375, "polars-expr-floor"]], "polars.Expr.is_in": [[389, "polars-expr-is-in"]], "polars.Expr.fill_null": [[371, "polars-expr-fill-null"]], "polars.Expr.map": [[408, "polars-expr-map"]], "polars.Expr.implode": [[382, "polars-expr-implode"]], "polars.Expr.dt.second": [[351, "polars-expr-dt-second"]], "polars.Expr.len": [[401, "polars-expr-len"]], "polars.Expr.lt": [[407, "polars-expr-lt"]], "polars.Expr.dt.nanoseconds": [[345, "polars-expr-dt-nanoseconds"]], "polars.Expr.map_alias": [[409, "polars-expr-map-alias"]], "polars.Expr.dt.replace_time_zone": [[349, "polars-expr-dt-replace-time-zone"]], "polars.Expr.is_infinite": [[390, "polars-expr-is-infinite"]], "polars.Expr.log10": [[404, "polars-expr-log10"]], "polars.Expr.entropy": [[361, "polars-expr-entropy"]], "polars.Expr.map_dict": [[410, "polars-expr-map-dict"]], "polars.Expr.exp": [[367, "polars-expr-exp"]], "polars.Expr.dt.seconds": [[352, "polars-expr-dt-seconds"]], "polars.Expr.exclude": [[366, "polars-expr-exclude"]], "polars.Expr.extend_constant": [[369, "polars-expr-extend-constant"]], "polars.Expr.log1p": [[405, "polars-expr-log1p"]], "polars.Expr.log": [[403, "polars-expr-log"]], "polars.Expr.dt.with_time_unit": [[359, "polars-expr-dt-with-time-unit"]], "polars.Expr.inspect": [[383, "polars-expr-inspect"]], "polars.Expr.forward_fill": [[377, "polars-expr-forward-fill"]], "polars.Expr.dt.round": [[350, "polars-expr-dt-round"]], "polars.Expr.dt.offset_by": [[346, "polars-expr-dt-offset-by"]], "polars.Expr.is_not": [[392, "polars-expr-is-not"]], "polars.Expr.is_null": [[395, "polars-expr-is-null"]], "polars.Expr.limit": [[402, "polars-expr-limit"]], "polars.Expr.first": [[373, "polars-expr-first"]], "polars.Expr.last": [[399, "polars-expr-last"]], "polars.Expr.lower_bound": [[406, "polars-expr-lower-bound"]], "polars.Expr.dt.year": [[360, "polars-expr-dt-year"]], "polars.Expr.median": [[413, "polars-expr-median"]], "polars.Expr.hash": [[380, "polars-expr-hash"]], "polars.Expr.dt.quarter": [[348, "polars-expr-dt-quarter"]], "polars.Expr.is_unique": [[396, "polars-expr-is-unique"]], "polars.Expr.is_between": [[385, "polars-expr-is-between"]], "polars.Expr.ge": [[378, "polars-expr-ge"]], "polars.Expr.flatten": [[374, "polars-expr-flatten"]], "polars.Expr.ewm_var": [[365, "polars-expr-ewm-var"]], "polars.Expr.arr.max": [[287, "polars-expr-arr-max"]], "polars.Expr.arr.sort": [[293, "polars-expr-arr-sort"]], "polars.Expr.arr.join": [[284, "polars-expr-arr-join"]], "polars.Expr.count": [[314, "polars-expr-count"]], "polars.Expr.arr.tail": [[295, "polars-expr-arr-tail"]], "polars.Expr.arr.reverse": [[290, "polars-expr-arr-reverse"]], "polars.Expr.arr.count_match": [[277, "polars-expr-arr-count-match"]], "polars.Expr.arr.mean": [[288, "polars-expr-arr-mean"]], "polars.Expr.dt.combine": [[326, "polars-expr-dt-combine"]], "polars.Expr.drop_nulls": [[324, "polars-expr-drop-nulls"]], "polars.Expr.dt.nanosecond": [[344, "polars-expr-dt-nanosecond"]], "polars.Expr.arr.min": [[289, "polars-expr-arr-min"]], "polars.Expr.ceil": [[308, "polars-expr-ceil"]], "polars.Expr.clip": [[309, "polars-expr-clip"]], "polars.Expr.dt.hours": [[334, "polars-expr-dt-hours"]], "polars.Expr.cumcount": [[315, "polars-expr-cumcount"]], "polars.Expr.cast": [[306, "polars-expr-cast"]], "polars.Expr.cat.set_ordering": [[307, "polars-expr-cat-set-ordering"]], "polars.Expr.dot": [[322, "polars-expr-dot"]], "polars.Expr.dt.datetime": [[329, "polars-expr-dt-datetime"]], "polars.Expr.diff": [[321, "polars-expr-diff"]], "polars.Expr.dt.minutes": [[342, "polars-expr-dt-minutes"]], "polars.Expr.arr.diff": [[278, "polars-expr-arr-diff"]], "polars.Expr.dt.month": [[343, "polars-expr-dt-month"]], "polars.Expr.dt.epoch": [[332, "polars-expr-dt-epoch"]], "polars.Expr.arr.eval": [[279, "polars-expr-arr-eval"]], "polars.Expr.dt.days": [[331, "polars-expr-dt-days"]], "polars.Expr.arr.first": [[281, "polars-expr-arr-first"]], "polars.Expr.arr.get": [[282, "polars-expr-arr-get"]], "polars.Expr.arr.unique": [[298, "polars-expr-arr-unique"]], "polars.Expr.dt.hour": [[333, "polars-expr-dt-hour"]], "polars.Expr.dt.cast_time_unit": [[325, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.day": [[330, "polars-expr-dt-day"]], "polars.Expr.dt.milliseconds": [[340, "polars-expr-dt-milliseconds"]], "polars.Expr.arr.explode": [[280, "polars-expr-arr-explode"]], "polars.Expr.dt.minute": [[341, "polars-expr-dt-minute"]], "polars.Expr.cumsum": [[319, "polars-expr-cumsum"]], "polars.Expr.arr.head": [[283, "polars-expr-arr-head"]], "polars.Expr.arr.sum": [[294, "polars-expr-arr-sum"]], "polars.Expr.arr.lengths": [[286, "polars-expr-arr-lengths"]], "polars.Expr.dt.date": [[328, "polars-expr-dt-date"]], "polars.Expr.cos": [[312, "polars-expr-cos"]], "polars.Expr.arr.slice": [[292, "polars-expr-arr-slice"]], "polars.Expr.arr.take": [[296, "polars-expr-arr-take"]], "polars.Expr.backward_fill": [[299, "polars-expr-backward-fill"]], "polars.Expr.arr.shift": [[291, "polars-expr-arr-shift"]], "polars.Expr.dt.iso_year": [[336, "polars-expr-dt-iso-year"]], "polars.Expr.bin.encode": [[302, "polars-expr-bin-encode"]], "polars.Expr.dt.millisecond": [[339, "polars-expr-dt-millisecond"]], "polars.Expr.bottom_k": [[305, "polars-expr-bottom-k"]], "polars.Expr.bin.contains": [[300, "polars-expr-bin-contains"]], "polars.Expr.clip_max": [[310, "polars-expr-clip-max"]], "polars.Expr.cummax": [[316, "polars-expr-cummax"]], "polars.Expr.cumprod": [[318, "polars-expr-cumprod"]], "polars.Expr.arr.contains": [[276, "polars-expr-arr-contains"]], "polars.Expr.arr.to_struct": [[297, "polars-expr-arr-to-struct"]], "polars.Expr.bin.decode": [[301, "polars-expr-bin-decode"]], "polars.Expr.cummin": [[317, "polars-expr-cummin"]], "polars.Expr.dt.is_leap_year": [[335, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.microsecond": [[337, "polars-expr-dt-microsecond"]], "polars.Expr.dt.microseconds": [[338, "polars-expr-dt-microseconds"]], "polars.Expr.bin.ends_with": [[303, "polars-expr-bin-ends-with"]], "polars.Expr.dt.convert_time_zone": [[327, "polars-expr-dt-convert-time-zone"]], "polars.Expr.cumulative_eval": [[320, "polars-expr-cumulative-eval"]], "polars.Expr.bin.starts_with": [[304, "polars-expr-bin-starts-with"]], "polars.Expr.clip_min": [[311, "polars-expr-clip-min"]], "polars.Expr.drop_nans": [[323, "polars-expr-drop-nans"]], "polars.Expr.cosh": [[313, "polars-expr-cosh"]], "polars.Expr.arr.last": [[285, "polars-expr-arr-last"]], "Input/output": [[586, "input-output"]], "CSV": [[586, "csv"]], "Feather/ IPC": [[586, "feather-ipc"]], "Parquet": [[586, "parquet"]], "Database": [[586, "database"]], "JSON": [[586, "json"]], "AVRO": [[586, "avro"]], "Excel": [[586, "excel"]], "Delta Lake": [[586, "delta-lake"]], "Datasets": [[586, "datasets"]], "BatchedCsvReader": [[586, "batchedcsvreader"]], "polars.LazyFrame.limit": [[615, "polars-lazyframe-limit"]], "polars.repeat": [[559, "polars-repeat"]], "polars.quantile": [[557, "polars-quantile"]], "polars.mean": [[552, "polars-mean"]], "polars.LazyFrame.dtypes": [[596, "polars-lazyframe-dtypes"]], "polars.LazyFrame.join": [[611, "polars-lazyframe-join"]], "polars.LazyFrame.lazy": [[614, "polars-lazyframe-lazy"]], "polars.LazyFrame.bottom_k": [[588, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.columns": [[593, "polars-lazyframe-columns"]], "polars.pearson_corr": [[556, "polars-pearson-corr"]], "polars.min": [[554, "polars-min"]], "polars.LazyFrame.fetch": [[599, "polars-lazyframe-fetch"]], "polars.LazyFrame.clone": [[591, "polars-lazyframe-clone"]], "polars.median": [[553, "polars-median"]], "polars.LazyFrame.fill_null": [[601, "polars-lazyframe-fill-null"]], "polars.sum": [[564, "polars-sum"]], "polars.LazyFrame.first": [[603, "polars-lazyframe-first"]], "polars.LazyFrame.median": [[619, "polars-lazyframe-median"]], "polars.LazyFrame.groupby_rolling": [[607, "polars-lazyframe-groupby-rolling"]], "Expressions": [[574, "expressions"]], "Window": [[583, "window"]], "polars.LazyFrame.explain": [[597, "polars-lazyframe-explain"]], "polars.LazyFrame.inspect": [[609, "polars-lazyframe-inspect"]], "polars.LazyFrame.from_json": [[604, "polars-lazyframe-from-json"]], "polars.LazyFrame.last": [[613, "polars-lazyframe-last"]], "polars.LazyFrame.collect": [[592, "polars-lazyframe-collect"]], "polars.var": [[566, "polars-var"]], "API reference": [[585, "api-reference"]], "polars.struct": [[563, "polars-struct"]], "Functions": [[573, "functions"], [584, "functions"]], "polars.n_unique": [[555, "polars-n-unique"]], "polars.LazyFrame.head": [[608, "polars-lazyframe-head"]], "polars.LazyFrame.map": [[616, "polars-lazyframe-map"]], "polars.spearman_rank_corr": [[561, "polars-spearman-rank-corr"]], "polars.when": [[567, "polars-when"]], "Operators": [[579, "operators"]], "Conjunction": [[579, "conjunction"]], "Comparison": [[579, "comparison"]], "Numeric": [[579, "numeric"], [249, "numeric"]], "polars.LazyFrame.interpolate": [[610, "polars-lazyframe-interpolate"]], "polars.LazyFrame.drop": [[594, "polars-lazyframe-drop"]], "polars.LazyFrame.explode": [[598, "polars-lazyframe-explode"]], "polars.LazyFrame.groupby_dynamic": [[606, "polars-lazyframe-groupby-dynamic"]], "polars.reduce": [[558, "polars-reduce"]], "polars.LazyFrame.max": [[617, "polars-lazyframe-max"]], "Conversion": [[584, "conversion"]], "Eager/Lazy functions": [[584, "eager-lazy-functions"]], "Parallelization": [[584, "parallelization"]], "StringCache": [[584, "stringcache"]], "polars.LazyFrame.mean": [[618, "polars-lazyframe-mean"]], "Meta": [[576, "meta"]], "polars.LazyFrame.cache": [[589, "polars-lazyframe-cache"]], "polars.tail": [[565, "polars-tail"]], "polars.LazyFrame.fill_nan": [[600, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.melt": [[620, "polars-lazyframe-melt"]], "polars.LazyFrame.drop_nulls": [[595, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.filter": [[602, "polars-lazyframe-filter"]], "polars.select": [[560, "polars-select"]], "polars.std": [[562, "polars-std"]], "polars.LazyFrame.groupby": [[605, "polars-lazyframe-groupby"]], "polars.LazyFrame.clear": [[590, "polars-lazyframe-clear"]], "polars.LazyFrame.join_asof": [[612, "polars-lazyframe-join-asof"]], "Columns / names": [[571, "columns-names"]], "polars.DataFrame.hstack": [[157, "polars-dataframe-hstack"]], "polars.DataFrame.quantile": [[183, "polars-dataframe-quantile"]], "polars.DataFrame.insert_at_idx": [[158, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.reverse": [[188, "polars-dataframe-reverse"]], "polars.DataFrame.estimated_size": [[139, "polars-dataframe-estimated-size"]], "polars.DataFrame.iter_slices": [[165, "polars-dataframe-iter-slices"]], "polars.DataFrame.std": [[200, "polars-dataframe-std"]], "polars.DataFrame.replace": [[186, "polars-dataframe-replace"]], "polars.DataFrame.row": [[189, "polars-dataframe-row"]], "polars.DataFrame.head": [[155, "polars-dataframe-head"]], "polars.DataFrame.find_idx_by_name": [[145, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.sort": [[199, "polars-dataframe-sort"]], "polars.DataFrame.is_unique": [[162, "polars-dataframe-is-unique"]], "polars.DataFrame.groupby": [[151, "polars-dataframe-groupby"]], "polars.DataFrame.fill_nan": [[142, "polars-dataframe-fill-nan"]], "polars.DataFrame.pivot": [[181, "polars-dataframe-pivot"]], "polars.DataFrame.groupby_dynamic": [[152, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.is_empty": [[161, "polars-dataframe-is-empty"]], "polars.DataFrame.join_asof": [[167, "polars-dataframe-join-asof"]], "polars.DataFrame.n_chunks": [[176, "polars-dataframe-n-chunks"]], "polars.DataFrame.fold": [[146, "polars-dataframe-fold"]], "polars.DataFrame.shrink_to_fit": [[197, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.n_unique": [[177, "polars-dataframe-n-unique"]], "polars.DataFrame.replace_at_idx": [[187, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.groupby_rolling": [[153, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.schema": [[192, "polars-dataframe-schema"]], "polars.DataFrame.to_dict": [[205, "polars-dataframe-to-dict"]], "polars.DataFrame.mean": [[171, "polars-dataframe-mean"]], "polars.DataFrame.sum": [[201, "polars-dataframe-sum"]], "polars.DataFrame.null_count": [[178, "polars-dataframe-null-count"]], "polars.DataFrame.sample": [[191, "polars-dataframe-sample"]], "polars.DataFrame.median": [[172, "polars-dataframe-median"]], "polars.DataFrame.min": [[175, "polars-dataframe-min"]], "polars.DataFrame.shift_and_fill": [[196, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.dtypes": [[138, "polars-dataframe-dtypes"]], "polars.DataFrame.fill_null": [[143, "polars-dataframe-fill-null"]], "polars.DataFrame.take_every": [[203, "polars-dataframe-take-every"]], "polars.DataFrame.glimpse": [[150, "polars-dataframe-glimpse"]], "polars.DataFrame.merge_sorted": [[174, "polars-dataframe-merge-sorted"]], "polars.DataFrame.get_column": [[148, "polars-dataframe-get-column"]], "polars.DataFrame.select": [[193, "polars-dataframe-select"]], "polars.DataFrame.iter_rows": [[164, "polars-dataframe-iter-rows"]], "polars.DataFrame.max": [[170, "polars-dataframe-max"]], "polars.DataFrame.partition_by": [[179, "polars-dataframe-partition-by"]], "polars.DataFrame.extend": [[141, "polars-dataframe-extend"]], "polars.DataFrame.height": [[156, "polars-dataframe-height"]], "polars.DataFrame.slice": [[198, "polars-dataframe-slice"]], "polars.DataFrame.join": [[166, "polars-dataframe-join"]], "polars.DataFrame.get_columns": [[149, "polars-dataframe-get-columns"]], "polars.DataFrame.to_arrow": [[204, "polars-dataframe-to-arrow"]], "polars.DataFrame.item": [[163, "polars-dataframe-item"]], "polars.DataFrame.interpolate": [[159, "polars-dataframe-interpolate"]], "polars.DataFrame.product": [[182, "polars-dataframe-product"]], "polars.DataFrame.tail": [[202, "polars-dataframe-tail"]], "polars.DataFrame.pipe": [[180, "polars-dataframe-pipe"]], "polars.DataFrame.rechunk": [[184, "polars-dataframe-rechunk"]], "polars.DataFrame.lazy": [[168, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[169, "polars-dataframe-limit"]], "polars.DataFrame.is_duplicated": [[160, "polars-dataframe-is-duplicated"]], "polars.DataFrame.hash_rows": [[154, "polars-dataframe-hash-rows"]], "polars.DataFrame.rows": [[190, "polars-dataframe-rows"]], "polars.DataFrame.shift": [[195, "polars-dataframe-shift"]], "polars.DataFrame.explode": [[140, "polars-dataframe-explode"]], "polars.DataFrame.frame_equal": [[147, "polars-dataframe-frame-equal"]], "polars.DataFrame.filter": [[144, "polars-dataframe-filter"]], "polars.DataFrame.rename": [[185, "polars-dataframe-rename"]], "polars.DataFrame.to_dicts": [[206, "polars-dataframe-to-dicts"]], "polars.DataFrame.shape": [[194, "polars-dataframe-shape"]], "polars.DataFrame.melt": [[173, "polars-dataframe-melt"]], "polars.dataframe.groupby.GroupBy.__iter__": [[225, "polars-dataframe-groupby-groupby-iter"]], "polars.DataFrame.width": [[222, "polars-dataframe-width"]], "polars.DataFrame.to_struct": [[212, "polars-dataframe-to-struct"]], "Data types": [[249, "data-types"]], "Nested": [[249, "nested"]], "Other": [[249, "other"]], "polars.Expr.agg_groups": [[254, "polars-expr-agg-groups"]], "polars.DataFrame.with_columns": [[223, "polars-dataframe-with-columns"]], "polars.Expr.abs": [[252, "polars-expr-abs"]], "polars.Expr.arcsin": [[264, "polars-expr-arcsin"]], "polars.Expr.arg_min": [[269, "polars-expr-arg-min"]], "polars.Expr.arr.concat": [[275, "polars-expr-arr-concat"]], "polars.dataframe.groupby.GroupBy.head": [[231, "polars-dataframe-groupby-groupby-head"]], "polars.Expr.arg_max": [[268, "polars-expr-arg-max"]], "polars.Expr.arg_true": [[271, "polars-expr-arg-true"]], "polars.dataframe.groupby.GroupBy.last": [[232, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.any": [[258, "polars-expr-any"]], "DataFrame": [[246, "dataframe"]], "polars.Expr.arcsinh": [[265, "polars-expr-arcsinh"]], "polars.dataframe.groupby.GroupBy.n_unique": [[237, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.var": [[220, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.all": [[227, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.arr.arg_max": [[273, "polars-expr-arr-arg-max"]], "polars.DataFrame.unstack": [[217, "polars-dataframe-unstack"]], "polars.Expr.arg_unique": [[272, "polars-expr-arg-unique"]], "polars.dataframe.groupby.GroupBy.first": [[230, "polars-dataframe-groupby-groupby-first"]], "polars.DataFrame.to_dummies": [[207, "polars-dataframe-to-dummies"]], "polars.Expr.and_": [[257, "polars-expr-and"]], "polars.Expr.approx_unique": [[261, "polars-expr-approx-unique"]], "polars.DataFrame.top_k": [[213, "polars-dataframe-top-k"]], "Exceptions": [[250, "exceptions"]], "polars.Expr.arr.arg_min": [[274, "polars-expr-arr-arg-min"]], "polars.Expr.add": [[253, "polars-expr-add"]], "polars.DataFrame.to_series": [[211, "polars-dataframe-to-series"]], "polars.dataframe.groupby.GroupBy.count": [[229, "polars-dataframe-groupby-groupby-count"]], "polars.dataframe.groupby.GroupBy.quantile": [[238, "polars-dataframe-groupby-groupby-quantile"]], "polars.DataFrame.unnest": [[216, "polars-dataframe-unnest"]], "polars.dataframe.groupby.GroupBy.tail": [[240, "polars-dataframe-groupby-groupby-tail"]], "polars.DataFrame.to_numpy": [[209, "polars-dataframe-to-numpy"]], "polars.dataframe.groupby.GroupBy.max": [[233, "polars-dataframe-groupby-groupby-max"]], "polars.DataFrame.to_init_repr": [[208, "polars-dataframe-to-init-repr"]], "polars.DataFrame.upsample": [[219, "polars-dataframe-upsample"]], "polars.DataFrame.vstack": [[221, "polars-dataframe-vstack"]], "polars.DataFrame.with_row_count": [[224, "polars-dataframe-with-row-count"]], "polars.Expr.apply": [[260, "polars-expr-apply"]], "polars.Expr.arctan": [[266, "polars-expr-arctan"]], "polars.dataframe.groupby.GroupBy.apply": [[228, "polars-dataframe-groupby-groupby-apply"]], "polars.dataframe.groupby.GroupBy.sum": [[239, "polars-dataframe-groupby-groupby-sum"]], "polars.DataFrame.unique": [[215, "polars-dataframe-unique"]], "polars.Expr.arg_sort": [[270, "polars-expr-arg-sort"]], "polars.dataframe.groupby.GroupBy.min": [[236, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.arctanh": [[267, "polars-expr-arctanh"]], "polars.Expr.arccosh": [[263, "polars-expr-arccosh"]], "polars.DataFrame.transpose": [[214, "polars-dataframe-transpose"]], "polars.Expr.append": [[259, "polars-expr-append"]], "polars.DataFrame.update": [[218, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.mean": [[234, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.median": [[235, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.all": [[256, "polars-expr-all"]], "polars.Expr.alias": [[255, "polars-expr-alias"]], "polars.DataFrame.to_pandas": [[210, "polars-dataframe-to-pandas"]], "polars.Expr.arccos": [[262, "polars-expr-arccos"]], "polars.dataframe.groupby.GroupBy.agg": [[226, "polars-dataframe-groupby-groupby-agg"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "stringcache (class in polars)": [[51, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__"]], "struct (class in polars)": [[52, "polars.Struct"]], "__init__() (polars.struct method)": [[52, "polars.Struct.__init__"]], "time (class in polars)": [[53, "polars.Time"]], "__init__() (polars.time method)": [[53, "polars.Time.__init__"]], "uint16 (class in polars)": [[54, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[54, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[55, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[55, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[56, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[56, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[57, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[57, "polars.UInt8.__init__"]], "unknown (class in polars)": [[58, "polars.Unknown"]], "__init__() (polars.unknown method)": [[58, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[59, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[59, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[60, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[61, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[62, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[63, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[64, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[65, "polars.arg_where"]], "build_info() (in module polars)": [[66, "polars.build_info"]], "collect_all() (in module polars)": [[67, "polars.collect_all"]], "concat() (in module polars)": [[68, "polars.concat"]], "cut() (in module polars)": [[69, "polars.cut"]], "date_range() (in module polars)": [[70, "polars.date_range"]], "enable_string_cache() (in module polars)": [[71, "polars.enable_string_cache"]], "arrowerror": [[72, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[73, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[74, "polars.exceptions.ComputeError"]], "duplicateerror": [[75, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[76, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[77, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[78, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[79, "polars.exceptions.PolarsPanicError"]], "rowserror": [[80, "polars.exceptions.RowsError"]], "schemaerror": [[81, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[82, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[83, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[84, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[85, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[86, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[87, "polars.from_dataframe"]], "from_dict() (in module polars)": [[88, "polars.from_dict"]], "from_dicts() (in module polars)": [[89, "polars.from_dicts"]], "from_numpy() (in module polars)": [[90, "polars.from_numpy"]], "from_pandas() (in module polars)": [[91, "polars.from_pandas"]], "from_records() (in module polars)": [[92, "polars.from_records"]], "from_repr() (in module polars)": [[93, "polars.from_repr"]], "get_dummies() (in module polars)": [[94, "polars.get_dummies"]], "get_index_type() (in module polars)": [[95, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[96, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[97, "polars.ones"]], "read_avro() (in module polars)": [[98, "polars.read_avro"]], "read_csv() (in module polars)": [[99, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[100, "polars.read_csv_batched"]], "read_database() (in module polars)": [[101, "polars.read_database"]], "read_delta() (in module polars)": [[102, "polars.read_delta"]], "read_excel() (in module polars)": [[103, "polars.read_excel"]], "read_ipc() (in module polars)": [[104, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[105, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[106, "polars.read_json"]], "read_ndjson() (in module polars)": [[107, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[108, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[109, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[110, "polars.scan_csv"]], "scan_delta() (in module polars)": [[111, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[112, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[113, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[114, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[115, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[116, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[117, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[118, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[119, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[119, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[123, "polars.threadpool_size"]], "zeros() (in module polars)": [[124, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[127, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[128, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[129, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[130, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[131, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[132, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[133, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[134, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[135, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[136, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[137, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[138, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[139, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[140, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[141, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[142, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[143, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[144, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[145, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[146, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[147, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[148, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[149, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[150, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[151, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[152, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[153, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[154, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[155, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[156, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[157, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[158, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[159, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[160, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[161, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[162, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[163, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[164, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[165, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[166, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[167, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[168, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[169, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[170, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[171, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[172, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[173, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[174, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[175, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[176, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[177, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[178, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[179, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[180, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[181, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[182, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[183, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[184, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[185, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[186, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[187, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[188, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[189, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[190, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[191, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[192, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[193, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[194, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[195, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[196, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[197, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[198, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[199, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[200, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[201, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[202, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[203, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[204, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[205, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[206, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[207, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[208, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[209, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[210, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[211, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[212, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[213, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[214, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[215, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[216, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[217, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[218, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[219, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[220, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[221, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[222, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[223, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[224, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[225, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[226, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[227, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[228, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[252, "polars.Expr.abs"]], "add() (polars.expr method)": [[253, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[254, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[255, "polars.Expr.alias"]], "all() (polars.expr method)": [[256, "polars.Expr.all"]], "and_() (polars.expr method)": [[257, "polars.Expr.and_"]], "any() (polars.expr method)": [[258, "polars.Expr.any"]], "append() (polars.expr method)": [[259, "polars.Expr.append"]], "apply() (polars.expr method)": [[260, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[261, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[262, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[263, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[264, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[265, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[266, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[267, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[268, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[269, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[270, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[271, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[272, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[273, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[274, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[275, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[276, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[277, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[278, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[279, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[280, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[281, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[282, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[283, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[284, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[285, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[286, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[287, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[288, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[289, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[290, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[291, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[292, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[293, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[294, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[295, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[296, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[297, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[298, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[299, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[300, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[301, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[302, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[303, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[304, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[305, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[306, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[307, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[308, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[309, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[310, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[311, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[312, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[313, "polars.Expr.cosh"]], "count() (polars.expr method)": [[314, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[315, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[316, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[317, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[318, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[319, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[320, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[321, "polars.Expr.diff"]], "dot() (polars.expr method)": [[322, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[323, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[324, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[325, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[326, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[327, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[328, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[329, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[330, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[331, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[332, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[333, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[334, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[335, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[336, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[337, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[338, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[339, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[340, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[341, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[342, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[343, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[344, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[345, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[346, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[347, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[348, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[349, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[350, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[351, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[352, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[353, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[354, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[355, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[356, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[357, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[358, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[359, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[360, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[361, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[362, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[363, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[364, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[365, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[366, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[367, "polars.Expr.exp"]], "explode() (polars.expr method)": [[368, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[369, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[370, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[371, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[372, "polars.Expr.filter"]], "first() (polars.expr method)": [[373, "polars.Expr.first"]], "flatten() (polars.expr method)": [[374, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[375, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[376, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[377, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[378, "polars.Expr.ge"]], "gt() (polars.expr method)": [[379, "polars.Expr.gt"]], "hash() (polars.expr method)": [[380, "polars.Expr.hash"]], "head() (polars.expr method)": [[381, "polars.Expr.head"]], "implode() (polars.expr method)": [[382, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[383, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[384, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[385, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[386, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[387, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[388, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[389, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[390, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[391, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[392, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[393, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[394, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[395, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[396, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[397, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[398, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[399, "polars.Expr.last"]], "le() (polars.expr method)": [[400, "polars.Expr.le"]], "len() (polars.expr method)": [[401, "polars.Expr.len"]], "limit() (polars.expr method)": [[402, "polars.Expr.limit"]], "log() (polars.expr method)": [[403, "polars.Expr.log"]], "log10() (polars.expr method)": [[404, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[405, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[406, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[407, "polars.Expr.lt"]], "map() (polars.expr method)": [[408, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[409, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[410, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[411, "polars.Expr.max"]], "mean() (polars.expr method)": [[412, "polars.Expr.mean"]], "median() (polars.expr method)": [[413, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[414, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[415, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[416, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[417, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[418, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[419, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[420, "polars.Expr.min"]], "mod() (polars.expr method)": [[421, "polars.Expr.mod"]], "mode() (polars.expr method)": [[422, "polars.Expr.mode"]], "mul() (polars.expr method)": [[423, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[424, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[425, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[426, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[427, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[428, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[429, "polars.Expr.or_"]], "over() (polars.expr method)": [[430, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[431, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[432, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[433, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[434, "polars.Expr.prefix"]], "product() (polars.expr method)": [[435, "polars.Expr.product"]], "quantile() (polars.expr method)": [[436, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[437, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[438, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[439, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[440, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[441, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[442, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[443, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[444, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[445, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[446, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[447, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[448, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[449, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[450, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[451, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[452, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[453, "polars.Expr.round"]], "sample() (polars.expr method)": [[454, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[455, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[456, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[457, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[458, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[459, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[460, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[461, "polars.Expr.sign"]], "sin() (polars.expr method)": [[462, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[463, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[464, "polars.Expr.skew"]], "slice() (polars.expr method)": [[465, "polars.Expr.slice"]], "sort() (polars.expr method)": [[466, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[467, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[468, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[469, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[470, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[471, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[472, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[473, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[474, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[475, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[476, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[477, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[478, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[479, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[480, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[481, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[482, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[483, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[484, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[485, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[486, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[487, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[488, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[489, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[490, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[491, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[492, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[493, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[494, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[495, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[496, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[497, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[498, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[499, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[500, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[501, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[502, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[503, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[504, "polars.Expr.sum"]], "tail() (polars.expr method)": [[505, "polars.Expr.tail"]], "take() (polars.expr method)": [[506, "polars.Expr.take"]], "take_every() (polars.expr method)": [[507, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[508, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[509, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[510, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[511, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[512, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[513, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[514, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[515, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[516, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[517, "polars.Expr.var"]], "where() (polars.expr method)": [[518, "polars.Expr.where"]], "xor() (polars.expr method)": [[519, "polars.Expr.xor"]], "all() (in module polars)": [[520, "polars.all"]], "any() (in module polars)": [[521, "polars.any"]], "apply() (in module polars)": [[522, "polars.apply"]], "approx_unique() (in module polars)": [[523, "polars.approx_unique"]], "arange() (in module polars)": [[524, "polars.arange"]], "arg_sort_by() (in module polars)": [[525, "polars.arg_sort_by"]], "avg() (in module polars)": [[526, "polars.avg"]], "coalesce() (in module polars)": [[527, "polars.coalesce"]], "col() (in module polars)": [[528, "polars.col"]], "concat_list() (in module polars)": [[529, "polars.concat_list"]], "concat_str() (in module polars)": [[530, "polars.concat_str"]], "corr() (in module polars)": [[531, "polars.corr"]], "count() (in module polars)": [[532, "polars.count"]], "cov() (in module polars)": [[533, "polars.cov"]], "cumfold() (in module polars)": [[534, "polars.cumfold"]], "cumreduce() (in module polars)": [[535, "polars.cumreduce"]], "cumsum() (in module polars)": [[536, "polars.cumsum"]], "date() (in module polars)": [[537, "polars.date"]], "datetime() (in module polars)": [[538, "polars.datetime"]], "duration() (in module polars)": [[539, "polars.duration"]], "element() (in module polars)": [[540, "polars.element"]], "exclude() (in module polars)": [[541, "polars.exclude"]], "first() (in module polars)": [[542, "polars.first"]], "fold() (in module polars)": [[543, "polars.fold"]], "format() (in module polars)": [[544, "polars.format"]], "from_epoch() (in module polars)": [[545, "polars.from_epoch"]], "groups() (in module polars)": [[546, "polars.groups"]], "head() (in module polars)": [[547, "polars.head"]], "list() (in module polars)": [[548, "polars.list"]], "lit() (in module polars)": [[549, "polars.lit"]], "map() (in module polars)": [[550, "polars.map"]], "max() (in module polars)": [[551, "polars.max"]], "mean() (in module polars)": [[552, "polars.mean"]], "median() (in module polars)": [[553, "polars.median"]], "min() (in module polars)": [[554, "polars.min"]], "n_unique() (in module polars)": [[555, "polars.n_unique"]], "pearson_corr() (in module polars)": [[556, "polars.pearson_corr"]], "quantile() (in module polars)": [[557, "polars.quantile"]], "reduce() (in module polars)": [[558, "polars.reduce"]], "repeat() (in module polars)": [[559, "polars.repeat"]], "select() (in module polars)": [[560, "polars.select"]], "spearman_rank_corr() (in module polars)": [[561, "polars.spearman_rank_corr"]], "std() (in module polars)": [[562, "polars.std"]], "struct() (in module polars)": [[563, "polars.struct"]], "sum() (in module polars)": [[564, "polars.sum"]], "tail() (in module polars)": [[565, "polars.tail"]], "var() (in module polars)": [[566, "polars.var"]], "when() (in module polars)": [[567, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[588, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[589, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[590, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[591, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[592, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[593, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[594, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[595, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[596, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[597, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[598, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[599, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[600, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[601, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[602, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[603, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[604, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[605, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[606, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[607, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[608, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[609, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[610, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[611, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[612, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[613, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[614, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[615, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[616, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[617, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[618, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[619, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[620, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[621, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[622, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[623, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[624, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[625, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[626, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[627, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[628, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[629, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[630, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[631, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[632, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[633, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[634, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[635, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[636, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[637, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[638, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[639, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[640, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[641, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[642, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[643, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[644, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[645, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[646, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[647, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[648, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[649, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[650, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[651, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[652, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[653, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[654, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[655, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[656, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[657, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[658, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[659, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[660, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[661, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[662, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[663, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[664, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[665, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[666, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[674, "polars.Series.abs"]], "alias() (polars.series method)": [[675, "polars.Series.alias"]], "all() (polars.series method)": [[676, "polars.Series.all"]], "any() (polars.series method)": [[677, "polars.Series.any"]], "append() (polars.series method)": [[678, "polars.Series.append"]], "apply() (polars.series method)": [[679, "polars.Series.apply"]], "arccos() (polars.series method)": [[680, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[681, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[682, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[683, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[684, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[685, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[686, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[687, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[688, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[689, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[690, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[691, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[692, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[693, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[694, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[695, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[696, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[697, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[698, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[699, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[700, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[701, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[702, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[703, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[704, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[705, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[706, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[707, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[708, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[709, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[710, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[711, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[712, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[713, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[714, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[715, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[716, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[717, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[718, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[719, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[720, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[721, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[722, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[723, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[724, "polars.Series.cast"]], "cat (polars.series attribute)": [[725, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[726, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[727, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[728, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[729, "polars.Series.clear"]], "clip() (polars.series method)": [[730, "polars.Series.clip"]], "clip_max() (polars.series method)": [[731, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[732, "polars.Series.clip_min"]], "clone() (polars.series method)": [[733, "polars.Series.clone"]], "cos() (polars.series method)": [[734, "polars.Series.cos"]], "cosh() (polars.series method)": [[735, "polars.Series.cosh"]], "cummax() (polars.series method)": [[736, "polars.Series.cummax"]], "cummin() (polars.series method)": [[737, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[738, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[739, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[740, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[741, "polars.Series.cut"]], "describe() (polars.series method)": [[742, "polars.Series.describe"]], "diff() (polars.series method)": [[743, "polars.Series.diff"]], "dot() (polars.series method)": [[744, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[745, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[746, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[747, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[748, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[749, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[750, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[751, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[752, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[753, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[754, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[755, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[756, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[757, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[758, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[759, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[760, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[761, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[762, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[763, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[764, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[765, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[766, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[767, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[768, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[769, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[770, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[771, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[772, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[773, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[774, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[775, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[776, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[777, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[778, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[779, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[780, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[781, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[782, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[783, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[784, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[785, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[786, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[787, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[788, "polars.Series.dtype"]], "entropy() (polars.series method)": [[789, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[790, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[791, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[792, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[793, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[794, "polars.Series.exp"]], "explode() (polars.series method)": [[795, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[796, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[797, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[798, "polars.Series.fill_null"]], "filter() (polars.series method)": [[799, "polars.Series.filter"]], "flags (polars.series attribute)": [[800, "polars.Series.flags"]], "floor() (polars.series method)": [[801, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[802, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[803, "polars.Series.has_validity"]], "hash() (polars.series method)": [[804, "polars.Series.hash"]], "head() (polars.series method)": [[805, "polars.Series.head"]], "hist() (polars.series method)": [[806, "polars.Series.hist"]], "implode() (polars.series method)": [[807, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[808, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[809, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[810, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[811, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[812, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[813, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[814, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[815, "polars.Series.is_first"]], "is_float() (polars.series method)": [[816, "polars.Series.is_float"]], "is_in() (polars.series method)": [[817, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[818, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[819, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[820, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[821, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[822, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[823, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[824, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[825, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[826, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[827, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[828, "polars.Series.is_utf8"]], "item() (polars.series method)": [[829, "polars.Series.item"]], "kurtosis() (polars.series method)": [[830, "polars.Series.kurtosis"]], "len() (polars.series method)": [[831, "polars.Series.len"]], "limit() (polars.series method)": [[832, "polars.Series.limit"]], "log() (polars.series method)": [[833, "polars.Series.log"]], "log10() (polars.series method)": [[834, "polars.Series.log10"]], "log1p() (polars.series method)": [[835, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[836, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[837, "polars.Series.map_dict"]], "max() (polars.series method)": [[838, "polars.Series.max"]], "mean() (polars.series method)": [[839, "polars.Series.mean"]], "median() (polars.series method)": [[840, "polars.Series.median"]], "min() (polars.series method)": [[841, "polars.Series.min"]], "mode() (polars.series method)": [[842, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[843, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[844, "polars.Series.n_unique"]], "name (polars.series attribute)": [[845, "polars.Series.name"]], "nan_max() (polars.series method)": [[846, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[847, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[848, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[849, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[850, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[851, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[852, "polars.Series.peak_min"]], "product() (polars.series method)": [[853, "polars.Series.product"]], "qcut() (polars.series method)": [[854, "polars.Series.qcut"]], "quantile() (polars.series method)": [[855, "polars.Series.quantile"]], "rank() (polars.series method)": [[856, "polars.Series.rank"]], "rechunk() (polars.series method)": [[857, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[858, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[859, "polars.Series.rename"]], "reshape() (polars.series method)": [[860, "polars.Series.reshape"]], "reverse() (polars.series method)": [[861, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[862, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[863, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[864, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[865, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[866, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[867, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[868, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[869, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[870, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[871, "polars.Series.rolling_var"]], "round() (polars.series method)": [[872, "polars.Series.round"]], "sample() (polars.series method)": [[873, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[874, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[875, "polars.Series.series_equal"]], "set() (polars.series method)": [[876, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[877, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[878, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[879, "polars.Series.shape"]], "shift() (polars.series method)": [[880, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[881, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[882, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[883, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[884, "polars.Series.shuffle"]], "sign() (polars.series method)": [[885, "polars.Series.sign"]], "sin() (polars.series method)": [[886, "polars.Series.sin"]], "sinh() (polars.series method)": [[887, "polars.Series.sinh"]], "skew() (polars.series method)": [[888, "polars.Series.skew"]], "slice() (polars.series method)": [[889, "polars.Series.slice"]], "sort() (polars.series method)": [[890, "polars.Series.sort"]], "sqrt() (polars.series method)": [[891, "polars.Series.sqrt"]], "std() (polars.series method)": [[892, "polars.Series.std"]], "str (polars.series attribute)": [[893, "polars.Series.str"]], "concat() (polars.series.str method)": [[894, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[895, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[896, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[897, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[898, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[899, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[900, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[901, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[902, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[903, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[904, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[905, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[906, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[907, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[908, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[909, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[910, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[911, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[912, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[913, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[914, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[915, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[916, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[917, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[918, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[919, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[920, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[921, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[922, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[923, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[924, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[925, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[926, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[927, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[928, "polars.Series.sum"]], "tail() (polars.series method)": [[929, "polars.Series.tail"]], "take() (polars.series method)": [[930, "polars.Series.take"]], "take_every() (polars.series method)": [[931, "polars.Series.take_every"]], "tan() (polars.series method)": [[932, "polars.Series.tan"]], "tanh() (polars.series method)": [[933, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[934, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[935, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[936, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[937, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[938, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[939, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[940, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[941, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[942, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[943, "polars.Series.top_k"]], "unique() (polars.series method)": [[944, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[945, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[946, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[947, "polars.Series.value_counts"]], "var() (polars.series method)": [[948, "polars.Series.var"]], "view() (polars.series method)": [[949, "polars.Series.view"]], "zip_with() (polars.series method)": [[950, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[965, "polars.SQLContext"]]}})