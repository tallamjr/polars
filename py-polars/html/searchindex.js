Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iterrows", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pearson_corr", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_column", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/pivot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_column", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iterrows.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pearson_corr.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_column.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/pivot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_column.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_delta", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iterrows", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pearson_corr", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Pivot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.combine", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.combine", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 101, 114, 117, 210, 212, 239, 242, 252, 539, 615], "refer": [0, 88, 89, 91, 207, 239, 408, 465, 539, 794, 856, 894], "input": [0, 54, 88, 89, 91, 239, 385, 393, 488, 506, 514, 515, 518, 539, 548, 776, 894], "output": [0, 24, 26, 27, 64, 91, 108, 117, 139, 140, 151, 160, 165, 168, 177, 203, 239, 248, 252, 387, 388, 392, 483, 488, 514, 525, 539, 548, 569, 570, 579, 584, 613, 615, 621, 630, 882, 894], "seri": [0, 1, 19, 45, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 81, 86, 107, 108, 110, 114, 117, 123, 131, 133, 135, 136, 141, 144, 145, 147, 149, 156, 157, 161, 173, 174, 180, 188, 192, 197, 198, 207, 208, 211, 239, 251, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 268, 273, 274, 281, 282, 285, 286, 287, 290, 296, 297, 301, 302, 314, 315, 318, 321, 324, 326, 328, 331, 335, 337, 340, 341, 344, 345, 353, 354, 359, 360, 364, 366, 368, 369, 370, 371, 372, 374, 375, 376, 386, 387, 404, 408, 409, 410, 411, 412, 414, 426, 427, 430, 433, 434, 441, 459, 465, 469, 474, 475, 476, 477, 482, 488, 489, 491, 492, 493, 494, 495, 496, 498, 499, 500, 506, 507, 509, 511, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 526, 527, 528, 529, 530, 539, 548, 565, 593, 609, 610, 621, 886, 888, 890, 893, 897, 898, 899], "datafram": [0, 1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 43, 45, 54, 55, 56, 57, 58, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 103, 104, 106, 108, 109, 237, 238, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 503, 504, 505, 506, 508, 509, 511, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 548, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 621, 629, 649, 667, 676, 691, 839, 841, 852, 853, 863, 864, 873, 874, 882, 894], "lazyfram": [0, 1, 42, 44, 54, 55, 56, 57, 58, 61, 62, 99, 100, 101, 102, 103, 104, 106, 110, 154, 167, 239, 287, 357, 539, 548, 620, 900], "express": [0, 59, 61, 64, 108, 110, 111, 117, 129, 131, 138, 163, 168, 176, 186, 208, 210, 212, 239, 248, 249, 251, 252, 269, 287, 298, 299, 300, 303, 309, 311, 316, 332, 351, 354, 357, 364, 366, 370, 373, 378, 381, 386, 387, 388, 392, 393, 404, 405, 406, 411, 425, 426, 427, 429, 436, 450, 465, 471, 474, 480, 482, 485, 489, 492, 493, 497, 498, 499, 500, 504, 505, 506, 507, 508, 509, 513, 514, 515, 518, 520, 522, 523, 524, 525, 527, 528, 531, 538, 548, 554, 562, 565, 587, 595, 596, 597, 598, 600, 609, 610, 611, 614, 615, 621, 649, 680, 681, 682, 690, 699, 719, 742, 812, 819, 841, 894], "extend": [0, 239, 354, 539, 548, 629, 742, 894], "function": [0, 55, 56, 57, 58, 59, 63, 88, 89, 91, 99, 109, 117, 126, 133, 159, 166, 167, 168, 199, 202, 212, 222, 239, 249, 252, 287, 309, 335, 348, 349, 350, 387, 388, 402, 414, 415, 416, 417, 418, 419, 421, 422, 423, 435, 478, 486, 488, 498, 499, 506, 507, 509, 514, 522, 539, 548, 579, 583, 586, 615, 621, 630, 667, 690, 722, 736, 737, 738, 739, 800, 814, 815, 821, 826, 894], "data": [0, 1, 12, 15, 29, 45, 54, 55, 57, 62, 68, 69, 74, 75, 77, 78, 79, 80, 81, 82, 88, 89, 91, 92, 93, 96, 97, 99, 106, 107, 109, 110, 111, 118, 119, 128, 137, 139, 151, 152, 154, 167, 171, 176, 177, 178, 184, 191, 195, 196, 207, 208, 237, 239, 295, 314, 336, 344, 365, 372, 374, 408, 424, 425, 435, 478, 480, 492, 525, 539, 548, 552, 553, 562, 569, 586, 597, 598, 609, 610, 614, 621, 629, 674, 679, 683, 695, 697, 731, 794, 810, 811, 821, 826, 875, 876, 878, 880, 884, 893, 894], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 64, 68, 77, 78, 79, 80, 81, 82, 86, 88, 89, 90, 91, 93, 97, 99, 100, 105, 106, 107, 110, 113, 114, 117, 127, 133, 137, 139, 140, 141, 191, 195, 196, 198, 200, 201, 239, 252, 274, 287, 295, 296, 298, 299, 300, 315, 318, 321, 324, 326, 328, 331, 337, 345, 351, 362, 366, 368, 370, 371, 411, 460, 461, 462, 465, 478, 488, 493, 501, 502, 503, 505, 506, 513, 514, 539, 548, 554, 560, 562, 569, 570, 587, 596, 597, 598, 605, 606, 621, 654, 667, 674, 676, 680, 681, 682, 698, 701, 704, 710, 712, 715, 718, 724, 732, 750, 821, 851, 852, 853, 875, 876, 878, 885, 894], "config": [0, 54, 208, 239, 548, 610, 621], "except": [0, 142, 153, 189, 239, 548, 575, 621, 876, 884, 894], "test": [0, 91, 548, 571, 578, 621], "util": [0, 509, 548, 562, 621], "sql": [0, 42, 98, 152, 239, 548], "These": [1, 340, 538, 727], "allow": [1, 45, 68, 99, 101, 102, 103, 104, 110, 111, 151, 153, 154, 176, 177, 178, 239, 332, 410, 425, 465, 539, 574, 575, 579, 597, 598, 611, 621, 719, 796, 811, 813, 856, 894], "you": [1, 28, 54, 77, 78, 86, 88, 89, 91, 96, 99, 106, 114, 117, 124, 128, 151, 153, 163, 195, 199, 212, 222, 239, 252, 269, 298, 299, 300, 351, 357, 387, 410, 415, 416, 417, 418, 419, 421, 422, 423, 451, 454, 489, 498, 507, 539, 554, 559, 571, 575, 578, 596, 598, 615, 621, 629, 649, 680, 681, 682, 796, 842, 845, 876, 884, 894], "regist": [1, 55, 56, 57, 58], "custom": [1, 55, 56, 57, 58, 117, 212, 239, 252, 287, 387, 414, 488, 514, 539, 579, 615, 621, 630, 667, 800, 894], "dedic": [1, 151, 177, 239], "namespac": [1, 238, 242, 538, 548, 620], "underli": [1, 65, 72, 77, 96, 110, 111, 128, 151, 177, 191, 239, 291, 314, 315, 316, 317, 320, 322, 323, 325, 327, 329, 330, 333, 334, 336, 342, 343, 344, 346, 410, 424, 444, 539, 629, 670, 697, 698, 699, 700, 703, 705, 709, 711, 714, 716, 717, 720, 721, 723, 729, 730, 731, 733, 796, 810, 821, 835, 872, 876, 894], "polar": [1, 239, 538, 539, 548, 621, 894, 900, 901], "class": [1, 2, 3, 4, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 81, 108, 109, 195, 196, 239, 539, 548, 621, 875, 876, 894, 900], "without": [1, 63, 90, 93, 97, 100, 101, 202, 239, 309, 335, 415, 416, 417, 418, 419, 421, 422, 423, 524, 539, 690, 695, 722, 894], "requir": [1, 28, 81, 106, 107, 165, 166, 196, 208, 239, 348, 349, 350, 430, 465, 480, 539, 598, 610, 621, 737, 738, 739, 820, 856, 876, 880, 894], "subclass": [1, 239], "mixin": 1, "expr": [1, 54, 55, 56, 57, 58, 59, 62, 64, 127, 129, 131, 138, 139, 140, 152, 163, 168, 176, 180, 186, 207, 208, 210, 239, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 539, 540, 543, 544, 545, 561, 563, 565, 568, 569, 570, 574, 588, 593, 595, 600, 609, 610, 614, 621, 649, 690, 699, 743, 819, 867, 894], "ar": [1, 14, 28, 45, 64, 70, 76, 77, 79, 81, 82, 88, 89, 90, 91, 96, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 113, 117, 124, 126, 129, 133, 139, 140, 151, 153, 154, 159, 160, 166, 176, 192, 196, 203, 239, 249, 287, 305, 307, 308, 312, 313, 335, 340, 347, 366, 368, 370, 371, 372, 374, 375, 376, 379, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 435, 437, 438, 451, 454, 472, 489, 490, 495, 525, 532, 533, 535, 538, 539, 540, 543, 544, 545, 548, 559, 563, 569, 570, 571, 575, 578, 579, 583, 584, 587, 590, 597, 598, 611, 621, 627, 629, 667, 688, 689, 722, 727, 735, 736, 749, 758, 761, 762, 763, 764, 765, 766, 772, 794, 798, 800, 806, 823, 826, 842, 845, 865, 876, 884, 886, 888, 890, 894, 897, 898, 899], "all": [1, 6, 11, 14, 19, 22, 29, 61, 62, 64, 77, 79, 81, 82, 83, 88, 89, 91, 92, 96, 99, 102, 103, 108, 109, 111, 124, 130, 142, 147, 149, 151, 154, 159, 162, 163, 171, 176, 177, 185, 189, 194, 200, 203, 239, 250, 251, 269, 274, 284, 287, 289, 303, 309, 351, 361, 362, 365, 368, 371, 375, 376, 378, 381, 383, 387, 388, 397, 401, 405, 408, 413, 430, 436, 443, 449, 450, 453, 455, 456, 458, 464, 471, 483, 493, 505, 527, 539, 548, 554, 557, 559, 562, 564, 579, 583, 587, 596, 599, 605, 611, 621, 649, 654, 664, 667, 690, 756, 769, 794, 827, 834, 840, 841, 844, 846, 847, 849, 855, 894], "support": [1, 28, 62, 77, 78, 79, 80, 81, 82, 90, 91, 98, 100, 108, 111, 185, 208, 239, 282, 436, 459, 539, 599, 610, 621, 662, 827, 850, 894], "target": [1, 60, 448, 465, 839, 856], "thi": [1, 6, 22, 24, 26, 28, 44, 45, 54, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 85, 86, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 117, 124, 126, 128, 133, 138, 139, 140, 141, 145, 147, 149, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 169, 170, 171, 176, 177, 178, 180, 183, 185, 187, 188, 191, 193, 195, 196, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 212, 238, 239, 242, 249, 251, 252, 261, 263, 269, 274, 287, 296, 303, 309, 314, 315, 322, 332, 335, 341, 344, 351, 353, 359, 364, 365, 366, 370, 381, 386, 387, 392, 393, 399, 400, 402, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 427, 429, 430, 431, 436, 437, 438, 452, 453, 457, 458, 464, 465, 468, 469, 479, 480, 481, 482, 483, 486, 489, 494, 496, 498, 500, 505, 506, 507, 509, 524, 528, 539, 548, 549, 551, 554, 559, 562, 568, 569, 570, 572, 575, 579, 583, 584, 587, 590, 593, 595, 596, 597, 598, 599, 605, 609, 610, 611, 612, 613, 615, 620, 621, 629, 630, 639, 642, 649, 654, 676, 690, 695, 697, 698, 699, 705, 719, 722, 728, 731, 736, 741, 748, 749, 754, 755, 760, 761, 767, 770, 773, 777, 778, 779, 780, 782, 783, 785, 786, 788, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 804, 807, 808, 809, 811, 814, 815, 816, 819, 820, 821, 822, 827, 828, 830, 843, 844, 848, 849, 855, 856, 859, 860, 863, 864, 865, 872, 874, 875, 876, 877, 879, 880, 883, 884, 894], "featur": [1, 28, 45, 60, 239], "i": [1, 11, 24, 26, 27, 45, 54, 60, 61, 62, 63, 64, 67, 68, 70, 71, 77, 80, 81, 82, 85, 88, 89, 90, 92, 96, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 117, 124, 126, 134, 137, 138, 139, 140, 141, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 165, 167, 168, 176, 177, 178, 185, 188, 191, 193, 199, 200, 202, 203, 208, 210, 212, 222, 238, 239, 242, 249, 250, 251, 252, 269, 272, 282, 286, 287, 309, 316, 332, 335, 340, 348, 349, 350, 353, 359, 362, 364, 366, 379, 387, 393, 402, 408, 410, 412, 415, 416, 417, 418, 419, 421, 422, 423, 425, 426, 427, 431, 432, 435, 436, 437, 438, 443, 448, 449, 450, 452, 453, 457, 458, 459, 462, 464, 465, 468, 483, 489, 490, 494, 496, 498, 499, 500, 507, 513, 524, 528, 539, 554, 559, 562, 568, 569, 570, 573, 575, 577, 579, 583, 584, 587, 596, 597, 598, 599, 605, 610, 613, 615, 621, 628, 629, 630, 649, 652, 662, 666, 690, 699, 719, 722, 727, 736, 737, 738, 739, 741, 749, 750, 753, 754, 755, 757, 767, 768, 770, 771, 772, 794, 796, 798, 811, 812, 813, 814, 815, 816, 823, 826, 827, 830, 834, 839, 840, 841, 843, 844, 848, 849, 850, 853, 855, 859, 872, 876, 882, 883, 884, 894], "primarili": 1, "intend": 1, "us": [1, 8, 9, 11, 14, 19, 20, 24, 28, 45, 54, 64, 77, 78, 80, 82, 84, 86, 88, 89, 90, 91, 92, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 114, 117, 129, 130, 133, 139, 140, 151, 153, 157, 159, 162, 163, 167, 168, 176, 178, 186, 188, 199, 200, 203, 207, 208, 210, 212, 222, 239, 247, 252, 269, 287, 291, 292, 296, 309, 312, 313, 344, 347, 348, 349, 350, 351, 356, 357, 365, 366, 379, 387, 391, 408, 410, 412, 415, 416, 417, 418, 419, 421, 422, 423, 425, 427, 430, 431, 435, 437, 438, 444, 445, 446, 451, 452, 457, 459, 461, 463, 465, 488, 489, 490, 493, 495, 498, 500, 507, 509, 513, 515, 518, 523, 528, 538, 539, 554, 557, 563, 564, 568, 569, 570, 571, 575, 577, 578, 583, 598, 600, 605, 609, 610, 615, 621, 630, 649, 667, 670, 671, 676, 690, 731, 735, 737, 738, 739, 743, 744, 749, 772, 794, 796, 798, 811, 814, 815, 816, 820, 826, 830, 835, 836, 842, 843, 848, 850, 852, 856, 867, 875, 876, 883, 884, 894], "librari": [1, 65, 72, 387, 539, 901], "author": 1, "domain": 1, "specif": [1, 22, 77, 78, 80, 82, 90, 98, 100, 110, 151, 239, 414, 465, 527, 539, 800, 856, 894], "capabl": 1, "which": [1, 14, 23, 24, 25, 26, 27, 28, 54, 55, 56, 57, 58, 88, 89, 90, 91, 98, 99, 100, 106, 124, 128, 139, 140, 151, 186, 200, 239, 249, 287, 354, 366, 368, 371, 372, 374, 375, 376, 393, 415, 416, 417, 418, 419, 421, 422, 423, 539, 559, 569, 570, 597, 598, 605, 613, 621, 629, 742, 758, 762, 763, 764, 765, 766, 814, 894], "mai": [1, 28, 62, 63, 77, 88, 90, 92, 100, 101, 102, 117, 126, 128, 153, 182, 183, 202, 239, 281, 286, 287, 309, 314, 322, 335, 351, 415, 416, 417, 418, 419, 421, 422, 423, 428, 429, 465, 498, 499, 507, 522, 539, 575, 579, 594, 595, 598, 612, 615, 621, 629, 661, 666, 690, 697, 705, 722, 736, 818, 819, 856, 894], "exist": [1, 77, 90, 100, 110, 207, 208, 239, 316, 609, 610, 621, 699], "belong": [1, 139, 239, 569, 621], "core": [1, 81, 196, 239], "cannot": [1, 88, 89, 106, 117, 178, 212, 239, 252, 291, 425, 444, 461, 539, 596, 615, 621, 670, 811, 835, 852, 894], "overrid": [1, 77, 78, 79, 80, 81, 82, 108, 109, 111, 239], "str": [1, 5, 7, 10, 11, 14, 15, 22, 23, 24, 25, 26, 27, 28, 31, 39, 42, 43, 44, 45, 46, 54, 55, 56, 57, 58, 60, 63, 64, 77, 78, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 168, 170, 172, 173, 174, 175, 178, 180, 182, 183, 185, 186, 187, 188, 189, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 247, 248, 252, 266, 267, 272, 273, 274, 282, 285, 287, 311, 315, 332, 335, 338, 340, 341, 345, 351, 353, 354, 355, 357, 359, 364, 370, 373, 388, 392, 394, 402, 405, 411, 413, 415, 416, 417, 418, 419, 421, 422, 423, 429, 430, 437, 438, 469, 470, 471, 474, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 539, 543, 554, 555, 556, 557, 558, 559, 561, 562, 565, 567, 568, 569, 570, 572, 574, 575, 583, 584, 587, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 605, 606, 610, 611, 612, 613, 615, 616, 617, 621, 626, 647, 654, 667, 674, 691, 698, 719, 722, 725, 727, 728, 732, 741, 742, 744, 777, 780, 785, 786, 797, 814, 815, 860, 862, 874, 894, 897], "dt": [1, 54, 140, 239, 545, 570, 621, 899], "attempt": [1, 195, 239, 876, 894], "do": [1, 54, 61, 99, 128, 153, 191, 199, 202, 222, 239, 269, 309, 453, 458, 464, 486, 539, 554, 575, 579, 587, 596, 597, 598, 621, 629, 649, 690, 844, 849, 855, 876, 884, 894], "so": [1, 45, 98, 99, 100, 137, 139, 140, 168, 239, 272, 453, 458, 464, 490, 569, 570, 621, 652, 844, 849, 855], "rais": [1, 10, 14, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 106, 107, 176, 239, 286, 291, 392, 404, 444, 465, 513, 539, 666, 670, 835, 856, 876, 884, 894], "an": [1, 55, 57, 58, 61, 64, 65, 68, 69, 72, 77, 88, 89, 91, 96, 98, 99, 102, 109, 110, 111, 117, 118, 119, 126, 129, 131, 133, 139, 140, 151, 153, 163, 165, 168, 174, 176, 191, 195, 202, 212, 222, 239, 248, 249, 252, 269, 272, 286, 287, 291, 295, 298, 299, 300, 304, 305, 306, 307, 308, 309, 316, 344, 354, 357, 378, 387, 388, 393, 406, 414, 415, 416, 417, 418, 419, 421, 422, 423, 444, 449, 465, 474, 489, 493, 504, 509, 513, 522, 524, 539, 548, 552, 553, 554, 557, 562, 565, 569, 570, 575, 579, 587, 596, 600, 611, 615, 621, 649, 652, 666, 670, 674, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 699, 731, 736, 742, 800, 801, 802, 803, 804, 805, 807, 808, 809, 814, 815, 835, 840, 856, 876, 884, 894], "attributeerror": 1, "howev": [1, 126, 239, 736, 894], "can": [1, 54, 64, 69, 88, 89, 91, 92, 99, 101, 102, 109, 110, 111, 117, 125, 133, 138, 139, 163, 168, 186, 199, 202, 210, 212, 239, 252, 269, 287, 305, 308, 309, 332, 340, 351, 354, 365, 397, 410, 415, 416, 417, 418, 419, 421, 422, 423, 427, 430, 432, 435, 450, 453, 458, 464, 483, 486, 489, 493, 500, 505, 509, 515, 528, 538, 539, 554, 569, 600, 612, 615, 621, 630, 649, 667, 690, 719, 727, 742, 781, 796, 814, 815, 816, 820, 823, 826, 841, 844, 849, 855, 894], "other": [1, 14, 64, 88, 89, 91, 99, 106, 107, 124, 128, 134, 152, 153, 159, 160, 176, 237, 239, 251, 266, 298, 299, 300, 311, 370, 438, 478, 539, 548, 559, 574, 575, 583, 584, 611, 621, 629, 646, 680, 681, 682, 693, 761, 813, 878, 885, 893, 894], "onli": [1, 14, 22, 45, 54, 60, 62, 88, 89, 91, 92, 96, 99, 102, 103, 104, 110, 111, 117, 124, 138, 151, 153, 157, 186, 188, 239, 247, 297, 298, 299, 300, 332, 360, 410, 481, 523, 527, 539, 554, 559, 571, 575, 578, 600, 621, 677, 680, 681, 682, 719, 747, 796, 872, 894], "gener": [1, 98, 108, 109, 110, 111, 178, 199, 239, 287, 425, 431, 539, 667, 811, 822, 894], "userwarn": 1, "pl": [1, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 539, 549, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 648, 649, 650, 653, 654, 656, 661, 662, 665, 667, 674, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 736, 738, 739, 742, 743, 744, 745, 747, 750, 751, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 774, 777, 778, 779, 780, 781, 782, 783, 789, 790, 791, 793, 794, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 894], "register_expr_namespac": [1, 55, 57, 58], "greet": 1, "def": [1, 55, 56, 57, 58, 109, 110, 111, 167, 199, 239, 586, 621], "__init__": [1, 2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 108], "self": [1, 55, 56, 57, 58, 61, 402, 539, 554, 562, 587, 596, 621, 629, 814, 815, 885, 894], "_expr": [1, 56], "hello": [1, 359, 453, 458, 464, 486, 539, 654, 844, 849, 855], "return": [1, 22, 24, 26, 27, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 70, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 114, 117, 118, 122, 124, 125, 126, 127, 129, 130, 133, 142, 144, 150, 151, 152, 154, 155, 162, 163, 165, 166, 167, 168, 176, 177, 178, 189, 190, 196, 199, 200, 207, 208, 210, 212, 215, 219, 225, 239, 249, 250, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 267, 270, 272, 273, 274, 285, 286, 290, 292, 301, 302, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 346, 353, 359, 363, 366, 368, 369, 370, 371, 372, 374, 375, 376, 382, 386, 393, 397, 411, 412, 425, 426, 432, 433, 434, 441, 443, 445, 447, 448, 449, 450, 451, 452, 454, 457, 459, 460, 461, 462, 468, 473, 474, 475, 476, 477, 479, 481, 482, 483, 488, 489, 493, 501, 502, 503, 509, 511, 513, 514, 524, 529, 531, 539, 554, 557, 559, 560, 562, 571, 577, 578, 579, 586, 587, 596, 597, 598, 604, 605, 609, 610, 613, 616, 617, 621, 626, 627, 628, 630, 637, 638, 640, 641, 644, 645, 647, 650, 652, 653, 654, 665, 666, 669, 671, 691, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 733, 736, 741, 749, 751, 756, 758, 759, 761, 762, 763, 764, 765, 766, 769, 771, 774, 781, 798, 799, 811, 812, 813, 815, 823, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 845, 848, 850, 851, 852, 853, 856, 859, 866, 868, 879, 881, 885, 894], "lit": [1, 86, 114, 290, 378, 498, 500, 507, 528, 531, 539, 669, 744, 894], "alia": [1, 54, 56, 58, 139, 140, 155, 201, 207, 208, 239, 252, 263, 269, 298, 299, 300, 304, 305, 306, 307, 308, 314, 316, 317, 318, 319, 321, 324, 326, 328, 331, 332, 333, 335, 336, 337, 339, 340, 343, 344, 345, 357, 359, 364, 369, 370, 378, 381, 382, 395, 402, 403, 410, 426, 442, 443, 446, 449, 451, 454, 459, 461, 462, 463, 478, 479, 485, 491, 492, 494, 495, 500, 503, 504, 508, 523, 527, 528, 539, 569, 570, 572, 578, 606, 609, 610, 614, 621, 642, 649, 697, 698, 702, 719, 726, 731, 732, 774, 852, 853, 894], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 359, 453, 458, 464, 539, 654, 844, 849, 855], "select": [1, 54, 55, 56, 57, 59, 87, 88, 89, 90, 92, 96, 98, 99, 101, 117, 150, 153, 163, 167, 176, 185, 197, 201, 203, 239, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 297, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 358, 359, 360, 361, 362, 364, 365, 367, 368, 370, 371, 373, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 452, 453, 457, 458, 460, 461, 462, 464, 466, 467, 469, 470, 471, 472, 475, 476, 477, 479, 480, 481, 482, 483, 484, 486, 488, 489, 491, 493, 494, 496, 497, 500, 503, 505, 506, 508, 509, 511, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 539, 555, 572, 575, 586, 599, 606, 611, 613, 621, 649, 667, 814, 815, 827, 839, 841, 867, 894], "shape": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 75, 77, 78, 79, 80, 81, 82, 83, 86, 99, 101, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 152, 153, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 178, 180, 182, 183, 185, 186, 187, 188, 189, 190, 192, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 491, 492, 493, 494, 495, 496, 497, 500, 503, 504, 505, 506, 508, 509, 511, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 552, 554, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 593, 594, 595, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 621, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 648, 649, 650, 653, 654, 656, 661, 662, 665, 667, 674, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 738, 739, 742, 743, 744, 745, 747, 750, 751, 753, 756, 758, 761, 762, 763, 764, 765, 766, 769, 771, 774, 781, 789, 790, 791, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 818, 822, 823, 824, 825, 827, 828, 829, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 864, 866, 867, 868, 869, 870, 873, 874, 878, 880, 881, 882, 885, 894], "3": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 91, 98, 99, 101, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 247, 248, 249, 252, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 295, 296, 297, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 327, 329, 333, 334, 335, 336, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 388, 397, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 437, 438, 439, 442, 445, 446, 448, 451, 454, 459, 460, 461, 462, 463, 469, 470, 471, 473, 474, 475, 479, 481, 482, 483, 485, 486, 491, 492, 493, 494, 495, 496, 497, 500, 504, 505, 506, 508, 511, 513, 515, 516, 517, 518, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 621, 626, 629, 630, 631, 633, 634, 635, 637, 638, 639, 640, 641, 648, 649, 650, 653, 656, 661, 662, 665, 667, 674, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 710, 712, 713, 714, 716, 718, 720, 722, 723, 726, 727, 730, 731, 732, 736, 738, 739, 742, 743, 744, 745, 747, 750, 751, 753, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 789, 790, 791, 793, 794, 797, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 822, 824, 825, 826, 827, 828, 830, 836, 837, 839, 842, 845, 850, 854, 864, 865, 866, 867, 868, 869, 870, 872, 873, 875, 876, 877, 880, 881, 882, 883, 885, 894], "1": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 86, 88, 89, 90, 98, 99, 100, 101, 105, 106, 107, 108, 110, 111, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 539, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 648, 649, 650, 652, 653, 656, 661, 662, 665, 667, 674, 676, 677, 678, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 737, 738, 739, 742, 743, 744, 745, 747, 750, 751, 753, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 773, 774, 777, 778, 779, 780, 781, 782, 783, 789, 790, 791, 793, 794, 797, 798, 799, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 839, 841, 852, 853, 856, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 894], "2": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 77, 78, 79, 80, 81, 82, 83, 98, 99, 101, 105, 106, 107, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 248, 250, 251, 252, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 311, 316, 318, 320, 321, 324, 326, 327, 328, 329, 331, 332, 334, 335, 336, 337, 340, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 441, 443, 446, 449, 450, 451, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 466, 467, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 491, 492, 493, 494, 495, 496, 497, 500, 503, 504, 505, 506, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 621, 626, 629, 630, 632, 636, 637, 638, 639, 640, 641, 648, 649, 650, 653, 654, 656, 661, 662, 665, 667, 676, 677, 678, 683, 684, 687, 688, 689, 690, 691, 693, 699, 703, 707, 708, 714, 716, 721, 722, 723, 727, 730, 733, 735, 736, 737, 738, 739, 742, 743, 744, 745, 747, 750, 751, 753, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 789, 790, 791, 793, 794, 797, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 822, 824, 826, 827, 828, 829, 830, 832, 834, 840, 841, 844, 845, 846, 847, 849, 852, 853, 855, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 885, 894], "column_0": [1, 77, 80, 82, 117, 199, 239], "register_dataframe_namespac": [1, 56, 57, 58], "split": [1, 55, 165, 210, 239, 359, 461, 462, 539, 852, 853], "splitfram": [1, 55], "df": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 55, 56, 59, 77, 78, 79, 80, 81, 82, 83, 99, 109, 110, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 503, 504, 505, 506, 508, 509, 511, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 593, 594, 595, 596, 599, 600, 601, 602, 603, 605, 606, 607, 609, 612, 613, 615, 616, 617, 621, 649, 667, 676, 839, 841, 847, 852, 853, 874, 894], "_df": [1, 55], "by_alternate_row": 1, "list": [1, 31, 54, 55, 57, 61, 63, 77, 83, 85, 87, 88, 89, 90, 92, 96, 98, 99, 100, 109, 110, 111, 120, 125, 126, 127, 131, 136, 139, 144, 151, 162, 165, 176, 177, 186, 192, 193, 199, 200, 201, 202, 208, 211, 222, 239, 247, 266, 268, 269, 270, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 351, 353, 359, 387, 393, 394, 402, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 429, 437, 438, 449, 460, 469, 470, 474, 493, 494, 500, 504, 515, 518, 527, 528, 539, 555, 558, 559, 560, 561, 565, 569, 583, 605, 606, 610, 611, 621, 643, 646, 648, 649, 650, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 678, 736, 741, 745, 748, 761, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 812, 840, 851, 862, 867, 875, 894], "with_row_count": [1, 239, 621, 815, 894], "name": [1, 12, 16, 18, 26, 44, 55, 56, 57, 58, 63, 64, 67, 77, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 102, 103, 104, 107, 108, 109, 110, 111, 117, 120, 123, 124, 132, 135, 137, 151, 152, 153, 159, 168, 172, 176, 177, 179, 192, 198, 199, 201, 207, 208, 209, 239, 248, 252, 287, 335, 340, 351, 378, 388, 392, 394, 405, 469, 470, 471, 486, 487, 493, 497, 500, 505, 511, 512, 515, 518, 520, 521, 523, 525, 528, 529, 539, 555, 558, 574, 575, 583, 590, 592, 600, 606, 610, 612, 613, 614, 621, 626, 667, 679, 722, 727, 797, 860, 862, 874, 877, 894], "n": [1, 9, 11, 19, 27, 31, 32, 55, 56, 57, 58, 64, 85, 86, 88, 89, 99, 114, 117, 128, 139, 142, 155, 165, 178, 189, 190, 196, 215, 225, 239, 268, 273, 285, 309, 310, 314, 316, 319, 339, 344, 354, 363, 382, 403, 411, 425, 435, 461, 462, 473, 475, 479, 509, 511, 523, 529, 539, 554, 569, 571, 578, 603, 604, 616, 617, 621, 629, 648, 653, 665, 690, 692, 697, 699, 702, 726, 731, 742, 751, 774, 789, 811, 826, 830, 852, 853, 866, 868, 879, 883, 894], "filter": [1, 55, 99, 101, 124, 148, 212, 239, 446, 463, 485, 489, 539, 559, 562, 572, 615, 621, 814, 894], "col": [1, 24, 54, 55, 56, 57, 59, 80, 82, 99, 109, 110, 117, 131, 138, 139, 140, 148, 150, 163, 167, 176, 180, 186, 201, 207, 208, 210, 239, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 357, 358, 359, 360, 364, 365, 366, 367, 369, 370, 372, 373, 374, 377, 378, 379, 380, 384, 385, 386, 389, 390, 391, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 489, 494, 495, 500, 503, 506, 508, 509, 510, 515, 518, 521, 527, 528, 531, 539, 565, 568, 569, 570, 572, 586, 593, 600, 606, 609, 610, 611, 614, 621, 649, 667, 676, 719, 798, 814, 815, 839, 841, 856, 894], "0": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 28, 54, 55, 56, 58, 59, 63, 83, 88, 89, 91, 92, 96, 98, 99, 101, 102, 103, 104, 105, 108, 109, 110, 111, 114, 117, 118, 119, 121, 122, 125, 129, 130, 133, 134, 136, 137, 139, 141, 145, 150, 151, 152, 154, 156, 157, 158, 161, 162, 163, 164, 166, 169, 170, 174, 178, 179, 180, 183, 185, 186, 187, 188, 194, 197, 199, 202, 203, 204, 207, 208, 209, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 242, 246, 247, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 269, 272, 278, 287, 295, 297, 299, 300, 301, 302, 304, 309, 312, 313, 320, 324, 326, 327, 331, 336, 337, 348, 349, 350, 352, 353, 355, 356, 359, 360, 362, 365, 368, 371, 372, 374, 375, 376, 378, 379, 384, 385, 387, 389, 390, 391, 396, 399, 400, 401, 403, 404, 407, 408, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 430, 432, 433, 434, 435, 439, 440, 448, 468, 472, 476, 477, 478, 484, 489, 491, 492, 494, 497, 498, 500, 504, 507, 516, 517, 520, 521, 525, 528, 530, 531, 539, 552, 553, 558, 560, 563, 564, 569, 574, 577, 582, 587, 588, 592, 593, 595, 596, 598, 600, 601, 607, 609, 610, 611, 612, 615, 621, 631, 632, 633, 634, 635, 636, 637, 639, 641, 649, 652, 674, 677, 679, 684, 685, 690, 691, 693, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 723, 724, 735, 737, 738, 739, 741, 743, 747, 750, 758, 760, 762, 763, 764, 765, 766, 771, 772, 778, 779, 789, 793, 794, 800, 802, 803, 805, 806, 807, 809, 811, 823, 824, 825, 829, 830, 832, 839, 841, 859, 869, 870, 873, 877, 878, 883, 884, 894], "drop": [1, 117, 123, 124, 200, 239, 268, 310, 312, 313, 539, 559, 605, 621, 648, 692, 694, 894], "aaa": 1, "bbb": 1, "ccc": 1, "ddd": 1, "eee": 1, "fff": 1, "column": [1, 11, 12, 15, 16, 18, 26, 45, 54, 55, 56, 57, 62, 63, 64, 67, 71, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 92, 93, 96, 97, 98, 99, 102, 103, 104, 106, 110, 117, 122, 123, 124, 125, 126, 127, 132, 135, 137, 138, 139, 140, 144, 145, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 172, 173, 174, 176, 177, 179, 180, 186, 187, 188, 192, 194, 197, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 222, 239, 249, 250, 252, 261, 263, 266, 270, 286, 287, 316, 317, 320, 322, 323, 325, 327, 329, 330, 333, 334, 336, 342, 343, 346, 351, 353, 357, 378, 392, 394, 402, 405, 409, 411, 415, 416, 417, 418, 419, 421, 422, 423, 430, 437, 438, 447, 461, 462, 465, 471, 485, 486, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 539, 558, 559, 560, 561, 568, 569, 570, 574, 575, 579, 580, 581, 582, 583, 585, 586, 588, 590, 592, 593, 600, 601, 602, 605, 606, 607, 609, 610, 611, 612, 613, 621, 627, 628, 646, 650, 666, 700, 703, 705, 709, 711, 714, 716, 717, 720, 721, 723, 729, 730, 733, 741, 820, 838, 852, 853, 864, 874, 894], "txt": 1, "utf8": [1, 8, 14, 45, 88, 89, 99, 108, 125, 126, 133, 179, 195, 239, 274, 353, 359, 441, 445, 448, 449, 450, 451, 459, 460, 461, 462, 465, 493, 495, 539, 560, 592, 621, 654, 725, 741, 770, 832, 836, 839, 840, 841, 842, 850, 851, 852, 853, 856, 876, 894], "register_lazyframe_namespac": [1, 55, 56, 58], "dtypeoper": [1, 57], "ldf": [1, 57, 551, 553, 558, 559, 561, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 590, 591, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 614, 615, 616, 617, 621], "_ldf": [1, 57], "upcast_integer_typ": [1, 57], "with_column": [1, 57, 140, 167, 239, 252, 269, 295, 296, 298, 299, 300, 305, 308, 362, 365, 366, 369, 372, 374, 375, 376, 378, 402, 403, 446, 451, 454, 455, 456, 459, 461, 462, 463, 465, 468, 470, 478, 489, 492, 494, 495, 500, 504, 527, 528, 531, 539, 570, 586, 621, 649, 676, 856], "tp": [1, 57], "cast": [1, 56, 57, 77, 113, 133, 139, 140, 167, 196, 239, 251, 296, 307, 308, 314, 315, 410, 450, 468, 472, 478, 495, 539, 569, 570, 586, 621, 676, 688, 689, 697, 698, 796, 841, 865, 874, 878, 894], "int64": [1, 26, 56, 57, 86, 114, 125, 133, 139, 140, 167, 179, 191, 239, 307, 308, 318, 321, 324, 326, 328, 331, 337, 351, 410, 472, 478, 489, 493, 505, 539, 560, 569, 570, 586, 592, 613, 621, 688, 689, 701, 704, 710, 712, 715, 718, 724, 796, 813, 865, 876, 877, 878, 894], "int8": [1, 57, 133, 239, 307, 308, 472, 539, 688, 689, 799, 865, 894], "int16": [1, 57, 307, 308, 472, 539, 688, 689, 865, 894], "int32": [1, 57, 79, 110, 111, 139, 140, 239, 295, 322, 346, 478, 539, 569, 570, 621, 705, 733, 878, 894], "b": [1, 23, 24, 25, 28, 45, 57, 62, 77, 78, 79, 80, 81, 82, 83, 91, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 144, 145, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 248, 251, 252, 262, 266, 269, 274, 276, 289, 295, 296, 303, 311, 312, 313, 351, 355, 356, 357, 361, 362, 365, 368, 371, 372, 373, 374, 375, 376, 378, 381, 383, 388, 397, 401, 405, 413, 430, 436, 447, 455, 469, 470, 471, 481, 483, 485, 486, 491, 492, 493, 495, 496, 497, 500, 504, 505, 506, 508, 511, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 539, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 616, 617, 621, 629, 649, 676, 691, 693, 735, 736, 744, 761, 770, 797, 813, 838, 846, 864, 881, 894], "4": [1, 11, 19, 23, 24, 25, 28, 45, 54, 55, 56, 57, 58, 59, 62, 64, 77, 78, 79, 80, 81, 82, 83, 99, 105, 106, 107, 111, 117, 118, 119, 121, 124, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 162, 163, 165, 167, 168, 169, 173, 177, 180, 181, 189, 190, 191, 192, 193, 194, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 251, 252, 262, 268, 269, 270, 273, 281, 282, 285, 289, 295, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 321, 327, 328, 329, 333, 334, 335, 336, 337, 340, 342, 343, 346, 352, 355, 356, 360, 361, 363, 364, 365, 366, 375, 376, 378, 381, 383, 385, 388, 402, 404, 405, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 428, 429, 432, 436, 437, 438, 439, 442, 451, 452, 454, 457, 459, 461, 462, 465, 471, 473, 474, 475, 478, 479, 491, 492, 493, 495, 496, 497, 500, 504, 506, 511, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 531, 539, 552, 553, 554, 557, 559, 561, 562, 563, 564, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 612, 615, 616, 617, 621, 629, 632, 639, 648, 649, 650, 653, 661, 662, 665, 677, 678, 680, 690, 691, 693, 703, 704, 709, 711, 714, 715, 716, 717, 721, 722, 723, 724, 725, 727, 729, 730, 743, 744, 753, 756, 761, 763, 764, 765, 766, 769, 782, 789, 790, 791, 794, 803, 805, 806, 807, 808, 809, 811, 813, 823, 827, 828, 833, 842, 843, 845, 848, 850, 852, 853, 856, 864, 867, 868, 878, 885, 894], "c": [1, 23, 24, 25, 28, 45, 55, 57, 79, 81, 91, 99, 109, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131, 132, 133, 134, 136, 137, 138, 139, 142, 144, 145, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 169, 170, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 191, 195, 196, 197, 199, 202, 204, 205, 208, 213, 214, 215, 216, 217, 218, 220, 222, 224, 225, 239, 252, 266, 274, 276, 378, 430, 461, 465, 481, 483, 486, 491, 492, 493, 495, 496, 497, 500, 506, 508, 511, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 539, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 565, 568, 569, 574, 577, 583, 587, 590, 591, 592, 593, 596, 599, 600, 609, 610, 611, 616, 617, 621, 691, 770, 852, 856, 881, 894], "5": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 28, 54, 55, 57, 58, 59, 62, 63, 77, 79, 80, 81, 82, 85, 86, 89, 105, 110, 111, 114, 117, 118, 119, 121, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 155, 157, 159, 162, 163, 168, 169, 170, 173, 177, 181, 189, 190, 191, 192, 193, 198, 202, 203, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 247, 269, 270, 273, 278, 284, 285, 295, 296, 297, 298, 299, 300, 309, 311, 316, 318, 336, 337, 342, 345, 350, 351, 354, 360, 363, 366, 369, 372, 374, 375, 376, 378, 383, 402, 403, 405, 407, 408, 412, 413, 414, 415, 416, 418, 422, 424, 426, 432, 443, 450, 451, 454, 468, 471, 473, 475, 479, 491, 494, 496, 497, 500, 503, 504, 505, 506, 511, 515, 516, 517, 518, 519, 520, 525, 526, 528, 529, 530, 539, 552, 553, 554, 557, 561, 562, 563, 564, 566, 568, 569, 570, 571, 573, 575, 576, 577, 578, 581, 582, 583, 587, 594, 595, 596, 599, 601, 602, 603, 604, 608, 609, 610, 612, 615, 616, 617, 621, 629, 632, 636, 639, 649, 650, 653, 656, 665, 676, 678, 680, 686, 690, 691, 693, 698, 699, 700, 701, 723, 724, 729, 730, 732, 739, 742, 753, 782, 789, 790, 791, 793, 794, 800, 801, 802, 804, 805, 808, 811, 813, 823, 829, 834, 841, 842, 879, 885, 894], "6": [1, 23, 24, 25, 26, 27, 28, 55, 57, 62, 77, 79, 80, 81, 82, 83, 117, 120, 122, 123, 124, 125, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 150, 151, 152, 155, 156, 157, 158, 159, 161, 164, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 201, 202, 203, 204, 205, 207, 208, 209, 210, 215, 222, 224, 225, 239, 252, 270, 289, 295, 307, 308, 311, 316, 332, 334, 336, 347, 355, 356, 361, 363, 365, 383, 402, 406, 408, 409, 412, 415, 416, 417, 418, 419, 421, 422, 423, 426, 437, 438, 443, 447, 451, 454, 473, 475, 486, 500, 504, 527, 528, 539, 554, 555, 557, 558, 559, 560, 561, 562, 565, 566, 568, 569, 570, 571, 573, 574, 576, 578, 579, 583, 587, 590, 592, 593, 594, 595, 596, 599, 600, 603, 604, 606, 608, 609, 610, 612, 613, 616, 617, 621, 629, 650, 678, 684, 688, 689, 691, 693, 719, 730, 782, 794, 803, 805, 806, 807, 809, 813, 834, 838, 842, 865, 894], "7": [1, 23, 24, 25, 26, 27, 28, 55, 57, 62, 64, 120, 121, 122, 123, 125, 127, 131, 132, 134, 139, 140, 142, 144, 146, 152, 156, 157, 158, 161, 164, 166, 170, 172, 174, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 195, 196, 197, 202, 203, 204, 205, 239, 308, 316, 317, 333, 335, 340, 343, 346, 352, 363, 365, 402, 412, 416, 422, 473, 475, 527, 528, 539, 555, 558, 560, 561, 565, 569, 570, 571, 573, 574, 578, 588, 590, 592, 593, 600, 603, 604, 609, 613, 621, 636, 699, 700, 705, 722, 727, 730, 808, 894], "float32": [1, 24, 57, 133, 239, 757, 894], "lazi": [1, 57, 62, 64, 86, 99, 110, 114, 153, 167, 210, 239, 252, 287, 402, 489, 509, 539, 548, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 621], "i16": [1, 57, 430, 539], "i32": [1, 57, 79, 110, 180, 239, 295, 346, 430, 531, 539, 593, 621, 705, 733], "f32": [1, 57, 239, 269, 408, 430, 504, 539, 649, 794, 894], "i64": [1, 11, 15, 55, 56, 57, 58, 62, 77, 78, 79, 80, 81, 82, 86, 99, 111, 114, 117, 118, 119, 120, 122, 124, 125, 127, 128, 130, 131, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 150, 152, 153, 155, 156, 159, 161, 165, 167, 168, 169, 172, 173, 174, 175, 178, 180, 182, 183, 185, 186, 188, 189, 190, 192, 197, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 224, 225, 239, 248, 251, 252, 268, 269, 270, 271, 272, 273, 275, 277, 279, 280, 281, 282, 283, 284, 285, 288, 289, 296, 298, 299, 300, 305, 306, 307, 308, 310, 311, 318, 319, 321, 324, 326, 328, 331, 337, 339, 351, 354, 356, 357, 358, 361, 363, 364, 365, 366, 369, 372, 374, 375, 376, 378, 380, 383, 386, 387, 388, 397, 402, 403, 405, 406, 409, 410, 412, 413, 425, 427, 428, 430, 431, 432, 436, 437, 455, 456, 470, 471, 472, 473, 474, 475, 479, 480, 482, 485, 486, 493, 495, 500, 504, 505, 506, 511, 515, 518, 524, 527, 528, 529, 531, 539, 552, 554, 558, 559, 561, 562, 564, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 583, 585, 586, 587, 590, 591, 593, 594, 595, 599, 600, 602, 603, 604, 605, 606, 609, 610, 612, 615, 616, 617, 621, 629, 630, 648, 649, 650, 653, 661, 662, 665, 676, 680, 683, 686, 687, 688, 689, 691, 698, 701, 702, 704, 710, 712, 715, 718, 724, 726, 742, 744, 745, 751, 753, 761, 774, 781, 797, 801, 804, 808, 811, 814, 815, 818, 822, 823, 827, 828, 864, 866, 867, 868, 874, 880, 882, 885, 894], "register_series_namespac": [1, 55, 56, 57], "math": [1, 58, 684, 824, 869, 894], "mathshortcut": [1, 58], "": [1, 24, 58, 63, 88, 89, 111, 122, 124, 126, 138, 139, 145, 152, 153, 173, 174, 190, 210, 239, 268, 273, 274, 281, 282, 285, 319, 351, 379, 393, 397, 399, 400, 402, 403, 410, 414, 438, 451, 452, 454, 457, 459, 460, 462, 465, 468, 470, 500, 503, 505, 508, 509, 515, 518, 520, 528, 539, 559, 568, 569, 575, 604, 614, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 648, 650, 653, 654, 656, 661, 662, 665, 674, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 693, 698, 699, 702, 722, 727, 736, 738, 739, 742, 743, 744, 745, 747, 750, 751, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 785, 786, 789, 790, 791, 793, 794, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 822, 823, 824, 825, 827, 828, 830, 833, 834, 836, 837, 838, 840, 842, 843, 844, 845, 846, 848, 849, 850, 853, 854, 855, 856, 859, 862, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 894], "_": [1, 54, 58, 461, 852], "squar": [1, 58, 212, 379, 439, 539, 615, 772, 829, 894], "cube": [1, 58], "s2": [1, 107, 133, 239, 629, 678, 693, 761, 782, 813, 885, 894], "renam": [1, 88, 89, 239, 248, 388, 395, 470, 539, 621, 862, 874, 894], "n2": 1, "in_plac": [1, 144, 184, 205, 239, 795, 797, 821, 828, 894], "true": [1, 8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 59, 61, 62, 64, 77, 81, 85, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 118, 119, 121, 130, 133, 134, 136, 137, 139, 145, 147, 148, 149, 151, 153, 154, 157, 162, 163, 165, 168, 169, 176, 177, 186, 192, 199, 200, 201, 202, 203, 208, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 247, 249, 250, 251, 252, 267, 286, 291, 295, 304, 305, 306, 307, 308, 335, 336, 340, 347, 348, 349, 350, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 410, 420, 425, 430, 435, 437, 438, 442, 444, 446, 450, 460, 461, 463, 465, 469, 470, 474, 479, 480, 483, 488, 489, 496, 523, 525, 527, 531, 539, 552, 553, 554, 556, 557, 562, 564, 568, 569, 574, 575, 577, 579, 587, 596, 597, 598, 600, 605, 606, 610, 621, 627, 628, 629, 630, 640, 666, 670, 674, 678, 679, 722, 723, 727, 735, 737, 738, 739, 745, 749, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 782, 790, 791, 796, 806, 813, 826, 828, 833, 835, 837, 841, 851, 852, 854, 856, 876, 879, 884, 885, 894], "s3": [1, 90, 100, 101, 894], "n3": 1, "8": [1, 23, 24, 25, 26, 27, 28, 38, 51, 53, 54, 55, 57, 58, 62, 105, 109, 110, 117, 120, 121, 122, 123, 124, 125, 127, 131, 132, 134, 137, 142, 144, 152, 156, 157, 158, 161, 166, 170, 172, 174, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 195, 196, 197, 202, 204, 205, 208, 239, 251, 262, 268, 269, 303, 305, 308, 309, 312, 313, 316, 365, 381, 402, 404, 405, 412, 413, 416, 417, 419, 421, 423, 430, 436, 452, 457, 465, 471, 475, 491, 496, 497, 500, 504, 506, 511, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 539, 555, 558, 559, 560, 561, 565, 571, 574, 578, 579, 587, 590, 592, 593, 600, 603, 604, 609, 610, 613, 621, 648, 649, 690, 705, 789, 800, 803, 805, 806, 807, 809, 843, 848, 856, 894], "9": [1, 23, 24, 25, 28, 54, 62, 117, 133, 140, 142, 146, 166, 180, 189, 202, 205, 207, 208, 210, 224, 239, 251, 262, 280, 283, 303, 305, 308, 312, 313, 316, 317, 333, 342, 343, 365, 370, 378, 381, 402, 412, 414, 416, 422, 432, 436, 475, 492, 494, 527, 539, 570, 571, 573, 578, 593, 600, 603, 609, 610, 621, 700, 709, 711, 717, 722, 723, 727, 729, 761, 800, 808, 810, 823, 894], "27": [1, 58, 224, 308, 334, 346, 404, 539], "16": [1, 35, 48, 56, 105, 139, 140, 207, 208, 239, 305, 308, 353, 359, 365, 416, 503, 504, 539, 569, 570, 596, 609, 610, 621, 722, 727, 741, 789, 824, 869, 894], "64": [1, 28, 34, 37, 50, 56, 58, 239, 404, 539, 598, 621, 789, 894], "25": [1, 58, 64, 139, 140, 153, 203, 207, 208, 239, 335, 340, 346, 509, 569, 570, 575, 581, 607, 609, 610, 621, 722, 727, 735, 789, 894], "125": [1, 58, 789, 894], "arg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 167, 196, 239, 508, 586, 621, 630, 876, 894], "ani": [2, 3, 4, 6, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 60, 77, 78, 79, 80, 82, 88, 89, 90, 91, 92, 96, 99, 100, 102, 104, 108, 110, 111, 117, 124, 128, 130, 131, 133, 150, 151, 165, 166, 167, 176, 177, 192, 193, 195, 196, 202, 208, 239, 252, 266, 269, 295, 336, 356, 370, 387, 395, 412, 414, 426, 429, 437, 465, 474, 488, 506, 513, 525, 539, 559, 564, 586, 610, 621, 629, 630, 646, 649, 693, 723, 744, 761, 771, 798, 800, 812, 815, 856, 867, 875, 876, 894], "kwarg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 166, 167, 196, 208, 239, 586, 610, 621, 876, 894], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 539, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 894, 900], "method": [2, 3, 4, 6, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 88, 89, 91, 108, 124, 146, 151, 163, 170, 177, 200, 207, 208, 223, 239, 249, 341, 365, 407, 408, 415, 416, 417, 418, 419, 421, 422, 423, 481, 521, 532, 533, 535, 539, 540, 543, 544, 545, 548, 559, 573, 588, 605, 609, 610, 621, 630, 728, 753, 793, 794, 805, 878, 886, 888, 890, 894, 897, 898, 899], "A": [4, 24, 42, 61, 64, 83, 88, 89, 96, 98, 99, 100, 133, 139, 153, 165, 168, 192, 194, 202, 203, 222, 239, 246, 287, 316, 318, 321, 324, 326, 328, 331, 337, 354, 368, 371, 372, 374, 387, 388, 393, 405, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 442, 443, 448, 449, 450, 468, 471, 493, 494, 504, 508, 539, 569, 575, 590, 600, 621, 667, 699, 701, 704, 710, 712, 715, 718, 724, 742, 800, 801, 802, 804, 807, 808, 809, 833, 834, 839, 840, 841, 846, 847, 856, 859, 894], "encod": [4, 53, 88, 89, 99, 194, 239, 291, 444, 670, 835], "set": [4, 5, 6, 7, 8, 9, 10, 11, 14, 19, 20, 22, 24, 26, 27, 55, 64, 79, 82, 88, 89, 91, 92, 96, 99, 102, 103, 104, 106, 107, 109, 110, 111, 120, 141, 151, 153, 159, 178, 185, 199, 239, 252, 282, 286, 287, 344, 345, 362, 370, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 431, 435, 436, 453, 458, 459, 464, 493, 539, 548, 555, 574, 575, 579, 583, 597, 598, 599, 613, 615, 621, 629, 630, 662, 666, 667, 731, 732, 750, 761, 800, 801, 802, 803, 804, 805, 807, 808, 809, 811, 815, 826, 827, 844, 849, 850, 855, 876, 894], "string": [4, 5, 7, 9, 10, 14, 24, 26, 27, 31, 45, 53, 64, 88, 89, 99, 108, 109, 111, 113, 133, 139, 140, 153, 186, 202, 203, 239, 274, 293, 296, 332, 335, 340, 353, 415, 416, 417, 418, 419, 421, 422, 423, 441, 442, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 493, 495, 508, 515, 518, 539, 556, 557, 567, 569, 570, 575, 613, 621, 654, 672, 676, 719, 722, 727, 741, 831, 832, 833, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 894], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 567, 589, 621], "cfg": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "previous": 5, "save": [5, 548], "share": [5, 45, 126, 239, 736, 894], "option": [5, 6, 7, 14, 54, 64, 88, 90, 91, 92, 96, 100, 102, 104, 105, 108, 109, 110, 111, 124, 153, 159, 163, 192, 194, 199, 203, 208, 239, 379, 414, 415, 416, 417, 418, 419, 421, 422, 423, 435, 459, 486, 489, 513, 527, 539, 548, 574, 575, 583, 610, 621, 772, 800, 801, 802, 803, 804, 805, 807, 808, 809, 815, 826, 850, 874, 894], "paramet": [5, 9, 10, 11, 14, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 39, 42, 44, 46, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 114, 117, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 152, 153, 155, 157, 159, 160, 162, 163, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 178, 180, 182, 183, 185, 186, 187, 188, 189, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 215, 222, 223, 225, 239, 248, 251, 252, 261, 263, 266, 267, 268, 269, 272, 273, 274, 281, 282, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 319, 332, 335, 339, 340, 341, 344, 345, 347, 348, 349, 350, 351, 354, 356, 357, 361, 362, 363, 365, 366, 370, 379, 382, 384, 387, 388, 402, 403, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 473, 474, 479, 480, 483, 484, 485, 486, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 507, 508, 509, 511, 513, 514, 515, 520, 521, 522, 523, 524, 525, 527, 528, 529, 539, 554, 557, 558, 559, 562, 563, 564, 565, 567, 568, 569, 570, 571, 574, 575, 578, 579, 583, 584, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 603, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621, 626, 629, 630, 639, 642, 646, 647, 648, 649, 652, 653, 654, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 680, 681, 682, 686, 687, 688, 689, 690, 692, 693, 697, 698, 699, 702, 719, 722, 726, 727, 728, 731, 732, 735, 736, 737, 738, 739, 742, 743, 744, 745, 750, 751, 753, 768, 772, 774, 789, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 822, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 862, 866, 867, 874, 875, 876, 879, 880, 882, 883, 884, 885, 894], "json": [5, 7, 26, 27, 94, 95, 103, 239, 450, 548, 567, 589, 613, 621, 841], "produc": [5, 110, 111, 392, 514], "reset": 6, "default": [6, 22, 23, 24, 25, 26, 27, 28, 77, 78, 79, 80, 81, 82, 86, 88, 89, 96, 99, 108, 109, 110, 111, 114, 126, 138, 140, 141, 151, 153, 159, 168, 178, 200, 209, 239, 282, 286, 287, 296, 347, 362, 366, 384, 399, 400, 403, 408, 425, 431, 448, 453, 458, 459, 464, 465, 489, 490, 509, 513, 525, 539, 557, 568, 570, 575, 583, 598, 605, 613, 621, 662, 666, 667, 676, 735, 736, 750, 785, 786, 789, 794, 811, 830, 839, 844, 849, 850, 855, 883, 894], "state": [6, 61, 72, 498, 548, 554, 562, 587, 596, 621], "note": [6, 14, 54, 64, 77, 78, 80, 82, 86, 88, 90, 96, 98, 100, 109, 110, 111, 114, 117, 129, 138, 139, 140, 151, 152, 153, 163, 166, 167, 176, 193, 195, 199, 203, 207, 208, 222, 239, 242, 269, 286, 307, 308, 312, 313, 332, 335, 340, 372, 374, 415, 416, 417, 418, 419, 421, 422, 423, 435, 451, 453, 454, 458, 464, 465, 472, 498, 507, 522, 539, 554, 562, 563, 569, 570, 571, 575, 578, 590, 596, 609, 610, 621, 649, 666, 688, 689, 719, 727, 814, 815, 821, 826, 842, 844, 845, 849, 855, 865, 876, 894], "oper": [6, 45, 62, 68, 69, 77, 78, 79, 80, 81, 82, 88, 96, 117, 128, 133, 138, 145, 154, 160, 163, 165, 167, 171, 191, 195, 196, 199, 202, 210, 222, 239, 247, 287, 304, 305, 306, 307, 308, 309, 378, 395, 408, 410, 486, 487, 504, 539, 562, 568, 571, 574, 578, 584, 621, 629, 686, 687, 688, 689, 690, 794, 796, 872, 875, 876, 884, 894], "remov": [6, 122, 222, 239, 242, 351, 353, 359, 453, 458, 464, 505, 539, 558, 621, 741, 844, 849, 855, 894], "from": [6, 24, 54, 64, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 121, 122, 126, 128, 137, 139, 140, 151, 153, 154, 159, 172, 176, 178, 180, 199, 200, 202, 203, 239, 304, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 351, 365, 379, 399, 400, 403, 425, 437, 438, 448, 465, 481, 483, 492, 493, 501, 502, 503, 505, 513, 525, 538, 539, 558, 562, 567, 569, 570, 575, 583, 589, 590, 593, 605, 609, 611, 621, 629, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 736, 755, 772, 785, 786, 787, 789, 811, 839, 882, 885, 894], "environ": [6, 22], "local": [6, 90, 100, 341, 728, 790, 791, 894], "flag": [6, 108, 208, 239, 427, 539, 557, 579, 610, 621, 816, 894], "back": [6, 54, 128, 239, 629, 894], "valu": [6, 9, 22, 24, 26, 39, 40, 52, 54, 62, 63, 79, 81, 88, 89, 98, 99, 101, 106, 107, 108, 109, 110, 111, 113, 117, 124, 128, 129, 130, 134, 137, 139, 140, 141, 142, 146, 151, 156, 157, 158, 159, 161, 163, 165, 168, 169, 170, 172, 176, 177, 178, 182, 183, 186, 187, 188, 189, 192, 202, 203, 204, 213, 214, 216, 217, 218, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 239, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 271, 272, 273, 275, 277, 278, 279, 281, 284, 285, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 305, 308, 309, 310, 312, 313, 316, 317, 329, 333, 342, 348, 349, 350, 352, 354, 355, 356, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 380, 381, 385, 386, 387, 389, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 426, 427, 428, 429, 432, 433, 434, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 455, 456, 459, 461, 462, 463, 468, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483, 492, 495, 496, 498, 499, 500, 506, 507, 513, 515, 516, 517, 518, 519, 522, 523, 528, 531, 539, 559, 563, 564, 569, 570, 572, 573, 580, 581, 582, 583, 585, 588, 590, 594, 595, 600, 601, 602, 607, 613, 614, 621, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 645, 648, 651, 652, 653, 655, 657, 658, 659, 661, 665, 668, 670, 671, 672, 673, 676, 677, 680, 681, 682, 684, 685, 690, 691, 692, 694, 695, 699, 700, 716, 720, 729, 736, 737, 738, 739, 742, 743, 744, 747, 749, 750, 753, 756, 758, 759, 761, 762, 763, 764, 765, 766, 769, 777, 778, 780, 781, 783, 785, 786, 787, 788, 789, 792, 793, 794, 800, 801, 802, 803, 804, 805, 807, 808, 809, 811, 812, 813, 814, 815, 818, 819, 823, 824, 825, 826, 832, 834, 835, 836, 837, 839, 840, 841, 842, 845, 846, 847, 850, 852, 853, 854, 859, 865, 867, 868, 869, 870, 878, 881, 882, 884, 885, 894], "exampl": [6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 503, 504, 505, 506, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 548, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 648, 649, 650, 653, 654, 656, 661, 662, 665, 667, 674, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 736, 738, 739, 742, 743, 744, 745, 747, 750, 751, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 774, 777, 778, 779, 780, 781, 782, 783, 789, 790, 791, 793, 794, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 822, 823, 824, 825, 827, 828, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 894], "current": [7, 22, 118, 119, 208, 239, 287, 335, 403, 539, 548, 552, 553, 610, 621, 679, 683, 722, 789, 894], "activ": [8, 12, 13, 15, 16, 17, 18, 21, 269, 649], "bool": [8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 39, 54, 59, 61, 62, 77, 81, 88, 89, 92, 94, 96, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 118, 119, 130, 131, 133, 134, 136, 137, 138, 139, 144, 145, 147, 148, 149, 153, 165, 168, 178, 184, 186, 192, 196, 199, 200, 201, 203, 205, 208, 214, 216, 217, 220, 239, 249, 250, 251, 252, 261, 263, 267, 269, 283, 286, 291, 295, 304, 305, 306, 307, 308, 309, 336, 347, 348, 349, 350, 354, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 387, 408, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 429, 430, 435, 437, 438, 442, 444, 446, 455, 456, 460, 461, 463, 465, 469, 470, 479, 480, 483, 488, 489, 490, 492, 498, 513, 523, 525, 527, 531, 539, 552, 554, 556, 557, 562, 564, 565, 568, 569, 574, 575, 579, 587, 596, 597, 598, 600, 605, 606, 610, 613, 621, 627, 628, 629, 630, 639, 642, 647, 649, 663, 666, 670, 674, 679, 686, 687, 688, 689, 690, 723, 735, 737, 738, 739, 742, 745, 749, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 790, 791, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 815, 816, 821, 826, 828, 833, 835, 837, 846, 847, 851, 852, 854, 856, 875, 876, 879, 880, 882, 884, 894], "ascii": [8, 14, 452, 454, 457, 468, 843, 845, 848, 859], "charact": [8, 9, 14, 20, 24, 88, 89, 99, 239, 332, 359, 447, 451, 452, 453, 457, 458, 460, 461, 464, 468, 539, 587, 621, 719, 838, 842, 843, 844, 848, 849, 851, 852, 855, 859], "print": [8, 9, 11, 13, 19, 105, 125, 137, 138, 154, 239, 364, 539, 572, 621, 761, 800, 894], "tabl": [8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 44, 77, 88, 89, 90, 99, 100, 168, 191, 196, 202, 222, 239], "outlin": 8, "fals": [8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 26, 28, 54, 59, 61, 64, 88, 89, 91, 92, 96, 99, 103, 104, 106, 107, 108, 109, 110, 111, 118, 119, 121, 133, 134, 136, 137, 138, 139, 144, 145, 147, 148, 149, 151, 153, 154, 157, 162, 163, 165, 168, 169, 176, 177, 178, 184, 186, 192, 196, 199, 203, 205, 208, 213, 214, 216, 217, 218, 220, 224, 239, 249, 250, 252, 261, 263, 267, 269, 283, 286, 304, 305, 306, 307, 308, 309, 336, 347, 348, 349, 350, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 387, 408, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 430, 435, 437, 438, 442, 446, 455, 456, 460, 461, 463, 465, 479, 480, 483, 489, 490, 498, 513, 523, 525, 527, 531, 539, 552, 553, 554, 556, 557, 562, 568, 569, 574, 575, 577, 579, 587, 596, 597, 598, 600, 610, 621, 629, 639, 642, 649, 663, 666, 674, 678, 679, 686, 687, 688, 689, 690, 723, 735, 737, 738, 739, 745, 754, 756, 758, 761, 762, 763, 764, 765, 766, 768, 769, 772, 782, 790, 791, 794, 795, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 816, 821, 826, 828, 833, 837, 846, 847, 851, 852, 854, 856, 875, 876, 879, 880, 882, 884, 885, 894], "revert": 8, "abc": [8, 12, 13, 15, 16, 17, 18, 19, 455, 846], "xyz": [8, 12, 13, 15, 16, 17, 18, 19, 443, 449, 834, 840, 874, 894], "f64": [8, 10, 12, 13, 15, 16, 17, 18, 19, 54, 56, 58, 63, 101, 110, 118, 119, 121, 122, 124, 125, 129, 130, 133, 136, 137, 145, 152, 153, 157, 158, 166, 169, 170, 185, 186, 187, 204, 207, 208, 214, 216, 217, 218, 219, 220, 223, 224, 239, 246, 253, 254, 255, 256, 257, 258, 278, 295, 297, 301, 302, 309, 312, 313, 336, 347, 348, 349, 350, 351, 352, 360, 365, 372, 374, 375, 376, 378, 379, 384, 385, 389, 390, 391, 396, 399, 400, 403, 404, 407, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 433, 434, 435, 439, 440, 476, 477, 484, 491, 492, 494, 497, 505, 516, 517, 520, 525, 526, 530, 539, 552, 558, 559, 563, 564, 574, 575, 581, 582, 588, 600, 601, 607, 609, 610, 611, 621, 631, 632, 633, 634, 635, 636, 677, 684, 685, 690, 691, 723, 738, 739, 743, 747, 789, 800, 802, 803, 805, 806, 807, 809, 810, 824, 825, 829, 869, 870, 894], "int": [9, 11, 19, 20, 24, 28, 39, 56, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 114, 117, 126, 129, 130, 132, 141, 142, 143, 145, 151, 153, 155, 156, 157, 161, 162, 163, 174, 176, 178, 181, 182, 183, 185, 187, 188, 189, 190, 197, 202, 204, 206, 209, 215, 225, 239, 267, 268, 272, 273, 281, 282, 285, 286, 287, 289, 298, 299, 300, 309, 310, 348, 349, 350, 354, 355, 356, 361, 362, 363, 366, 382, 403, 404, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 436, 440, 448, 452, 457, 459, 461, 462, 468, 469, 470, 473, 474, 475, 479, 484, 489, 492, 496, 500, 501, 502, 503, 509, 511, 515, 517, 518, 519, 520, 523, 525, 526, 527, 528, 529, 530, 539, 562, 563, 564, 571, 575, 578, 587, 594, 595, 598, 599, 601, 603, 604, 607, 608, 612, 616, 617, 621, 637, 638, 647, 648, 652, 653, 661, 662, 665, 666, 667, 674, 678, 680, 681, 682, 690, 692, 736, 737, 738, 739, 742, 743, 744, 750, 751, 773, 774, 777, 778, 780, 782, 783, 785, 786, 787, 788, 789, 792, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 818, 819, 822, 827, 830, 839, 843, 848, 850, 852, 853, 859, 865, 866, 867, 868, 879, 883, 894], "number": [9, 11, 19, 20, 24, 28, 54, 73, 77, 85, 86, 88, 89, 91, 99, 103, 109, 110, 114, 126, 127, 129, 130, 142, 151, 154, 155, 162, 163, 178, 182, 183, 189, 202, 213, 215, 225, 239, 268, 273, 281, 285, 287, 289, 303, 309, 310, 320, 322, 327, 329, 336, 342, 343, 346, 348, 349, 350, 354, 356, 361, 363, 372, 374, 381, 382, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 428, 429, 431, 451, 454, 461, 462, 473, 479, 496, 511, 525, 529, 539, 561, 562, 563, 564, 571, 578, 587, 594, 595, 598, 603, 616, 617, 621, 648, 653, 661, 665, 667, 690, 692, 703, 705, 714, 716, 723, 729, 730, 733, 736, 737, 738, 739, 742, 744, 751, 760, 774, 782, 783, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 818, 819, 822, 830, 842, 845, 852, 853, 866, 879, 883, 894], "format": [10, 14, 24, 26, 87, 88, 89, 94, 99, 101, 127, 159, 237, 239, 335, 338, 465, 561, 567, 583, 613, 621, 725, 856, 893], "liter": [10, 14, 59, 64, 91, 111, 151, 156, 157, 161, 162, 165, 176, 177, 180, 188, 192, 239, 249, 250, 316, 354, 378, 409, 442, 455, 456, 489, 501, 502, 509, 513, 523, 527, 531, 539, 564, 593, 621, 627, 628, 699, 742, 814, 815, 833, 846, 847, 894], "left": [10, 64, 106, 107, 139, 140, 152, 153, 239, 348, 349, 350, 365, 366, 415, 416, 417, 418, 419, 421, 422, 423, 426, 452, 468, 478, 492, 498, 499, 507, 522, 539, 569, 570, 574, 575, 621, 737, 738, 739, 812, 843, 859, 878, 894], "center": [10, 348, 349, 350, 414, 415, 416, 417, 418, 419, 421, 422, 423, 539, 737, 738, 739, 800, 801, 802, 803, 804, 805, 807, 808, 809, 894], "right": [10, 12, 64, 88, 89, 106, 107, 139, 140, 152, 153, 239, 348, 349, 350, 366, 415, 416, 417, 418, 419, 421, 422, 423, 426, 435, 457, 492, 539, 569, 570, 574, 575, 621, 737, 738, 739, 812, 826, 848, 894], "cell": 10, "align": [10, 54, 468, 859], "keyerror": [10, 14], "recognis": [10, 14, 108], "column_abc": 10, "column_xyz": 10, "If": [11, 24, 26, 27, 28, 45, 60, 63, 64, 77, 78, 80, 81, 82, 88, 89, 90, 91, 92, 96, 99, 100, 102, 103, 104, 117, 128, 139, 140, 151, 153, 159, 163, 165, 178, 185, 195, 196, 199, 222, 239, 252, 282, 287, 298, 299, 300, 316, 357, 379, 387, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 431, 435, 436, 437, 438, 451, 453, 454, 458, 459, 460, 461, 462, 464, 465, 479, 486, 488, 489, 490, 496, 498, 507, 513, 525, 539, 569, 570, 574, 575, 579, 583, 590, 598, 599, 613, 615, 621, 629, 630, 662, 680, 681, 682, 699, 732, 749, 772, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 816, 826, 827, 842, 844, 845, 849, 850, 851, 852, 853, 855, 856, 872, 876, 879, 884, 894], "rang": [11, 63, 64, 98, 126, 139, 239, 317, 329, 333, 334, 335, 340, 342, 365, 489, 494, 501, 502, 539, 569, 621, 700, 716, 720, 721, 722, 727, 729, 736, 789, 894], "100": [11, 79, 82, 88, 89, 99, 103, 239, 468, 489, 801, 802, 804, 894], "98": [11, 145, 239, 437, 438, 474, 479, 539], "99": [11, 129, 130, 145, 148, 239, 247, 354, 356, 437, 438, 474, 479, 492, 539, 563, 564, 621, 735, 742, 894], "10": [11, 23, 24, 25, 28, 54, 62, 63, 64, 98, 99, 105, 110, 111, 119, 128, 136, 139, 140, 142, 144, 145, 146, 162, 167, 169, 173, 174, 180, 189, 208, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 239, 251, 259, 260, 261, 262, 263, 268, 273, 281, 282, 285, 298, 303, 305, 308, 310, 312, 313, 316, 335, 340, 344, 359, 362, 363, 365, 370, 378, 381, 382, 385, 403, 416, 436, 468, 473, 504, 509, 511, 529, 539, 554, 569, 570, 571, 573, 578, 586, 587, 593, 598, 602, 603, 610, 621, 630, 648, 653, 661, 662, 665, 680, 699, 727, 731, 735, 751, 761, 774, 776, 789, 814, 815, 866, 894], "95": [11, 247, 539], "96": [11, 247, 539], "97": [11, 145, 239, 247, 539], "move": [12, 341, 348, 349, 350, 415, 416, 418, 422, 539, 728, 737, 738, 739, 801, 802, 804, 808, 894], "inlin": 12, "parenthes": 12, "below": [13, 90, 100, 124, 138, 239, 365, 531, 539, 559, 621], "when": [13, 17, 28, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 89, 92, 96, 99, 102, 103, 110, 111, 113, 117, 125, 126, 128, 130, 133, 139, 167, 176, 180, 239, 298, 299, 300, 348, 349, 350, 356, 387, 393, 453, 458, 464, 465, 498, 507, 539, 564, 569, 593, 598, 621, 629, 680, 681, 682, 736, 737, 738, 739, 744, 814, 815, 844, 849, 855, 894], "displai": [13, 17], "ascii_ful": 14, "ascii_full_condens": 14, "ascii_no_bord": 14, "ascii_borders_onli": 14, "ascii_borders_only_condens": 14, "ascii_horizontal_onli": 14, "ascii_markdown": 14, "utf8_ful": [14, 54], "utf8_full_condens": 14, "utf8_no_bord": 14, "utf8_borders_onli": 14, "utf8_horizontal_onli": 14, "noth": [14, 443, 448, 449, 450, 834, 839, 840, 841], "none": [14, 22, 23, 24, 25, 26, 27, 28, 31, 40, 44, 54, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 121, 124, 129, 130, 137, 139, 140, 141, 146, 152, 153, 154, 157, 159, 163, 164, 176, 178, 183, 185, 192, 194, 199, 200, 201, 202, 203, 208, 239, 248, 251, 252, 262, 272, 282, 287, 289, 298, 299, 300, 303, 305, 308, 312, 313, 335, 340, 345, 348, 349, 350, 351, 354, 355, 356, 361, 362, 365, 366, 372, 373, 374, 375, 376, 381, 387, 401, 403, 409, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 429, 430, 431, 432, 436, 441, 442, 445, 446, 450, 451, 452, 453, 454, 457, 458, 459, 461, 462, 463, 464, 465, 468, 469, 470, 478, 486, 488, 489, 492, 495, 496, 502, 503, 505, 506, 513, 514, 523, 526, 527, 530, 539, 552, 553, 559, 563, 564, 569, 570, 573, 574, 575, 577, 579, 583, 595, 596, 597, 598, 599, 600, 605, 606, 610, 611, 613, 615, 621, 630, 637, 638, 652, 662, 667, 679, 680, 691, 693, 722, 727, 732, 734, 735, 737, 738, 739, 742, 743, 744, 746, 749, 750, 752, 753, 765, 766, 772, 784, 800, 801, 802, 803, 804, 805, 807, 808, 809, 811, 817, 819, 822, 823, 826, 827, 830, 832, 833, 836, 837, 841, 842, 843, 844, 845, 848, 849, 850, 852, 853, 854, 855, 856, 871, 874, 875, 878, 883, 884, 894], "rounded_corn": 14, "style": [14, 168, 239], "border": 14, "line": [14, 88, 89, 91, 99, 137, 239], "includ": [14, 22, 24, 60, 90, 100, 110, 126, 139, 199, 202, 239, 336, 366, 460, 461, 498, 539, 569, 621, 723, 736, 851, 852, 884, 894], "row": [14, 19, 24, 26, 28, 54, 55, 57, 70, 73, 76, 79, 80, 82, 88, 89, 91, 92, 96, 99, 102, 103, 104, 106, 109, 110, 117, 124, 128, 131, 133, 137, 139, 141, 142, 147, 149, 151, 153, 154, 155, 159, 163, 185, 189, 190, 193, 200, 202, 209, 212, 215, 225, 239, 252, 270, 353, 359, 363, 382, 403, 412, 436, 447, 473, 498, 499, 507, 511, 515, 518, 522, 529, 539, 554, 559, 562, 565, 566, 569, 571, 575, 576, 578, 579, 583, 598, 599, 603, 604, 605, 612, 615, 616, 617, 621, 629, 650, 741, 751, 774, 789, 798, 827, 838, 866, 894], "divid": [14, 335, 340, 348, 349, 350, 379, 539, 722, 727, 737, 738, 739, 772, 894], "same": [14, 45, 54, 61, 109, 117, 200, 212, 239, 246, 251, 252, 353, 359, 414, 415, 416, 417, 418, 419, 421, 422, 423, 493, 539, 605, 615, 621, 625, 629, 630, 699, 741, 800, 801, 802, 803, 804, 805, 807, 808, 809, 885, 894], "dens": [14, 137, 239, 408, 539, 794, 894], "space": 14, "horizont": [14, 62, 133, 144, 202, 239, 495, 498, 499, 500, 504, 507, 515, 518, 522, 528], "markdown": 14, "compat": [14, 28, 100, 239, 598, 621], "No": 14, "appli": [14, 24, 59, 62, 99, 108, 110, 111, 133, 167, 210, 239, 317, 320, 322, 323, 325, 327, 329, 330, 333, 334, 336, 342, 343, 346, 349, 350, 387, 402, 414, 415, 416, 418, 422, 465, 486, 489, 498, 499, 507, 514, 522, 539, 571, 578, 579, 586, 621, 700, 703, 705, 709, 711, 714, 716, 717, 720, 721, 723, 729, 730, 733, 738, 739, 800, 801, 802, 804, 808, 856, 894], "round": [14, 56, 297, 360, 476, 539, 677, 747, 894], "corner": 14, "op": [14, 111, 411, 539], "The": [14, 28, 39, 46, 54, 60, 77, 85, 88, 96, 98, 99, 100, 117, 139, 140, 141, 146, 153, 160, 176, 201, 203, 212, 222, 239, 252, 286, 287, 289, 290, 291, 292, 317, 329, 332, 333, 335, 340, 342, 354, 359, 361, 362, 387, 408, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 432, 435, 438, 441, 444, 445, 451, 452, 453, 457, 458, 464, 468, 490, 509, 532, 533, 535, 539, 540, 543, 544, 545, 552, 568, 569, 570, 571, 573, 575, 578, 579, 584, 587, 598, 606, 615, 621, 666, 669, 670, 671, 679, 700, 716, 719, 720, 722, 727, 729, 742, 750, 753, 794, 800, 801, 802, 803, 804, 805, 807, 808, 809, 823, 826, 832, 835, 836, 842, 843, 844, 848, 849, 855, 859, 886, 888, 890, 894, 897, 898, 899], "one": [14, 54, 70, 77, 78, 79, 80, 81, 82, 111, 130, 131, 137, 139, 140, 151, 159, 168, 176, 177, 194, 198, 210, 211, 222, 239, 247, 356, 378, 414, 437, 438, 469, 474, 486, 515, 518, 527, 528, 539, 558, 564, 565, 569, 570, 583, 611, 621, 629, 744, 800, 860, 894], "more": [14, 26, 28, 54, 76, 77, 78, 79, 80, 81, 82, 90, 96, 100, 110, 111, 117, 138, 151, 154, 159, 163, 166, 176, 177, 178, 200, 212, 239, 252, 298, 299, 300, 378, 379, 387, 425, 435, 480, 515, 518, 528, 539, 568, 583, 598, 605, 615, 621, 630, 680, 681, 682, 772, 811, 826, 880, 894, 901], "semigraph": 14, "box": [14, 117, 239], "draw": [14, 19, 20], "found": [14, 24, 71, 125, 239, 426, 450, 465, 470, 539, 812, 841, 894], "unicod": 14, "block": [14, 590, 612, 621, 814, 815, 894], "http": [14, 98, 448, 839, 901], "en": 14, "wikipedia": 14, "org": 14, "wiki": 14, "drawing_charact": 14, "box_draw": 14, "hide": [15, 16, 17, 18], "etc": [15, 77, 80, 82, 88, 90, 92, 96, 100, 102, 104, 489, 814, 815, 894], "inform": [17, 60, 79, 90, 100, 166, 239, 298, 299, 300, 379, 435, 539, 587, 621, 680, 681, 682, 772, 826, 894], "separ": [18, 24, 199, 239, 270, 274, 359, 447, 495, 498, 499, 539, 650, 654, 838, 864], "between": [18, 26, 62, 94, 108, 109, 110, 111, 170, 223, 239, 274, 295, 311, 366, 403, 407, 419, 441, 497, 520, 521, 525, 539, 588, 621, 654, 674, 693, 789, 793, 805, 832, 894], "set_tbl_column_data_type_inlin": 18, "max": [19, 28, 110, 111, 121, 130, 139, 140, 168, 239, 298, 299, 305, 356, 402, 408, 415, 427, 462, 539, 564, 569, 570, 598, 614, 621, 667, 680, 681, 686, 691, 744, 794, 801, 816, 853, 894], "both": [19, 24, 45, 64, 139, 140, 152, 153, 160, 176, 239, 251, 366, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 574, 575, 584, 621], "element": [19, 86, 111, 114, 253, 254, 255, 256, 257, 258, 269, 270, 301, 302, 304, 305, 306, 307, 308, 309, 352, 362, 370, 385, 403, 408, 411, 426, 432, 433, 434, 439, 461, 462, 476, 477, 479, 539, 630, 631, 632, 633, 634, 635, 636, 649, 650, 684, 685, 686, 687, 688, 689, 690, 740, 745, 761, 776, 789, 794, 812, 823, 824, 825, 829, 830, 852, 853, 869, 870, 879, 880, 883, 894], "width": [20, 88, 89, 239, 452, 457, 468, 621, 843, 848, 859], "char": [20, 45, 454, 845], "enabl": [21, 427, 539, 816, 894], "addit": [21, 90, 100, 108, 109, 354, 539, 742, 894], "verbos": 21, "debug": [21, 554, 562, 579, 621], "log": [21, 56, 347, 479, 539, 735, 879, 894], "if_set": 22, "dict": [22, 28, 55, 57, 60, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 102, 104, 110, 165, 166, 172, 179, 192, 193, 239, 527, 590, 592, 621], "show": [22, 124, 137, 154, 164, 239, 559, 587, 596, 621], "variabl": [22, 83, 159, 194, 239, 583, 621, 873, 894], "chang": [22, 54, 63, 88, 89, 101, 202, 203, 239, 309, 335, 403, 415, 416, 417, 418, 419, 421, 422, 423, 539, 690, 698, 722, 789, 821, 894], "restrict": [22, 462, 853], "dictionari": [22, 77, 78, 79, 82, 88, 89, 93, 97, 99, 165, 192, 193, 239, 691, 894], "those": [22, 408, 539, 794, 894], "_have_": 22, "been": [22, 242, 408, 539, 794, 894], "set_stat": 22, "all_stat": 22, "file": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 128, 239, 562, 589, 597, 598, 613, 621, 629, 894], "binaryio": [23, 25, 87, 88, 91, 92, 93, 96, 97, 239], "bytesio": [23, 24, 25, 28, 87, 88, 89, 91, 92, 96, 239], "path": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 239, 427, 450, 539, 589, 597, 598, 613, 621, 816, 841, 894], "compress": [23, 25, 28, 239, 597, 598, 621], "avrocompress": [23, 239], "uncompress": [23, 25, 28, 92, 102, 239, 598, 621], "write": [23, 24, 25, 26, 28, 239, 298, 299, 300, 539, 577, 596, 598, 613, 621, 680, 681, 682, 894], "apach": [23, 28, 87, 239], "avro": [23, 87, 239, 548], "should": [23, 24, 25, 26, 27, 28, 77, 86, 108, 109, 111, 114, 117, 139, 151, 153, 212, 239, 247, 252, 269, 296, 309, 344, 372, 374, 414, 415, 416, 417, 418, 419, 421, 422, 423, 426, 435, 513, 539, 558, 569, 574, 575, 579, 596, 597, 598, 613, 615, 621, 630, 649, 676, 690, 731, 800, 801, 802, 803, 804, 805, 807, 808, 809, 812, 826, 894], "written": [23, 24, 25, 26, 27, 28, 239, 597, 598, 613, 621], "snappi": [23, 28, 239, 598, 621], "deflat": [23, 239], "import": [23, 24, 25, 28, 31, 64, 77, 80, 81, 99, 100, 101, 106, 107, 108, 109, 110, 111, 121, 137, 139, 153, 196, 202, 203, 239, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 503, 513, 569, 575, 579, 621, 684, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 755, 758, 762, 763, 764, 800, 824, 869, 894], "pathlib": [23, 24, 25, 26, 27, 28, 87, 91, 92, 93, 94, 95, 97, 99, 102, 103, 239, 589, 613, 621], "foo": [23, 24, 25, 26, 27, 28, 83, 117, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 141, 142, 143, 144, 145, 146, 148, 152, 155, 156, 157, 158, 161, 164, 165, 166, 168, 170, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 199, 200, 201, 204, 205, 206, 210, 222, 239, 248, 267, 271, 272, 275, 276, 298, 299, 300, 332, 359, 363, 364, 404, 412, 428, 429, 441, 443, 445, 447, 449, 453, 458, 460, 462, 464, 466, 467, 473, 475, 486, 489, 491, 493, 496, 497, 506, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 529, 530, 531, 539, 555, 558, 559, 560, 565, 572, 573, 574, 590, 592, 593, 600, 605, 606, 608, 610, 611, 613, 621, 654, 680, 719, 834, 836, 838, 840, 853, 894], "bar": [23, 24, 25, 26, 27, 28, 83, 117, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 142, 144, 145, 146, 148, 152, 155, 156, 157, 158, 161, 164, 165, 166, 168, 170, 172, 173, 174, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 200, 201, 204, 205, 210, 222, 239, 248, 276, 364, 435, 445, 447, 460, 462, 486, 491, 493, 496, 497, 506, 511, 515, 516, 517, 518, 519, 520, 524, 525, 526, 529, 530, 531, 539, 555, 558, 559, 560, 565, 572, 573, 574, 590, 592, 593, 600, 605, 606, 608, 613, 621, 654, 826, 836, 838, 853, 894], "ham": [23, 24, 25, 28, 83, 120, 122, 123, 124, 125, 131, 132, 134, 141, 142, 144, 152, 156, 157, 158, 161, 164, 166, 170, 172, 174, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 194, 195, 196, 197, 200, 204, 205, 239, 493, 555, 558, 559, 560, 565, 574, 590, 592, 593, 600, 605, 611, 621], "d": [23, 24, 25, 28, 45, 62, 101, 121, 137, 141, 142, 145, 152, 155, 189, 191, 202, 205, 208, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 239, 319, 359, 430, 443, 449, 461, 465, 492, 509, 539, 574, 600, 610, 621, 702, 725, 834, 840, 852, 856], "e": [23, 24, 25, 28, 45, 88, 89, 91, 92, 96, 102, 104, 121, 137, 142, 155, 189, 191, 202, 208, 239, 347, 351, 359, 384, 427, 430, 435, 505, 539, 577, 590, 610, 621, 735, 813, 816, 826, 876, 894], "dirpath": [23, 24, 25, 28, 99, 239], "new_fil": [23, 24, 25, 28, 239], "has_head": [24, 88, 89, 91, 99, 239], "sep": [24, 85, 88, 89, 99, 239, 495], "quot": [24, 88, 89, 99, 239], "batch_siz": [24, 88, 89, 103, 239], "1024": [24, 28, 88, 89, 103, 239, 598, 621], "datetime_format": [24, 239], "date_format": [24, 239], "time_format": [24, 239], "float_precis": [24, 239], "null_valu": [24, 88, 89, 99, 239], "_io": [24, 87, 91, 92, 239], "comma": [24, 239], "csv": [24, 88, 89, 91, 99, 239, 548, 597, 598, 614, 621], "result": [24, 26, 27, 54, 77, 78, 80, 82, 98, 99, 101, 102, 104, 111, 128, 139, 150, 163, 183, 210, 239, 348, 349, 350, 379, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 427, 429, 460, 461, 489, 498, 499, 500, 514, 528, 539, 551, 569, 579, 587, 595, 597, 598, 613, 621, 629, 732, 737, 738, 739, 772, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 816, 819, 851, 852, 876, 894], "instead": [24, 26, 27, 86, 96, 110, 114, 117, 139, 151, 163, 165, 176, 177, 239, 261, 263, 366, 451, 453, 458, 464, 489, 539, 563, 568, 569, 613, 621, 639, 642, 814, 815, 842, 844, 849, 855, 894], "whether": [24, 59, 64, 80, 82, 111, 239], "header": [24, 28, 88, 89, 91, 99, 125, 168, 199, 239, 598, 621], "field": [24, 46, 201, 239, 287, 461, 462, 470, 498, 499, 527, 606, 621, 667, 852, 853, 862, 864], "symbol": [24, 239], "byte": [24, 39, 88, 89, 91, 92, 93, 96, 97, 99, 126, 239, 290, 293, 294, 451, 454, 598, 621, 669, 672, 673, 736, 842, 845, 894], "process": [24, 239, 597, 598, 621], "per": [24, 109, 110, 137, 163, 164, 219, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 239, 269, 272, 286, 649, 652, 666], "thread": [24, 85, 88, 89, 98, 112, 239, 269, 649], "specifi": [24, 54, 64, 71, 77, 78, 80, 82, 110, 126, 130, 176, 239, 348, 349, 350, 356, 411, 452, 457, 539, 564, 621, 736, 737, 738, 739, 744, 843, 848, 894], "defin": [24, 31, 64, 108, 109, 110, 117, 139, 140, 163, 167, 212, 239, 252, 286, 366, 415, 416, 417, 418, 419, 421, 422, 423, 488, 513, 527, 539, 569, 570, 586, 615, 621, 630, 666, 894], "chrono": [24, 239, 338, 465, 725, 856], "rust": [24, 28, 72, 92, 96, 117, 212, 239, 252, 539, 615], "crate": [24, 239], "fraction": [24, 106, 107, 178, 239, 336, 403, 425, 465, 539, 723, 789, 811, 894], "second": [24, 64, 139, 140, 153, 203, 239, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 465, 490, 502, 503, 539, 569, 570, 575, 621, 719, 722, 727], "precis": [24, 239, 314, 465, 697], "infer": [24, 77, 78, 79, 80, 81, 82, 88, 89, 91, 99, 103, 108, 117, 239, 412, 465, 539, 798, 894], "maximum": [24, 88, 89, 99, 109, 110, 111, 156, 239, 264, 298, 299, 389, 399, 408, 515, 539, 580, 621, 644, 680, 681, 706, 777, 785, 790, 794, 894], "timeunit": [24, 31, 32, 64, 239, 314, 316, 339, 344, 697, 699, 726, 731], "frame": [24, 54, 91, 106, 110, 117, 151, 160, 163, 167, 176, 177, 196, 202, 239, 584, 586, 621], "datetim": [24, 39, 64, 81, 121, 137, 139, 140, 153, 203, 239, 267, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 366, 415, 416, 417, 418, 419, 421, 422, 423, 465, 478, 492, 503, 509, 513, 518, 539, 569, 570, 575, 621, 647, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 755, 777, 780, 785, 786, 815, 856, 878, 894], "decim": [24, 39, 239, 424, 539, 810, 894], "place": [24, 123, 144, 145, 173, 182, 183, 186, 205, 239, 261, 263, 274, 281, 428, 429, 539, 594, 595, 600, 621, 639, 642, 654, 661, 795, 797, 818, 819, 828, 894], "float64": [24, 86, 110, 114, 125, 126, 133, 179, 239, 253, 254, 255, 256, 257, 258, 295, 301, 302, 336, 351, 372, 374, 433, 434, 476, 477, 492, 493, 505, 539, 560, 592, 621, 723], "datatyp": [24, 26, 39, 46, 52, 77, 84, 86, 88, 89, 91, 93, 97, 111, 114, 133, 179, 239, 270, 295, 351, 430, 447, 465, 478, 488, 489, 493, 505, 513, 514, 527, 539, 548, 560, 592, 613, 621, 630, 650, 674, 691, 755, 767, 770, 820, 838, 856, 878, 894], "repres": [24, 40, 52, 64, 77, 78, 80, 81, 82, 239, 372, 374, 493, 513, 539, 815, 830, 883, 894], "null": [24, 54, 62, 79, 88, 89, 99, 101, 121, 124, 130, 133, 134, 146, 152, 157, 158, 164, 170, 182, 183, 186, 187, 188, 192, 201, 204, 239, 248, 251, 252, 261, 263, 268, 271, 272, 275, 281, 286, 287, 289, 291, 298, 299, 300, 303, 305, 308, 310, 312, 313, 318, 321, 324, 326, 328, 331, 337, 348, 349, 350, 351, 354, 355, 356, 357, 361, 365, 372, 373, 374, 375, 376, 381, 401, 403, 409, 414, 415, 416, 417, 418, 419, 421, 422, 423, 428, 429, 430, 432, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 457, 459, 461, 462, 463, 468, 478, 485, 486, 492, 494, 495, 505, 513, 527, 539, 559, 564, 573, 574, 594, 595, 600, 606, 611, 613, 621, 630, 639, 642, 648, 661, 666, 667, 670, 680, 692, 695, 701, 704, 710, 712, 715, 718, 724, 737, 738, 739, 742, 744, 749, 765, 766, 788, 789, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 813, 818, 819, 823, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 848, 850, 852, 853, 854, 876, 878, 884, 894], "empti": [24, 69, 88, 89, 91, 99, 118, 119, 148, 159, 239, 524, 552, 553, 583, 621, 679, 683, 757, 894], "ipccompress": [25, 239], "arrow": [25, 65, 77, 92, 102, 191, 222, 239, 597, 621, 872, 876, 894], "ipc": [25, 92, 93, 101, 102, 239, 548], "binari": [25, 239, 290, 292, 293, 294, 669, 671, 672, 673], "stream": [25, 61, 239, 554, 556, 562, 587, 596, 597, 598, 621], "feather": [25, 92, 102, 239, 548], "lz4": [25, 28, 239, 597, 598, 621], "zstd": [25, 28, 239, 597, 598, 621], "pretti": [26, 239], "row_ori": [26, 239], "json_lin": [26, 94, 239], "to_str": [26, 239, 613, 621], "io": [26, 27, 94, 95, 239, 589, 613, 621, 901], "iobas": [26, 27, 94, 95, 239, 589, 613, 621], "serial": [26, 27, 239], "represent": [26, 27, 239, 296, 317, 320, 322, 323, 325, 327, 329, 330, 333, 334, 336, 342, 343, 346, 478, 539, 556, 557, 577, 621, 676, 700, 703, 705, 709, 711, 714, 716, 717, 720, 721, 723, 729, 730, 733, 878, 894], "orient": [26, 55, 57, 80, 82, 239], "slower": [26, 80, 82, 117, 165, 203, 212, 239, 252, 539, 615], "common": [26, 239], "deprec": [26, 61, 94, 222, 239, 242, 353, 359, 366, 539, 613, 621, 741, 894], "argument": [26, 28, 61, 88, 90, 94, 96, 100, 139, 140, 157, 166, 167, 168, 188, 196, 203, 239, 335, 340, 366, 415, 416, 417, 418, 419, 421, 422, 423, 453, 458, 464, 539, 569, 570, 586, 613, 621, 722, 727, 844, 849, 855, 894], "toggl": [26, 94, 113, 239, 465, 856], "ndjson": [26, 94, 239], "ignor": [26, 61, 110, 111, 157, 188, 239, 268, 310, 399, 400, 539, 613, 621, 648, 692, 785, 786, 894], "write_ndjson": [26, 239], "newlin": [27, 95, 103, 239], "delimit": [27, 88, 89, 95, 99, 103, 239, 441, 832], "parquetcompress": [28, 239], "compression_level": [28, 239, 598, 621], "statist": [28, 88, 89, 121, 239, 349, 350, 379, 415, 416, 417, 418, 419, 420, 421, 422, 423, 435, 539, 598, 621, 691, 738, 739, 772, 806, 826, 894], "row_group_s": [28, 239, 598, 621], "use_pyarrow": [28, 88, 92, 96, 239, 598, 621, 875, 894], "pyarrow_opt": [28, 90, 96, 100, 239], "object": [28, 64, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 109, 110, 111, 154, 196, 239, 513, 548, 553, 568, 572, 577, 589, 621, 643, 675, 696, 831, 872, 894], "parquet": [28, 96, 97, 104, 239, 548, 598, 621], "gzip": [28, 239, 598, 621], "lzo": [28, 239, 598, 621], "brotli": [28, 239, 598, 621], "choos": [28, 239, 597, 598, 621], "good": [28, 151, 239, 597, 598, 621], "perform": [28, 69, 88, 89, 92, 96, 99, 102, 103, 104, 117, 139, 140, 153, 171, 212, 239, 252, 539, 569, 570, 575, 597, 598, 612, 615, 621], "fast": [28, 239, 427, 539, 597, 598, 621, 816, 894], "decompress": [28, 239, 597, 598, 621], "backward": [28, 130, 153, 239, 289, 356, 539, 564, 575, 598, 621, 744, 894], "guarante": [28, 88, 89, 239, 562, 598, 621], "deal": [28, 239, 408, 465, 539, 598, 621, 794, 856, 894], "older": [28, 239, 598, 621], "reader": [28, 85, 88, 89, 92, 96, 239, 549, 598, 621], "level": [28, 99, 102, 103, 104, 110, 117, 133, 163, 239, 357, 539, 571, 578, 598, 621], "higher": [28, 170, 223, 239, 407, 419, 521, 539, 588, 598, 621, 793, 805, 894], "mean": [28, 83, 88, 89, 96, 99, 121, 130, 168, 194, 239, 353, 356, 359, 416, 435, 448, 491, 539, 564, 598, 621, 691, 741, 744, 749, 802, 826, 839, 894], "smaller": [28, 126, 239, 562, 598, 621, 736, 894], "disk": [28, 239, 596, 597, 598, 621], "min": [28, 110, 111, 121, 130, 139, 140, 168, 239, 298, 300, 306, 356, 408, 418, 524, 539, 564, 569, 570, 598, 621, 680, 682, 687, 691, 744, 794, 804, 894], "11": [28, 138, 140, 239, 312, 313, 332, 335, 340, 365, 403, 422, 436, 468, 493, 528, 539, 554, 568, 570, 571, 578, 587, 598, 603, 621, 630, 719, 722, 727, 800, 894], "22": [28, 239, 335, 340, 344, 465, 493, 598, 621, 722, 727, 731, 856], "extra": [28, 88, 90, 91, 92, 96, 100, 102, 104, 128, 165, 239, 598, 621, 629, 894], "comput": [28, 61, 62, 66, 126, 153, 200, 223, 239, 246, 253, 254, 255, 256, 257, 258, 277, 278, 279, 301, 302, 304, 305, 306, 307, 308, 311, 347, 352, 379, 384, 385, 397, 403, 406, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 433, 434, 435, 439, 476, 477, 497, 504, 520, 525, 539, 572, 574, 575, 598, 605, 611, 621, 625, 631, 632, 633, 634, 635, 636, 657, 658, 659, 684, 685, 686, 687, 688, 689, 693, 735, 736, 740, 772, 775, 776, 781, 789, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 823, 824, 825, 826, 829, 869, 870, 894], "size": [28, 88, 89, 109, 110, 111, 112, 126, 139, 202, 239, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 489, 539, 569, 598, 621, 736, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 894], "group": [28, 138, 139, 140, 163, 165, 168, 202, 203, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 247, 252, 269, 402, 437, 438, 448, 474, 488, 539, 568, 569, 570, 598, 614, 615, 616, 617, 621, 649, 839], "chunk": [28, 85, 88, 89, 99, 102, 103, 104, 110, 111, 128, 162, 239, 251, 409, 539, 598, 621, 629, 678, 748, 782, 795, 872, 894], "reduc": [28, 88, 89, 96, 99, 102, 103, 104, 217, 218, 220, 224, 239, 430, 507, 539, 598, 621, 778, 792, 820, 865, 894], "memori": [28, 62, 77, 80, 81, 82, 88, 89, 92, 96, 99, 102, 103, 104, 117, 128, 184, 212, 222, 239, 252, 409, 430, 539, 598, 615, 621, 629, 795, 820, 821, 894], "pressur": [28, 96, 103, 104, 239, 430, 539, 598, 621, 820, 894], "improv": [28, 92, 102, 239, 598, 621], "speed": [28, 239, 598, 621], "minimum": [28, 109, 110, 111, 133, 161, 239, 298, 300, 348, 349, 350, 396, 400, 408, 518, 539, 585, 598, 621, 680, 682, 713, 737, 738, 739, 786, 791, 794, 894], "implement": [28, 100, 117, 212, 239, 252, 539, 615, 814, 815, 894], "v": [28, 63, 126, 239, 426, 539, 812, 894], "At": [28, 239], "moment": [28, 166, 239, 379, 435, 539, 772, 826, 894], "pass": [28, 54, 64, 78, 91, 100, 109, 110, 111, 166, 167, 239, 252, 319, 354, 364, 453, 458, 464, 509, 539, 572, 579, 586, 596, 621, 630, 702, 732, 742, 844, 849, 855, 894], "pyarrow": [28, 77, 81, 88, 90, 92, 96, 100, 101, 105, 191, 195, 196, 239, 549, 872, 875, 876, 894], "write_t": [28, 239], "base": [29, 124, 131, 139, 140, 222, 239, 347, 384, 385, 515, 518, 539, 548, 559, 565, 569, 570, 621, 735, 775, 776, 885, 894], "calendar": [30, 31, 139, 140, 153, 203, 239, 322, 332, 335, 340, 346, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 705, 719, 722, 727, 733], "date": [31, 39, 54, 64, 88, 89, 98, 99, 101, 121, 137, 139, 140, 153, 196, 239, 267, 314, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 354, 366, 415, 416, 417, 418, 419, 421, 422, 423, 465, 478, 492, 509, 518, 539, 548, 569, 570, 575, 621, 647, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 742, 755, 777, 780, 785, 786, 815, 856, 878, 894], "time": [31, 32, 39, 60, 61, 64, 99, 128, 139, 140, 153, 203, 239, 266, 267, 287, 314, 315, 316, 319, 332, 339, 341, 344, 345, 465, 478, 479, 494, 495, 501, 502, 503, 509, 523, 539, 548, 554, 569, 570, 575, 587, 621, 629, 646, 697, 698, 699, 702, 719, 726, 728, 731, 732, 856, 878, 879, 894], "time_unit": [31, 32, 64, 344, 731], "u": [31, 32, 64, 314, 316, 319, 339, 344, 465, 509, 523, 697, 699, 702, 726, 731], "time_zon": [31, 64], "m": [31, 32, 64, 165, 239, 314, 316, 319, 339, 344, 465, 503, 509, 697, 699, 702, 725, 726, 731, 856], "unit": [31, 32, 64, 110, 111, 126, 239, 314, 316, 319, 339, 344, 386, 393, 482, 509, 539, 587, 621, 697, 699, 702, 726, 731, 736, 894], "timezon": [31, 64, 465, 732, 856], "zoneinfo": 31, "run": [31, 61, 117, 154, 212, 239, 252, 269, 309, 523, 524, 539, 554, 562, 587, 596, 597, 598, 615, 621, 649, 690, 894, 900], "available_timezon": 31, "full": [31, 60, 88, 89, 90, 99, 100], "attribut": [31, 32, 39, 108, 239, 532, 533, 535, 540, 543, 544, 545, 621, 886, 888, 890, 897, 898, 899], "delta": [32, 90, 100, 520, 525, 548, 830, 883, 894], "32": [33, 36, 49, 56, 105, 140, 150, 239, 430, 539, 570, 621, 693, 720, 789, 805, 894], "bit": [33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 410, 442, 539, 796, 833, 894], "float": [33, 34, 39, 63, 101, 106, 107, 108, 110, 111, 126, 129, 153, 170, 178, 183, 223, 239, 267, 297, 298, 299, 300, 312, 313, 336, 347, 348, 349, 350, 354, 355, 360, 365, 366, 368, 371, 372, 374, 375, 376, 384, 389, 396, 399, 400, 404, 407, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 429, 491, 492, 500, 515, 516, 517, 518, 521, 523, 526, 528, 530, 539, 563, 575, 588, 595, 596, 621, 647, 674, 677, 680, 681, 682, 693, 723, 735, 736, 737, 738, 739, 742, 743, 747, 760, 772, 775, 777, 778, 779, 780, 785, 786, 792, 793, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 814, 815, 826, 830, 865, 883, 894], "point": [33, 34, 100, 110, 111, 129, 139, 154, 178, 239, 297, 312, 313, 336, 355, 360, 372, 374, 424, 425, 539, 563, 569, 579, 590, 621, 677, 723, 743, 747, 760, 810, 811, 894], "sign": [35, 36, 37, 38, 332, 410, 468, 539, 719, 796, 859, 894], "integ": [35, 36, 37, 38, 48, 49, 50, 51, 109, 110, 139, 140, 239, 297, 336, 360, 410, 415, 416, 417, 418, 419, 420, 421, 422, 423, 489, 509, 513, 539, 569, 570, 621, 637, 638, 677, 723, 747, 796, 806, 815, 894], "inner": [39, 45, 152, 239, 274, 311, 539, 574, 613, 621, 654, 693, 894], "union": [39, 46, 54, 61, 62, 84, 122, 124, 127, 138, 156, 157, 159, 161, 163, 165, 172, 180, 186, 188, 199, 201, 203, 208, 210, 239, 351, 370, 486, 487, 489, 490, 492, 493, 494, 495, 499, 500, 505, 509, 514, 515, 518, 522, 524, 527, 528, 539, 554, 561, 562, 568, 587, 593, 596, 600, 610, 614, 621, 693, 761, 815, 894], "datatypeclass": [39, 46, 84, 489, 493, 527], "timedelta": [39, 64, 139, 140, 203, 239, 317, 319, 320, 327, 329, 332, 333, 334, 335, 336, 339, 340, 342, 343, 346, 415, 416, 417, 418, 419, 421, 422, 423, 492, 539, 569, 570, 621, 706, 708, 713, 719, 722, 727, 777, 780, 785, 786, 894], "tupl": [39, 98, 117, 151, 176, 177, 181, 239, 366, 412, 539, 587, 596, 621, 798, 894], "nest": [39, 45, 126, 239, 548, 736, 894], "arrai": [39, 77, 80, 88, 89, 126, 191, 195, 239, 266, 276, 277, 278, 279, 280, 283, 284, 292, 298, 299, 300, 304, 305, 306, 307, 308, 385, 415, 416, 418, 421, 422, 423, 427, 443, 445, 448, 449, 450, 494, 504, 539, 646, 656, 657, 658, 659, 660, 663, 664, 671, 680, 681, 682, 686, 687, 688, 689, 693, 736, 776, 801, 802, 804, 807, 808, 809, 816, 821, 834, 836, 839, 840, 841, 872, 876, 884, 894], "within": [39, 106, 107, 153, 239, 575, 621], "wrap": [41, 100], "arbitrari": [41, 110], "python": [41, 64, 88, 89, 105, 117, 177, 212, 239, 252, 316, 387, 488, 539, 615, 630, 699, 706, 707, 708, 713, 875, 894], "queri": [42, 61, 92, 98, 99, 102, 103, 104, 128, 154, 167, 239, 287, 450, 554, 556, 557, 562, 571, 578, 587, 596, 612, 615, 621, 629, 841, 894, 900], "pars": [42, 88, 89, 91, 99, 102, 103, 465, 509, 856], "given": [42, 44, 54, 63, 64, 77, 86, 88, 89, 99, 108, 109, 110, 111, 114, 117, 126, 167, 176, 182, 183, 239, 267, 281, 339, 347, 354, 384, 408, 411, 412, 415, 416, 418, 421, 422, 423, 426, 428, 429, 449, 465, 479, 486, 539, 586, 594, 595, 621, 630, 647, 661, 726, 735, 736, 742, 775, 787, 794, 798, 801, 802, 804, 807, 808, 809, 812, 818, 819, 840, 856, 879, 885, 894], "transform": [42, 117, 239, 387, 466, 467, 539], "lf": [44, 560, 565, 592, 608, 621], "under": [44, 55, 56, 57, 58, 532, 533, 535, 540, 543, 544, 545, 886, 888, 890, 897, 898, 899], "add": [44, 117, 128, 139, 209, 239, 405, 471, 503, 531, 539, 569, 574, 609, 611, 612, 621, 629, 894], "context": [45, 163, 239, 247, 252, 269, 357, 392, 437, 438, 483, 488, 496, 506, 509, 524, 538, 539, 611, 621, 649], "manag": 45, "categor": [45, 83, 113, 152, 239, 296, 478, 539, 675, 676, 878, 894], "temporarili": [45, 139, 140, 239, 569, 570, 621], "cach": [45, 61, 92, 99, 102, 104, 113, 415, 416, 417, 418, 419, 421, 422, 423, 465, 539, 554, 562, 587, 596, 621, 856], "categori": [45, 63, 113, 296, 676], "until": [45, 154, 239], "finish": [45, 66, 128, 239, 629, 894], "global": [45, 110, 113], "invalid": [45, 88, 89, 99, 450, 841], "outermost": 45, "exit": 45, "df1": [45, 54, 62, 106, 128, 134, 205, 239], "color": [45, 212, 615], "red": [45, 212, 615], "green": [45, 212, 615], "blue": 45, "orang": [45, 120, 213, 214, 216, 217, 218, 220, 223, 224, 239], "uint8": [45, 108, 307, 308, 472, 539, 688, 689, 865, 894], "df2": [45, 54, 62, 106, 128, 134, 205, 239], "yellow": 45, "black": [45, 117, 239], "join": [45, 54, 61, 153, 239, 365, 402, 539, 554, 562, 575, 587, 596, 611, 621], "succe": [45, 88, 89, 99], "df_join": 45, "how": [45, 62, 79, 82, 98, 124, 152, 202, 239, 268, 296, 310, 365, 411, 539, 559, 574, 621, 648, 676, 692, 894], "cat": [45, 63, 442, 466, 467, 478, 495, 535, 539, 833, 890], "u8": [45, 83, 194, 239, 873, 894], "sequenc": [46, 54, 61, 62, 77, 78, 79, 80, 82, 85, 109, 110, 111, 122, 124, 127, 128, 138, 139, 140, 152, 153, 159, 163, 165, 167, 168, 186, 194, 199, 200, 201, 202, 203, 208, 210, 239, 351, 370, 387, 486, 487, 488, 490, 492, 493, 494, 495, 498, 499, 500, 505, 507, 509, 514, 515, 518, 522, 524, 527, 528, 539, 561, 568, 569, 570, 574, 575, 586, 600, 605, 610, 614, 621, 629, 693, 761, 815, 894], "map": [46, 78, 79, 88, 89, 92, 93, 96, 97, 99, 102, 117, 125, 172, 192, 239, 335, 340, 388, 483, 488, 527, 539, 560, 590, 621, 722, 727], "composit": 46, "make": [46, 62, 77, 81, 88, 89, 92, 96, 98, 102, 104, 138, 139, 140, 160, 163, 171, 203, 239, 341, 349, 350, 411, 461, 468, 539, 568, 569, 570, 584, 621, 728, 732, 738, 739, 852, 859, 894], "up": [46, 98, 153, 239, 297, 468, 539, 574, 575, 579, 621, 677, 859, 894], "dai": [47, 64, 139, 140, 153, 203, 239, 319, 329, 332, 333, 334, 335, 339, 340, 342, 343, 346, 415, 416, 417, 418, 419, 421, 422, 423, 501, 502, 503, 539, 569, 570, 575, 621, 719, 720, 722, 727, 730], "unsign": [48, 49, 50, 51, 410, 539, 796, 894], "could": [52, 66, 124, 139, 239, 295, 498, 507, 539, 559, 569, 621, 674, 894], "determin": [52, 54, 62, 79, 82, 88, 89, 91, 96, 104, 117, 133, 139, 140, 151, 199, 203, 239, 287, 296, 392, 411, 415, 416, 417, 418, 419, 421, 422, 423, 435, 490, 539, 569, 570, 621, 667, 676, 826, 894], "static": [52, 615], "utf": 53, "intern": [54, 59, 64, 91, 151, 176, 192, 239, 489, 500, 509, 515, 518, 523, 527, 528, 643, 675, 696, 812, 831, 894], "revers": [54, 126, 186, 239, 261, 263, 283, 304, 305, 306, 307, 308, 388, 405, 408, 427, 437, 438, 471, 479, 490, 539, 600, 621, 639, 642, 663, 686, 687, 688, 689, 768, 794, 816, 828, 879, 894], "uniqu": [54, 108, 109, 111, 149, 163, 221, 239, 262, 369, 377, 398, 465, 481, 483, 519, 539, 621, 641, 691, 759, 769, 783, 856, 881, 882, 894], "kei": [54, 60, 139, 153, 160, 165, 168, 172, 175, 222, 239, 569, 575, 584, 590, 591, 621], "contain": [54, 60, 78, 81, 90, 100, 106, 163, 168, 239, 252, 370, 443, 446, 448, 449, 450, 462, 463, 539, 587, 621, 782, 834, 837, 839, 840, 841, 853, 854, 872, 894], "have": [54, 88, 89, 91, 110, 111, 113, 128, 171, 222, 239, 309, 348, 349, 350, 393, 408, 539, 596, 612, 621, 629, 690, 698, 737, 738, 739, 749, 794, 894], "inject": 54, "fill": [54, 62, 86, 114, 129, 130, 183, 202, 239, 289, 305, 308, 354, 355, 356, 361, 365, 415, 416, 418, 421, 422, 423, 429, 452, 457, 468, 508, 539, 563, 564, 595, 611, 621, 742, 743, 744, 787, 801, 802, 804, 807, 808, 809, 819, 843, 848, 859, 894], "non": [54, 159, 239, 403, 414, 415, 416, 417, 418, 419, 421, 422, 423, 443, 449, 492, 495, 539, 583, 621, 667, 789, 800, 801, 802, 803, 804, 805, 807, 808, 809, 834, 840, 876, 894], "each": [54, 103, 106, 107, 109, 117, 137, 153, 212, 213, 215, 225, 239, 252, 273, 285, 335, 340, 359, 408, 449, 461, 462, 488, 539, 575, 587, 615, 616, 617, 621, 653, 665, 678, 722, 727, 794, 840, 852, 853, 864, 894], "sort": [54, 55, 106, 138, 139, 140, 153, 160, 165, 167, 168, 203, 210, 215, 225, 239, 261, 263, 296, 357, 427, 438, 483, 485, 490, 539, 557, 569, 570, 575, 584, 586, 587, 596, 616, 617, 621, 639, 642, 676, 768, 816, 880, 882, 894], "origin": [54, 88, 89, 200, 239, 378, 410, 443, 448, 449, 450, 452, 457, 468, 539, 605, 621, 834, 839, 840, 841, 843, 848, 859], "order": [54, 106, 138, 139, 140, 165, 167, 168, 178, 200, 203, 239, 261, 263, 296, 408, 425, 426, 427, 437, 438, 470, 480, 481, 490, 539, 568, 569, 570, 597, 598, 600, 605, 621, 639, 642, 676, 768, 794, 799, 811, 812, 816, 862, 880, 881, 894], "unless": [54, 78, 884, 894], "case": [54, 77, 104, 117, 128, 139, 140, 151, 239, 387, 392, 393, 531, 539, 569, 570, 621, 629, 894], "final": [54, 104, 562, 621], "doe": [54, 73, 77, 80, 82, 88, 89, 90, 91, 99, 100, 101, 106, 107, 128, 176, 177, 207, 208, 239, 341, 344, 470, 481, 506, 539, 562, 568, 579, 609, 610, 621, 629, 728, 731, 749, 821, 884, 894], "receiv": [54, 117, 167, 239, 586, 621], "now": [54, 140, 239, 570, 621], "ha": [54, 100, 203, 239, 242, 252, 309, 378, 393, 479, 488, 539, 552, 615, 621, 679, 690, 749, 760, 879, 894], "whose": [54, 153, 168, 239, 351, 505, 539, 575, 621], "post": 54, "constrain": 54, "newli": 54, "descend": [54, 186, 239, 261, 263, 427, 539, 600, 621, 639, 642, 768, 816, 894], "singl": [54, 62, 88, 89, 98, 99, 109, 124, 128, 135, 176, 186, 210, 239, 286, 332, 357, 387, 409, 412, 441, 485, 488, 493, 514, 523, 539, 559, 600, 614, 621, 629, 666, 719, 795, 798, 832, 872, 894], "boolean": [54, 59, 131, 133, 208, 239, 249, 250, 267, 290, 357, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 485, 539, 565, 610, 621, 627, 628, 640, 647, 669, 745, 754, 756, 758, 759, 761, 762, 763, 764, 765, 766, 769, 790, 791, 814, 833, 885, 894], "associ": 54, "2022": [54, 64, 105, 121, 137, 239, 316, 465, 503, 509, 699, 705, 856], "x": [54, 88, 89, 98, 99, 109, 110, 126, 144, 147, 149, 152, 159, 239, 252, 266, 274, 362, 387, 411, 432, 435, 461, 478, 500, 528, 539, 574, 579, 583, 599, 621, 626, 630, 744, 770, 823, 826, 852, 878, 894], "y": [54, 109, 110, 126, 147, 149, 152, 159, 239, 266, 274, 411, 465, 500, 528, 539, 574, 583, 599, 621, 626, 725, 856, 894], "12": [54, 63, 64, 139, 140, 153, 203, 239, 307, 316, 320, 329, 334, 335, 340, 346, 403, 430, 501, 502, 539, 569, 570, 571, 575, 578, 596, 603, 621, 630, 699, 716, 722, 727, 810, 894], "df3": [54, 239], "set_tbl_format": 54, "09": [54, 140, 239, 316, 570, 621, 700], "01": [54, 64, 121, 137, 139, 140, 203, 239, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 465, 503, 569, 570, 621, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 856], "02": [54, 64, 137, 139, 140, 203, 239, 314, 316, 319, 320, 321, 327, 328, 329, 336, 337, 339, 342, 344, 424, 503, 539, 569, 570, 621, 697, 699, 702, 703, 704, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732], "03": [54, 64, 139, 140, 203, 239, 314, 316, 318, 319, 321, 328, 329, 335, 336, 337, 339, 340, 342, 344, 345, 569, 570, 621, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 713, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732], "af1": 54, "af2": 54, "af3": 54, "keep": [54, 88, 89, 99, 165, 200, 203, 239, 378, 492, 539, 605, 621], "easili": 54, "calcul": [54, 139, 239, 268, 310, 348, 349, 350, 379, 386, 420, 435, 482, 539, 569, 621, 648, 692, 737, 738, 739, 772, 806, 826, 830, 883, 894], "wise": [54, 133, 239, 253, 254, 255, 256, 257, 258, 301, 302, 352, 385, 432, 433, 434, 476, 477, 498, 499, 507, 522, 539, 631, 632, 633, 634, 635, 636, 684, 685, 740, 776, 823, 824, 825, 869, 870, 894], "dot": [54, 539, 596, 621, 894], "product": [54, 166, 239, 307, 311, 539, 688, 693, 894], "fill_nul": [54, 129, 239, 465, 539, 563, 611, 621, 856, 894], "sum": [54, 126, 133, 138, 140, 150, 168, 210, 239, 252, 287, 307, 308, 347, 357, 402, 415, 416, 418, 421, 422, 423, 485, 486, 498, 500, 507, 515, 518, 539, 554, 557, 562, 568, 570, 587, 596, 621, 688, 689, 735, 736, 801, 802, 804, 807, 808, 809, 894], "167": 54, "47": 54, "callabl": [55, 56, 57, 58, 99, 117, 133, 167, 212, 239, 252, 287, 387, 388, 414, 488, 498, 499, 507, 514, 522, 539, 579, 586, 615, 621, 630, 667, 800, 894], "decor": [55, 56, 57, 58, 110, 111], "access": [55, 56, 57, 58, 151, 176, 177, 239, 611, 621], "by_first_letter_of_column_nam": 55, "f": [55, 100, 117, 121, 137, 155, 191, 199, 202, 212, 239, 252, 287, 387, 388, 430, 447, 465, 488, 494, 498, 499, 507, 514, 522, 539, 579, 610, 615, 621, 667, 838, 856], "fromkei": [55, 57], "by_first_letter_of_column_valu": 55, "starts_with": [55, 442, 446, 837], "slice": [55, 61, 126, 142, 189, 239, 273, 285, 414, 415, 416, 417, 418, 419, 421, 422, 423, 539, 554, 562, 579, 587, 596, 597, 598, 621, 653, 665, 736, 800, 801, 802, 803, 804, 805, 807, 808, 809, 894], "to_seri": [55, 59, 239, 287, 667], "xx": [55, 57], "xy": [55, 57], "yy": [55, 57], "yz": [55, 57], "a1": [55, 57], "a2": [55, 57], "b1": [55, 57], "b2": [55, 57], "pow_n": 56, "powersofn": 56, "next": [56, 289, 408, 539, 794, 894], "p": 56, "ceil": [56, 539, 894], "previou": [56, 403, 539, 789, 894], "floor": [56, 539, 894], "nearest": [56, 153, 170, 223, 239, 297, 360, 407, 419, 521, 539, 575, 588, 621, 677, 747, 793, 805, 894], "24": [56, 117, 126, 140, 239, 307, 309, 321, 539, 570, 621, 690, 704, 894], "55": 56, "001": [56, 324, 326, 331, 503, 710, 712, 718], "next_pow2": 56, "prev_pow2": 56, "nearest_pow2": 56, "128": [56, 789, 894], "split_by_column_dtyp": 57, "dtype": [57, 77, 78, 79, 80, 82, 86, 88, 89, 99, 108, 109, 110, 111, 114, 139, 140, 153, 196, 239, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 274, 286, 295, 298, 299, 300, 301, 302, 307, 308, 318, 321, 324, 326, 328, 331, 337, 344, 351, 353, 359, 386, 387, 410, 411, 415, 416, 417, 418, 419, 421, 422, 423, 430, 433, 434, 441, 459, 472, 474, 476, 477, 478, 482, 483, 488, 489, 493, 494, 496, 505, 509, 513, 514, 527, 539, 569, 570, 575, 621, 644, 645, 646, 654, 666, 674, 679, 680, 681, 682, 688, 689, 701, 704, 710, 712, 715, 718, 724, 731, 736, 741, 757, 799, 813, 820, 832, 850, 856, 865, 876, 877, 878, 894], "collect": [57, 61, 100, 101, 154, 191, 239, 252, 402, 489, 494, 509, 523, 527, 539, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 571, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 588, 590, 591, 593, 594, 595, 599, 600, 601, 602, 603, 604, 605, 607, 609, 610, 611, 612, 615, 621], "31": [58, 105, 316, 317, 318, 329, 342, 465, 501, 502, 509, 699, 700, 701, 856], "42": [58, 140, 141, 239, 570, 621, 750, 894], "961": 58, "1764": 58, "4160": 58, "condit": [59, 124, 131, 176, 239, 446, 463, 559, 565, 621], "eager": [59, 139, 202, 239, 489, 509, 513, 523, 527, 538, 548, 569, 621], "indic": [59, 83, 87, 88, 89, 92, 96, 99, 108, 109, 111, 139, 140, 239, 286, 368, 371, 372, 374, 375, 376, 415, 416, 417, 418, 419, 421, 422, 423, 426, 432, 474, 539, 569, 570, 621, 666, 758, 762, 763, 764, 765, 766, 812, 823, 867, 894], "where": [59, 98, 124, 128, 151, 159, 177, 207, 239, 343, 347, 426, 435, 525, 531, 539, 559, 583, 621, 629, 640, 730, 735, 812, 826, 830, 883, 885, 894], "evalu": [59, 129, 131, 153, 208, 239, 309, 364, 366, 370, 487, 489, 504, 527, 539, 565, 572, 574, 575, 609, 610, 621, 640, 690, 885, 894], "eagerli": [59, 523], "oppos": 59, "lazili": [59, 88, 89, 99, 100, 102, 103, 104], "u32": [59, 139, 164, 209, 213, 221, 224, 239, 247, 259, 260, 261, 262, 263, 264, 265, 276, 303, 304, 317, 320, 327, 329, 333, 334, 336, 342, 343, 381, 398, 401, 408, 426, 443, 451, 454, 478, 481, 496, 519, 539, 569, 612, 621, 639, 640, 641, 656, 674, 700, 703, 709, 711, 714, 716, 717, 720, 721, 723, 729, 730, 794, 834, 842, 845, 878, 881, 882, 894], "build": 60, "wa": 60, "compil": [60, 264, 265, 644, 645], "gate": 60, "info": [60, 90, 100, 105], "otherwis": [60, 160, 180, 239, 291, 298, 299, 300, 348, 349, 350, 410, 444, 531, 539, 584, 593, 621, 630, 670, 680, 681, 682, 737, 738, 739, 796, 814, 815, 835, 894], "version": [60, 90, 100, 105, 222, 242, 353, 359, 522, 539, 741, 894], "follow": [60, 88, 89, 90, 99, 100, 117, 139, 140, 153, 167, 203, 239, 252, 332, 335, 340, 359, 408, 415, 416, 417, 418, 419, 421, 422, 423, 488, 532, 533, 535, 539, 540, 543, 544, 545, 568, 569, 570, 575, 586, 621, 719, 722, 727, 794, 814, 815, 886, 888, 890, 894, 897, 898, 899, 901], "depend": [60, 105, 252, 264, 265, 392, 408, 488, 506, 509, 539, 644, 645, 794, 894], "host": [60, 88, 92, 96, 102, 104], "git": 60, "lazy_fram": 61, "type_coercion": [61, 554, 556, 562, 587, 596, 597, 598, 621], "predicate_pushdown": [61, 554, 556, 562, 579, 587, 596, 597, 598, 621], "projection_pushdown": [61, 554, 556, 562, 579, 587, 596, 597, 598, 621], "simplify_express": [61, 554, 556, 562, 587, 596, 597, 598, 621], "string_cach": 61, "no_optim": [61, 554, 562, 579, 587, 597, 598, 621], "slice_pushdown": [61, 554, 556, 562, 579, 587, 596, 597, 598, 621], "common_subplan_elimin": [61, 554, 556, 562, 587, 596, 621], "multipl": [61, 62, 88, 89, 99, 102, 104, 109, 111, 126, 128, 131, 139, 144, 165, 168, 186, 210, 239, 286, 351, 393, 397, 412, 415, 416, 417, 418, 419, 421, 422, 423, 438, 490, 498, 499, 505, 507, 514, 522, 531, 539, 558, 565, 569, 600, 614, 621, 629, 666, 736, 781, 798, 894], "graph": [61, 154, 239, 572, 611, 621], "parallel": [61, 62, 85, 96, 98, 104, 139, 153, 154, 167, 239, 269, 309, 539, 548, 569, 574, 575, 621, 649, 690, 894], "threadpool": 61, "coercion": [61, 411, 539, 554, 562, 587, 596, 597, 598, 621], "optim": [61, 96, 99, 102, 103, 104, 151, 154, 167, 171, 177, 239, 554, 556, 557, 562, 579, 587, 596, 597, 598, 612, 621], "predic": [61, 99, 101, 102, 103, 104, 131, 176, 239, 357, 485, 531, 539, 554, 562, 565, 579, 587, 590, 596, 597, 598, 612, 621, 745, 814, 815, 894], "pushdown": [61, 554, 562, 579, 587, 590, 596, 597, 598, 612, 621, 814, 815, 894], "project": [61, 99, 100, 102, 103, 104, 252, 437, 438, 539, 554, 562, 579, 587, 590, 596, 597, 598, 613, 621], "simplifi": [61, 554, 562, 587, 596, 597, 598, 621], "turn": [61, 88, 89, 99, 113, 359, 483, 539, 554, 562, 579, 587, 597, 598, 621], "off": [61, 88, 89, 99, 113, 483, 539, 554, 562, 579, 587, 597, 598, 621], "Will": [61, 199, 239, 515, 518, 554, 562, 587, 596, 621, 894], "try": [61, 74, 75, 88, 89, 91, 92, 96, 99, 102, 104, 554, 562, 587, 596, 621], "branch": [61, 554, 562, 587, 596, 621], "subplan": [61, 554, 562, 587, 596, 621], "occur": [61, 397, 408, 539, 554, 562, 587, 596, 621, 781, 794, 894], "part": [61, 77, 461, 462, 554, 562, 587, 596, 611, 621, 700, 703, 709, 711, 714, 716, 717, 723, 733, 852, 853], "fashion": [61, 152, 239, 554, 562, 587, 596, 621], "alpha": [61, 348, 349, 350, 539, 554, 562, 587, 596, 621, 737, 738, 739, 894], "item": [62, 178, 239, 267, 272, 274, 353, 359, 425, 462, 539, 647, 652, 654, 741, 811, 853, 894], "rechunk": [62, 77, 81, 88, 89, 92, 96, 99, 102, 103, 104, 128, 239, 539, 629, 678, 782, 894], "concatmethod": 62, "vertic": [62, 128, 202, 205, 239, 441, 515, 832], "aggreg": [62, 88, 89, 133, 138, 139, 156, 157, 158, 161, 163, 168, 169, 170, 187, 188, 202, 204, 210, 211, 214, 216, 222, 239, 247, 357, 383, 387, 402, 414, 415, 416, 417, 418, 419, 421, 422, 423, 483, 498, 499, 500, 507, 512, 515, 518, 522, 528, 539, 569, 579, 580, 581, 582, 585, 588, 601, 602, 607, 614, 621, 800, 801, 802, 804, 807, 808, 809, 894], "concaten": [62, 133, 239, 678, 782, 894], "sure": [62, 77, 81, 88, 89, 92, 98, 138, 171, 239, 489, 568, 621], "contigu": [62, 77, 81, 88, 89, 92, 99, 102, 103, 104, 171, 239], "diagon": [62, 199, 239], "strategi": [62, 88, 108, 109, 110, 111, 130, 139, 152, 153, 162, 239, 287, 356, 539, 564, 569, 574, 575, 621, 667, 744, 894], "vstack": [62, 128, 239], "find": [62, 132, 239, 426, 490, 539, 812, 894], "schema": [62, 74, 77, 88, 89, 93, 97, 99, 103, 110, 117, 118, 119, 125, 160, 239, 287, 392, 527, 552, 553, 560, 579, 584, 613, 615, 621, 683, 894], "miss": [62, 77, 88, 89, 99, 129, 239, 289, 361, 365, 372, 374, 525, 539, 563, 621, 884, 894], "stack": [62, 144, 205, 239], "length": [62, 63, 86, 103, 109, 114, 139, 140, 185, 239, 282, 309, 335, 340, 393, 414, 415, 416, 417, 418, 419, 421, 422, 423, 436, 452, 454, 457, 459, 468, 489, 539, 569, 570, 587, 599, 621, 662, 667, 678, 690, 699, 722, 727, 773, 787, 800, 801, 802, 803, 804, 805, 807, 808, 809, 827, 843, 845, 848, 850, 859, 894], "don": [62, 202, 239, 252, 269, 309, 488, 539, 649, 690, 813, 884, 894], "t": [62, 91, 99, 117, 202, 239, 252, 269, 309, 347, 348, 349, 350, 453, 458, 464, 465, 488, 531, 539, 649, 690, 735, 737, 738, 739, 813, 844, 849, 855, 856, 884, 894], "match": [62, 73, 77, 78, 80, 82, 106, 107, 130, 153, 176, 239, 442, 443, 446, 449, 450, 453, 455, 456, 458, 463, 464, 465, 564, 575, 621, 833, 834, 837, 840, 841, 844, 846, 847, 849, 854, 855, 856], "relev": 62, "execut": [62, 154, 239, 269, 551, 587, 621, 649], "df_h1": 62, "l1": 62, "l2": 62, "df_h2": 62, "r1": 62, "r2": 62, "r3": 62, "df_d1": 62, "df_d2": 62, "bin": [63, 533, 888], "label": [63, 77, 78, 80, 82, 239, 414, 415, 416, 417, 418, 419, 421, 422, 423, 539, 587, 621, 800, 801, 802, 803, 804, 805, 807, 808, 809, 894], "break_point_label": 63, "break_point": 63, "category_label": 63, "discret": [63, 268, 310, 347, 539, 648, 692, 735, 894], "creat": [63, 64, 77, 80, 82, 100, 109, 110, 111, 118, 119, 139, 140, 164, 168, 203, 207, 208, 239, 316, 335, 340, 409, 459, 483, 489, 494, 501, 502, 503, 539, 552, 553, 556, 557, 569, 570, 609, 610, 621, 679, 683, 695, 699, 722, 727, 787, 795, 850, 876, 894], "assign": [63, 109, 139, 239, 408, 461, 462, 539, 569, 621, 794, 852, 853, 894], "must": [63, 77, 78, 80, 82, 90, 100, 139, 140, 153, 160, 176, 239, 287, 351, 387, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 579, 584, 621, 894], "len": [63, 109, 110, 304, 412, 452, 457, 468, 539, 798, 843, 848, 859, 894], "breakpoint": 63, "experiment": [63, 101, 202, 208, 239, 309, 335, 415, 416, 417, 418, 419, 421, 422, 423, 539, 610, 621, 690, 722, 894], "being": [63, 88, 89, 99, 101, 202, 239, 309, 335, 415, 416, 417, 418, 419, 421, 422, 423, 504, 531, 539, 690, 722, 894], "consid": [63, 88, 89, 99, 101, 124, 134, 159, 200, 202, 208, 210, 222, 239, 298, 299, 300, 309, 335, 415, 416, 417, 418, 419, 421, 422, 423, 437, 498, 507, 539, 559, 571, 578, 583, 605, 610, 621, 680, 681, 682, 690, 722, 813, 814, 815, 894], "break": [63, 101, 202, 239, 309, 335, 415, 416, 417, 418, 419, 421, 422, 423, 539, 690, 722, 894], "30": [63, 128, 139, 144, 167, 173, 174, 192, 208, 239, 259, 260, 261, 263, 310, 316, 318, 334, 335, 340, 346, 362, 430, 539, 569, 586, 610, 621, 699, 701, 722, 727], "inf": [63, 110, 111, 258, 368, 371, 539, 636, 758, 762, 789, 894], "low": [64, 139, 239, 336, 489, 569, 621], "high": [64, 139, 239, 336, 489, 569, 621], "interv": [64, 139, 140, 203, 239, 335, 336, 340, 366, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 621, 700, 702, 703, 709, 711, 714, 716, 717, 720, 721, 722, 723, 725, 726, 727, 729, 730, 733], "close": [64, 139, 140, 239, 366, 415, 416, 417, 418, 419, 421, 422, 423, 435, 539, 569, 570, 621, 826, 894], "closedinterv": [64, 139, 140, 239, 366, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 621], "lower": [64, 99, 139, 170, 223, 239, 366, 386, 407, 410, 419, 489, 521, 539, 562, 569, 588, 621, 793, 796, 805, 894], "bound": [64, 88, 89, 126, 139, 239, 272, 286, 366, 386, 482, 489, 539, 569, 621, 652, 666, 736, 894], "upper": [64, 88, 89, 126, 139, 239, 366, 482, 489, 539, 569, 621, 736, 894], "period": [64, 139, 140, 182, 183, 239, 281, 335, 340, 348, 349, 350, 403, 428, 429, 539, 569, 570, 594, 595, 621, 661, 722, 727, 737, 738, 739, 789, 818, 819, 894], "It": [64, 117, 160, 167, 212, 239, 252, 287, 341, 392, 539, 579, 584, 615, 621, 728, 814, 815, 894], "like": [64, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 152, 222, 239, 269, 395, 408, 515, 518, 528, 539, 562, 589, 621, 649, 794, 894], "durat": [64, 153, 203, 239, 318, 321, 324, 326, 328, 331, 337, 344, 478, 539, 575, 621, 701, 704, 710, 712, 715, 718, 724, 731, 878, 894], "3d12h4m25": [64, 139, 140, 153, 203, 239, 335, 340, 569, 570, 575, 621, 722, 727], "hour": [64, 139, 140, 153, 203, 239, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 502, 503, 539, 569, 570, 575, 621, 719, 722, 727], "minut": [64, 139, 140, 153, 203, 239, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 502, 503, 539, 569, 570, 575, 621, 719, 722, 727], "tempor": [64, 139, 140, 239, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 621], "window": [64, 139, 140, 239, 309, 335, 340, 348, 349, 350, 402, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 494, 539, 569, 570, 621, 690, 722, 727, 737, 738, 739, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 894], "granular": 64, "finer": 64, "than": [64, 76, 80, 82, 88, 89, 101, 110, 111, 117, 138, 151, 153, 176, 177, 178, 202, 212, 239, 252, 378, 425, 435, 437, 452, 457, 462, 468, 515, 518, 525, 528, 539, 568, 575, 597, 598, 615, 621, 811, 826, 843, 848, 853, 859, 894], "1d": [64, 139, 140, 153, 203, 239, 314, 321, 328, 332, 335, 340, 344, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 697, 702, 704, 706, 707, 708, 713, 715, 719, 722, 725, 726, 727, 730, 731], "also": [64, 110, 111, 125, 138, 139, 140, 160, 163, 186, 239, 305, 308, 315, 351, 365, 408, 415, 416, 417, 418, 419, 421, 422, 423, 498, 499, 507, 509, 522, 538, 539, 569, 570, 584, 600, 611, 621, 698, 794, 894], "permut": 64, "1mo": [64, 139, 140, 153, 203, 239, 318, 332, 335, 340, 345, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 698, 701, 716, 719, 720, 721, 722, 727, 729, 732], "dtrang": 64, "1985": 64, "00": [64, 139, 153, 203, 239, 314, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 465, 503, 569, 575, 621, 697, 698, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 856], "04": [64, 101, 139, 203, 239, 316, 317, 318, 321, 327, 328, 329, 333, 335, 336, 337, 342, 343, 344, 345, 465, 503, 569, 621, 698, 701, 704, 709, 711, 714, 715, 716, 717, 721, 723, 724, 725, 729, 730, 731, 732, 856], "05": [64, 101, 106, 107, 153, 203, 239, 316, 318, 336, 345, 575, 621, 698, 699, 700, 701, 722, 727, 730, 732], "07": [64, 316, 317, 333, 335, 340, 343, 465, 509, 699, 700, 730, 856], "08": [64, 106, 107, 140, 239, 316, 335, 465, 503, 570, 621, 722, 727, 856], "zone": [64, 315, 341, 345, 698, 728, 732], "america": [64, 698], "new_york": [64, 698], "\u03bc": [64, 139, 140, 153, 203, 239, 314, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 509, 569, 570, 575, 621, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733], "est": [64, 698], "encount": [65, 139, 239, 399, 400, 450, 498, 507, 525, 539, 569, 621, 785, 786, 841, 894], "error": [65, 88, 89, 99, 176, 239, 274, 286, 291, 295, 378, 444, 450, 465, 539, 615, 654, 666, 670, 674, 835, 841, 856, 894], "duplic": [67, 147, 152, 153, 200, 239, 367, 490, 539, 574, 575, 605, 621, 756, 894], "certain": [68, 145, 203, 239, 351, 505, 539, 554, 587, 597, 598, 621, 894], "structur": [69, 74, 75, 128, 167, 239, 586, 621, 629, 894], "least": [70, 110, 403, 483, 539, 789, 882, 894], "expect": [70, 73, 76, 239, 252, 488, 539, 577, 579, 621], "unexpect": [72, 239], "caus": [72, 88, 89, 99, 128, 239, 629, 894], "panic": 72, "combin": [74, 75, 139, 140, 141, 153, 203, 210, 239, 340, 453, 458, 464, 569, 570, 575, 596, 621, 727, 844, 849, 855], "mismatch": 74, "incompat": 75, "pa": [77, 100, 101, 239], "chunkedarrai": [77, 162, 239, 693, 894], "schema_overrid": [77, 78, 79, 80, 81, 82, 239], "schemadict": [77, 78, 79, 80, 81, 82, 99, 179, 239, 579, 592, 615, 621], "zero": [77, 87, 88, 89, 92, 96, 130, 151, 176, 191, 239, 355, 356, 426, 435, 468, 539, 564, 621, 667, 744, 826, 859, 872, 876, 894], "copi": [77, 118, 119, 191, 207, 208, 239, 468, 552, 553, 609, 610, 621, 626, 679, 683, 695, 859, 872, 876, 894], "most": [77, 393, 397, 403, 462, 483, 539, 781, 789, 853, 882, 894], "closest": 77, "dimens": [77, 78, 80, 82, 239, 412, 539, 798, 894], "column_1": [77, 80, 82, 117, 199, 239], "pair": [77, 172, 239, 590, 621], "declar": 77, "sever": [77, 527], "wai": [77, 167, 239, 586, 621], "As": [77, 91, 523], "auto": [77, 96, 104, 199, 239], "automat": [77, 88, 89, 98, 99, 110, 111, 239, 453, 458, 464, 465, 844, 849, 855, 856, 894], "equival": [77, 150, 163, 239, 454, 771, 845, 857, 858, 894], "form": [77, 151, 177, 202, 239, 403, 539, 789, 894], "suppli": [77, 176, 239], "here": [77, 90, 98, 100, 109, 110, 111, 450, 841], "overwrit": [77, 79, 88, 89, 99, 562, 621], "them": [77, 128, 139, 140, 153, 160, 203, 239, 274, 399, 400, 494, 539, 569, 570, 575, 584, 621, 629, 654, 785, 786, 894], "param": [77, 78, 80, 82, 88, 89, 99, 110, 111, 176, 239], "overridden": [77, 78, 80, 82, 239], "construct": [77, 78, 79, 80, 81, 82, 239, 567, 589, 621, 894], "schemadefinit": [78, 239], "clone": [78, 79, 80, 81, 82, 118, 195, 196, 239, 552, 621, 679, 875, 876, 884, 894], "two": [78, 80, 82, 98, 133, 159, 160, 168, 198, 210, 211, 212, 222, 239, 247, 311, 316, 437, 438, 474, 486, 497, 520, 525, 527, 539, 583, 584, 615, 621, 693, 699, 894], "dimension": [78, 80, 82, 239, 894], "alreadi": [78, 239, 269, 309, 539, 649, 690, 894], "present": [78, 106, 110, 239, 370, 539, 884, 894], "infer_schema_length": [79, 82, 88, 89, 91, 99, 103, 239], "mani": [79, 82, 98, 128, 239, 629, 894], "scan": [79, 82, 88, 89, 96, 99, 100, 101, 102, 103, 104, 562, 571, 578, 621], "slow": [79, 82, 88, 89, 99, 193, 239, 309, 539, 690, 894], "first": [79, 88, 89, 91, 99, 103, 117, 137, 139, 142, 153, 155, 162, 167, 168, 189, 199, 200, 203, 215, 222, 239, 261, 262, 263, 269, 272, 273, 309, 332, 335, 363, 369, 382, 426, 448, 450, 455, 456, 490, 492, 498, 507, 511, 539, 554, 569, 571, 575, 578, 586, 605, 611, 616, 621, 639, 642, 649, 652, 653, 667, 690, 691, 719, 722, 751, 759, 774, 812, 839, 841, 846, 847, 894], "let": 79, "about": [79, 435, 539, 826, 894], "3rd": 79, "unknown": [79, 513], "np": [80, 239, 758, 762, 763, 764, 800, 894], "ndarrai": [80, 131, 195, 239, 474, 539, 693, 812, 815, 867, 876, 894], "numpi": [80, 105, 131, 166, 195, 239, 399, 400, 474, 539, 758, 762, 763, 764, 785, 786, 800, 812, 867, 876, 884, 894], "columnar": [80, 82, 151, 177, 239], "interpret": [80, 82, 88, 89, 99, 239], "yield": [80, 82, 88, 89, 99, 126, 128, 199, 239, 629, 736, 894], "conclus": [80, 82, 239], "nan_to_non": 81, "panda": [81, 91, 105, 196, 239, 478, 539, 877, 878, 894], "index": [81, 84, 105, 132, 139, 140, 145, 153, 168, 174, 176, 185, 197, 203, 209, 239, 247, 259, 260, 261, 262, 263, 264, 265, 272, 282, 286, 332, 415, 416, 417, 418, 419, 421, 422, 423, 426, 436, 448, 459, 474, 490, 539, 569, 570, 575, 599, 612, 621, 637, 638, 639, 640, 641, 642, 644, 645, 652, 662, 666, 719, 787, 812, 815, 827, 839, 850, 867, 894], "datetimeindex": [81, 693, 894], "instal": [81, 88, 89, 92, 96, 98, 100, 105, 166, 195, 196, 239, 596, 621, 876, 894], "nan": [81, 106, 107, 110, 129, 239, 312, 313, 355, 365, 372, 374, 375, 376, 389, 396, 399, 400, 525, 539, 563, 621, 632, 636, 694, 743, 763, 764, 785, 786, 800, 894], "convert": [81, 83, 90, 91, 100, 192, 193, 194, 195, 196, 198, 239, 287, 465, 667, 856, 863, 864, 875, 876, 877, 884, 894], "pd": [81, 91, 239, 478, 539, 878, 894], "pd_df": 81, "pd_seri": 81, "dummi": [83, 194, 239, 873, 894], "subset": [83, 124, 163, 194, 200, 239, 559, 605, 621], "to_dummi": [83, 239, 894], "foo_1": [83, 194, 239], "foo_2": [83, 194, 239], "bar_3": [83, 194, 239], "bar_4": [83, 194, 239], "ham_a": [83, 194, 239], "ham_b": [83, 194, 239], "get": [84, 93, 97, 112, 120, 125, 135, 136, 139, 140, 142, 143, 147, 149, 155, 162, 176, 179, 181, 185, 189, 194, 206, 215, 225, 227, 228, 229, 230, 231, 232, 233, 239, 247, 259, 260, 261, 262, 263, 271, 275, 276, 288, 304, 305, 306, 307, 308, 319, 358, 363, 367, 369, 377, 380, 382, 389, 390, 391, 392, 394, 396, 399, 400, 407, 436, 440, 451, 454, 472, 473, 480, 484, 506, 511, 515, 516, 517, 518, 526, 529, 530, 539, 555, 560, 566, 569, 570, 571, 576, 578, 592, 599, 603, 608, 616, 617, 621, 637, 638, 639, 640, 641, 642, 651, 655, 656, 668, 678, 686, 687, 688, 689, 702, 748, 751, 756, 759, 769, 774, 777, 779, 780, 782, 785, 786, 790, 791, 793, 827, 830, 842, 845, 866, 872, 873, 880, 883, 884, 894], "uint32": [84, 105, 126, 239, 261, 263, 264, 265, 276, 317, 320, 323, 325, 327, 329, 330, 333, 334, 336, 342, 343, 411, 443, 451, 454, 474, 478, 539, 640, 644, 645, 656, 674, 700, 703, 709, 711, 714, 716, 717, 720, 721, 723, 729, 730, 736, 813, 834, 878, 894], "regular": [84, 151, 176, 177, 203, 239, 351, 493, 505, 515, 518, 528, 539], "uint64": [84, 141, 239, 264, 265, 362, 410, 539, 644, 645, 750, 796, 894], "bigidx": 84, "read": [85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 128, 239, 387, 539, 562, 567, 589, 621, 629, 894], "over": [85, 88, 89, 99, 110, 117, 128, 138, 151, 176, 177, 199, 212, 222, 239, 252, 309, 356, 365, 387, 388, 414, 415, 416, 417, 418, 419, 421, 422, 423, 488, 498, 499, 507, 514, 522, 539, 615, 629, 630, 690, 800, 801, 802, 804, 808, 894], "avail": [85, 90, 100, 109, 238, 242, 408, 532, 533, 535, 538, 539, 540, 543, 544, 545, 548, 549, 562, 620, 621, 794, 886, 888, 890, 894, 897, 898, 899], "fetch": [85, 99, 154, 239, 552, 554, 571, 578, 606, 621], "ideal": [85, 222], "read_csv_batch": [85, 549], "tpch": [85, 89], "tables_scale_100": [85, 89], "lineitem": [85, 89, 98], "tbl": [85, 89], "parse_d": [85, 88, 89, 99], "polarsdatatyp": [86, 108, 109, 110, 111, 114, 117, 125, 239, 252, 295, 387, 539, 630, 674, 894], "new": [86, 114, 117, 122, 124, 144, 145, 163, 164, 172, 173, 190, 202, 207, 208, 239, 248, 316, 353, 359, 365, 388, 455, 456, 461, 462, 469, 470, 475, 539, 548, 559, 590, 604, 609, 610, 615, 621, 626, 630, 695, 699, 741, 787, 797, 846, 847, 852, 853, 860, 862, 868, 874, 885, 894], "In": [86, 90, 100, 104, 110, 111, 114, 117, 126, 128, 139, 140, 163, 239, 252, 392, 437, 438, 539, 569, 570, 621, 629, 736, 795, 894], "probabl": [86, 114, 347, 539, 735, 894], "n_row": [87, 88, 89, 92, 96, 99, 102, 103, 104, 562, 621], "accept": [87, 88, 89, 90, 92, 96, 186, 239], "start": [87, 88, 89, 92, 96, 99, 102, 103, 104, 138, 139, 154, 185, 203, 209, 239, 282, 294, 317, 319, 320, 327, 329, 333, 334, 335, 336, 339, 340, 342, 343, 346, 351, 366, 436, 442, 446, 459, 463, 493, 498, 505, 507, 531, 539, 568, 569, 587, 599, 612, 621, 662, 673, 697, 698, 700, 702, 703, 709, 711, 714, 716, 717, 720, 721, 722, 723, 725, 726, 727, 729, 730, 731, 732, 733, 827, 837, 850, 854, 894], "stop": [87, 88, 89, 92, 96, 99, 102, 103, 104, 317, 319, 320, 327, 329, 333, 334, 335, 336, 339, 340, 342, 343, 346, 697, 698, 700, 702, 703, 709, 711, 714, 716, 717, 720, 721, 722, 723, 725, 726, 727, 729, 730, 731, 732, 733], "after": [87, 88, 89, 92, 96, 99, 102, 103, 104, 128, 201, 238, 239, 242, 408, 468, 539, 606, 621, 629, 698, 794, 859, 894], "textio": 88, "new_column": [88, 89, 91], "comment_char": [88, 89, 99], "quote_char": [88, 89, 99], "skip_row": [88, 89, 99], "missing_utf8_is_empty_str": [88, 89, 99], "ignore_error": [88, 89, 99], "n_thread": [88, 89], "8192": 88, "csvencod": [88, 89, 99], "low_memori": [88, 89, 96, 99, 103, 104], "storage_opt": [88, 90, 92, 96, 100, 102, 104], "skip_rows_after_head": [88, 89, 99], "row_count_nam": [88, 89, 92, 96, 99, 102, 103, 104], "row_count_offset": [88, 89, 92, 96, 99, 102, 103, 104], "sample_s": [88, 89], "eol_char": [88, 89, 99], "By": [88, 89, 91, 99, 153, 186, 239, 513, 575, 621, 830, 876, 883, 894], "we": [88, 89, 91, 99, 138, 153, 186, 239, 269, 513, 531, 575, 579, 600, 621, 630, 649, 894], "handler": [88, 89, 91], "g": [88, 89, 90, 91, 92, 96, 100, 102, 104, 202, 239, 351, 427, 430, 505, 539, 590, 621, 813, 816, 876, 894], "via": [88, 89, 91, 99, 102, 104, 151, 177, 208, 239, 610, 621], "builtin": [88, 89, 91], "open": [88, 89, 91, 92, 96, 102, 104], "stringio": [88, 89], "fsspec": [88, 89, 92, 96, 100, 102, 104, 105], "remot": [88, 89, 92, 96], "dataset": [88, 89, 99, 101, 379, 539, 548, 772, 894], "autogener": [88, 89, 99], "column_x": [88, 89, 99], "enumer": [88, 89, 99], "everi": [88, 89, 99, 139, 190, 193, 203, 239, 264, 265, 268, 270, 272, 273, 282, 285, 304, 305, 306, 307, 308, 309, 335, 340, 353, 359, 447, 475, 498, 499, 539, 562, 569, 604, 621, 644, 645, 648, 650, 652, 653, 662, 665, 686, 687, 688, 689, 690, 722, 727, 741, 838, 868, 894], "shorter": [88, 89], "remain": [88, 89, 99, 126, 138, 239, 252, 461, 462, 539, 568, 579, 621, 736, 852, 853, 894], "comment": [88, 89, 99], "instanc": [88, 89, 99, 110, 111, 128, 133, 239, 287, 295, 393, 415, 416, 417, 418, 419, 421, 422, 423, 498, 507, 539, 579, 612, 621, 629, 674, 894], "special": [88, 89, 99, 630, 894], "handl": [88, 89, 99, 101, 268, 310, 468, 539, 648, 692, 859, 894], "escap": [88, 89, 99], "dure": [88, 89, 99, 128, 239, 629, 894], "provid": [88, 89, 90, 98, 99, 100, 110, 111, 208, 239, 287, 291, 292, 444, 445, 448, 450, 509, 548, 597, 598, 610, 615, 621, 670, 671, 835, 836, 839, 841, 901], "equal": [88, 89, 99, 106, 107, 113, 134, 139, 153, 160, 239, 414, 415, 416, 417, 418, 419, 421, 422, 423, 451, 452, 457, 468, 489, 539, 569, 575, 584, 621, 800, 801, 802, 803, 804, 805, 807, 808, 809, 813, 842, 843, 848, 859, 894], "would": [88, 89, 99, 261, 263, 272, 392, 408, 490, 539, 639, 642, 652, 794, 876, 894], "prefer": [88, 89, 99, 117, 128, 151, 177, 212, 239, 252, 414, 539, 615, 621, 629, 800, 894], "treat": [88, 89, 99, 442, 455, 456, 833, 846, 847], "some": [88, 89, 99, 124, 239, 559, 621, 761, 894], "check": [88, 89, 99, 106, 107, 134, 148, 150, 239, 249, 250, 267, 290, 293, 294, 366, 370, 442, 446, 463, 539, 579, 621, 627, 628, 647, 669, 672, 673, 754, 755, 757, 760, 761, 767, 768, 770, 771, 813, 833, 837, 854, 894], "might": [88, 89, 99, 392, 481, 539], "issu": [88, 89, 91, 99, 307, 308, 472, 539, 688, 689, 865, 894], "alwai": [88, 117, 212, 239, 252, 392, 539, 579, 615, 621], "physic": [88, 89, 153, 239, 296, 478, 539, 551, 574, 575, 621, 676, 878, 894], "cpu": [88, 89], "your": [88, 89, 106, 107, 151, 239, 554, 571, 578, 579, 621], "system": [88, 89], "done": [88, 89, 99, 101, 137, 153, 239, 251, 295, 452, 457, 539, 575, 600, 614, 621, 674, 843, 848, 894], "buffer": [88, 89, 126, 151, 239, 736, 894], "onc": [88, 89, 91, 151, 178, 239, 425, 539, 551, 621, 811, 894], "modifi": [88, 89, 99, 144, 151, 205, 239, 315, 344, 698, 731, 797, 857, 858, 894], "multi": [88, 89], "lossi": [88, 89, 99], "replac": [88, 89, 99, 129, 130, 174, 199, 207, 208, 239, 316, 456, 563, 609, 610, 621, 699, 814, 815, 847, 894], "decod": [88, 89], "im": [88, 89], "usag": [88, 89, 99, 110, 111, 184, 239, 821, 894], "expens": [88, 89, 96, 99, 103, 104, 138, 151, 176, 177, 199, 200, 239, 252, 539, 568, 605, 621, 629, 894], "nativ": [88, 92, 96, 117, 212, 239, 252, 539, 615], "parser": 88, "even": 88, "possibl": [88, 117, 151, 177, 212, 239, 252, 386, 392, 462, 482, 539, 615, 853, 894], "differ": [88, 101, 128, 139, 140, 199, 239, 268, 310, 315, 317, 332, 333, 342, 399, 400, 465, 481, 506, 509, 515, 518, 539, 569, 570, 621, 629, 648, 692, 698, 700, 719, 720, 729, 785, 786, 813, 856, 894], "regard": [88, 525], "sens": [88, 92, 96, 102, 104, 139, 140, 160, 203, 239, 569, 570, 584, 621], "particular": [88, 92, 96, 102, 104, 126, 239, 736, 894], "storag": [88, 90, 92, 96, 100, 102, 104], "connect": [88, 92, 96, 98, 101, 102, 104, 549], "port": [88, 92, 96, 98, 102, 104], "usernam": [88, 92, 96, 98, 102, 104], "password": [88, 92, 96, 98, 102, 104], "skip": [88, 89, 91, 99, 202, 239, 630, 894], "insert": [88, 89, 92, 96, 99, 102, 103, 104, 145, 173, 199, 201, 239, 426, 441, 468, 539, 606, 621, 812, 832, 859, 894], "count": [88, 89, 92, 96, 99, 102, 103, 104, 121, 139, 140, 153, 163, 164, 168, 199, 203, 209, 212, 221, 239, 304, 332, 381, 398, 401, 415, 416, 417, 418, 419, 421, 422, 423, 443, 481, 483, 519, 539, 569, 570, 575, 612, 615, 621, 691, 719, 783, 788, 834, 881, 882, 894], "offset": [88, 89, 92, 96, 99, 102, 103, 104, 139, 140, 185, 203, 209, 239, 282, 332, 335, 340, 436, 459, 539, 569, 570, 599, 612, 621, 662, 719, 722, 727, 827, 850, 894], "row_count": [88, 89, 92, 96, 99, 102, 103, 104], "sampl": [88, 89, 212, 239, 435, 539, 615, 826, 894], "estim": [88, 89, 126, 239, 349, 350, 379, 539, 736, 738, 739, 772, 894], "alloc": [88, 89, 126, 171, 239, 736, 894], "need": [88, 89, 91, 106, 107, 139, 140, 184, 195, 239, 287, 430, 451, 539, 569, 570, 614, 621, 820, 842, 876, 894], "end": [88, 89, 96, 99, 139, 239, 282, 293, 335, 351, 366, 442, 446, 459, 463, 493, 505, 539, 569, 571, 578, 587, 621, 662, 672, 722, 837, 850, 854], "scan_csv": [88, 89, 597, 598, 614, 621], "glob": [88, 89, 99, 102, 104], "pattern": [88, 89, 99, 102, 104, 151, 239, 442, 443, 448, 449, 455, 456, 814, 815, 833, 834, 839, 840, 846, 847, 894], "store": [88, 96, 128, 151, 177, 239, 629, 894], "continu": [88, 96, 435, 539, 826, 894], "benchmark": [88, 96], "50000": 89, "batchedcsvread": [89, 548], "batch": [89, 103], "upon": 89, "creation": 89, "gather": 89, "work": [89, 91, 138, 140, 173, 239, 269, 297, 298, 299, 300, 360, 454, 470, 480, 539, 568, 570, 621, 649, 677, 680, 681, 682, 747, 845, 880, 894], "next_batch": 89, "call": [89, 110, 111, 151, 154, 238, 239, 242, 305, 308, 539, 549, 620, 621, 630, 894], "table_uri": [90, 100], "delta_table_opt": [90, 100], "lake": [90, 100, 548], "uri": [90, 98, 100], "root": [90, 100, 378, 388, 394, 405, 439, 471, 538, 539, 829, 894], "For": [90, 91, 98, 100, 128, 140, 152, 153, 186, 212, 239, 287, 295, 393, 410, 435, 498, 507, 508, 539, 570, 575, 600, 615, 621, 629, 796, 826, 876, 894], "filesystem": [90, 100], "absolut": [90, 100, 106, 107, 246, 539, 625, 894], "rel": [90, 100, 106, 107, 222, 332, 348, 349, 350, 539, 719, 737, 738, 739, 894], "But": [90, 100], "gc": [90, 100], "azur": [90, 100], "thu": [90, 99, 100, 128, 239, 525, 629, 894], "latest": [90, 100, 361, 393, 539], "backend": [90, 98, 100], "deltalak": [90, 100], "cloud": [90, 100, 101], "configur": [90, 100], "authent": [90, 100], "keyword": [90, 96, 100, 166, 167, 176, 239, 586, 621, 894], "while": [90, 91, 100, 110, 111, 151, 159, 199, 239, 583, 621], "sinc": [90, 100, 222, 242, 319, 353, 359, 509, 539, 702, 741, 894], "table_path": [90, 100], "fail": [90, 100, 200, 239, 287, 465, 605, 621, 630, 856, 894], "aw": [90, 100], "see": [90, 91, 98, 100, 106, 107, 110, 111, 152, 166, 167, 239, 298, 299, 300, 338, 356, 365, 379, 387, 435, 522, 539, 680, 681, 682, 725, 772, 826, 894, 901], "bucket": [90, 100, 335, 340, 722, 727], "aws_access_key_id": [90, 100], "the_aws_access_key_id": [90, 100], "aws_secret_access_kei": [90, 100], "the_aws_secret_access_kei": [90, 100], "googl": [90, 100], "service_account": [90, 100], "service_account_json_absolute_path": [90, 100], "az": [90, 100], "adl": [90, 100], "abf": [90, 100], "azure_storage_account_nam": [90, 100], "azure_storage_account_kei": [90, 100], "without_fil": [90, 100], "load": [90, 100, 548, 571, 578, 621], "track": [90, 100, 117, 239], "sheet_id": 91, "sheet_nam": 91, "xlsx2csv_option": 91, "read_csv_opt": 91, "excel": [91, 548], "xlsx": 91, "sheet": 91, "xlsx2csv": [91, 105], "read_csv": [91, 99], "skip_empty_lin": 91, "my": [91, 100, 101], "datasheet": 91, "excel_fil": 91, "correct": [91, 349, 350, 379, 420, 435, 539, 579, 621, 738, 739, 772, 806, 826, 894], "look": [91, 287, 290, 669], "document": [91, 98, 450, 465, 841, 856], "fix": [91, 109, 110, 344, 415, 416, 417, 418, 419, 421, 422, 423, 539, 731], "whole": [91, 437, 438, 448, 539, 839], "twice": 91, "actual": [91, 110, 111, 821, 894], "With": 91, "1000": [91, 126, 239, 324, 468, 710], "spreadsheet": [91, 168, 239], "xl": 91, "xlsm": 91, "xlsb": 91, "odf": 91, "od": [91, 464, 855], "odt": 91, "from_panda": 91, "memory_map": [92, 96, 102], "v2": [92, 102], "valid": [92, 96, 111, 126, 239, 309, 437, 442, 443, 448, 449, 450, 539, 690, 736, 749, 833, 834, 839, 840, 841, 846, 847, 894], "greatli": [92, 102], "repeat": [92, 102, 409, 411, 539], "o": [92, 102, 309, 359, 447, 479, 539, 690, 838, 879, 894], "page": [92, 102, 239, 539, 548, 598, 621, 894], "give": [92, 96, 102, 103, 104, 159, 239, 319, 379, 411, 539, 548, 583, 621, 702, 772, 894], "read_ndjson": 94, "parallelstrategi": [96, 104], "directori": 96, "partit": [96, 98, 101, 165, 239], "awar": [96, 341, 465, 728, 732, 856], "stabl": 96, "increas": [96, 309, 539, 690, 894], "row_group": [96, 104], "direct": [96, 98, 104, 202, 239], "read_tabl": 96, "connection_uri": 98, "partition_on": 98, "partition_rang": 98, "partition_num": 98, "protocol": 98, "databas": 98, "postgresql": 98, "redshift": 98, "mysql": 98, "mariadb": 98, "clickhous": 98, "oracl": 98, "bigqueri": 98, "server": 98, "pleas": [98, 100], "connectorx": [98, 105], "doc": 98, "github": 98, "com": [98, 348, 349, 350, 448, 539, 737, 738, 739, 839, 894], "sfu": 98, "db": 98, "connector": 98, "destin": 98, "raw": 98, "transfer": 98, "detail": [98, 106, 107, 901], "partition_col": 98, "explicitli": [98, 109, 110, 527], "with_column_nam": 99, "push": [99, 101, 102, 103, 104], "down": [99, 101, 102, 103, 104, 360, 539, 747, 894], "therebi": [99, 102, 103, 104], "potenti": [99, 102, 103, 104], "overhead": [99, 102, 103, 104], "updat": 99, "just": [99, 159, 239, 583, 621], "befor": [99, 128, 139, 153, 201, 239, 307, 308, 309, 403, 414, 415, 416, 417, 418, 419, 421, 422, 423, 468, 472, 539, 569, 572, 575, 606, 621, 629, 688, 689, 690, 789, 800, 801, 802, 803, 804, 805, 807, 808, 809, 859, 865, 894], "realloc": [99, 102, 103, 128, 239, 629, 894], "my_long_fil": 99, "doesn": [99, 347, 539, 735, 884, 894], "thing": [99, 486, 506], "less": [99, 153, 239, 452, 457, 462, 468, 575, 621, 843, 848, 853, 859], "limit": [99, 130, 239, 289, 298, 299, 300, 356, 361, 539, 564, 571, 598, 621, 680, 681, 682, 744, 894], "breezah": 99, "languag": [99, 139, 140, 153, 203, 239, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 719, 722, 727], "terribl": 99, "mydf": 99, "write_csv": [99, 239], "lambda": [99, 117, 133, 167, 212, 239, 252, 287, 348, 349, 350, 387, 388, 414, 500, 528, 539, 579, 586, 615, 621, 630, 667, 737, 738, 739, 894], "raw_filesystem": 100, "adjust": [100, 348, 349, 350, 435, 539, 737, 738, 739, 826, 894], "subtreefilesystem": 100, "reli": 100, "mention": 100, "ensur": [100, 110, 111, 113, 176, 239, 483, 539, 579, 621, 876, 882, 894], "gcsf": 100, "pyfilesystem": 100, "fsspechandl": 100, "gcsfilesystem": 100, "id": [100, 212, 455, 456, 481, 483, 539, 615, 881, 894], "token": 100, "pa_f": 100, "adlf": 100, "azureblobfilesystem": 100, "account_nam": 100, "account_kei": 100, "allow_pyarrow_filt": 101, "lead": [101, 239, 427, 453, 464, 468, 474, 483, 515, 518, 525, 539, 579, 615, 621, 816, 844, 855, 859, 894], "comparison": 101, "dset": 101, "folder": 101, "out": [101, 105, 140, 239, 272, 286, 291, 368, 371, 444, 539, 570, 597, 598, 621, 652, 666, 670, 835], "1970": 101, "stdout": 105, "14": [105, 117, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 239, 365, 539, 722], "platform": 105, "linux": 105, "microsoft": 105, "standard": [105, 187, 239, 322, 349, 421, 435, 440, 450, 526, 539, 601, 621, 705, 738, 826, 830, 841, 894], "wsl2": 105, "x86_64": 105, "glibc2": 105, "main": 105, "jul": [105, 465, 856], "56": [105, 476, 539], "gcc": 105, "20210110": 105, "23": [105, 139, 140, 222, 239, 242, 316, 320, 335, 502, 569, 570, 621, 699, 703], "check_dtyp": [106, 107], "check_exact": [106, 107], "rtol": [106, 107], "1e": [106, 107], "atol": [106, 107], "nans_compare_equ": [106, 107], "check_column_ord": 106, "check_row_ord": 106, "assertionerror": [106, 107], "NOT": [106, 107, 470, 568, 621], "compar": [106, 107, 134, 239, 813, 894], "exactli": [106, 107, 110, 111, 461, 462, 821, 852, 853, 894], "toler": [106, 107, 153, 239, 575, 621], "inexact": [106, 107], "assert": [106, 107, 109, 110, 111, 140, 239, 548, 570, 621, 749, 894], "irrespect": 106, "thei": [106, 154, 239, 351, 414, 539, 621, 800, 894], "appear": [106, 481, 539, 881, 894], "unsort": 106, "check_nam": 107, "s1": [107, 133, 239, 885, 894], "searchstrategi": [108, 110, 111], "null_prob": [108, 110, 111], "percentag": [108, 110, 111, 403, 539, 789, 894], "chanc": [108, 110, 111], "hypothesi": [108, 109, 110, 111, 901], "sampled_from": 108, "unique_small_int": 108, "ccy": 108, "gbp": 108, "eur": [108, 121, 137, 239], "jpy": 108, "min_col": [109, 110], "max_col": [109, 110], "suitabl": [109, 426, 539, 812, 894], "standalon": [109, 110], "itself": [109, 577, 621], "explicit": [109, 489, 522], "omit": [109, 110, 111, 163, 239], "random": [109, 110, 111, 141, 178, 239, 362, 408, 425, 431, 539, 750, 794, 811, 822, 894], "mincol": 109, "exact": [109, 110, 111, 184, 239, 465, 856], "control": [109, 557, 621], "especi": 109, "punctuat": 109, "test_special_char_colname_init": 109, "z": [109, 110, 126, 147, 149, 152, 159, 239, 266, 296, 362, 411, 539, 574, 583, 599, 621, 676, 744, 894], "test_unique_xyz": 109, "assert_someth": 109, "min_siz": [110, 111], "max_siz": [110, 111], "include_col": 110, "allow_infin": [110, 111], "allowed_dtyp": [110, 111], "excluded_dtyp": [110, 111], "describ": [110, 137, 239, 614, 894], "desir": 110, "n_chunk": [110, 111, 239, 894], "randomis": 110, "individu": [110, 140, 239, 252, 449, 539, 570, 598, 621, 678, 840, 894], "append": [110, 128, 152, 153, 239, 409, 539, 574, 575, 621, 894], "onto": 110, "independ": [110, 111], "either": [110, 140, 154, 157, 176, 188, 239, 570, 577, 621], "basi": 110, "pct": 110, "take": [110, 133, 160, 167, 190, 239, 332, 341, 475, 504, 506, 539, 584, 604, 621, 719, 728, 868, 885, 894], "preced": 110, "disallow": [110, 111], "exclud": [110, 111, 305, 308, 366, 493, 525, 539], "deploi": [110, 111], "characterist": [110, 111], "develop": [110, 111], "directli": [110, 111, 348, 349, 350, 539, 737, 738, 739, 894], "concret": [110, 111], "test_repr": [110, 111], "isinst": [110, 111, 239], "repr": [110, 111], "known": [110, 615], "colnam": [110, 125, 239, 388, 539, 560, 621], "df_strategi": 110, "15836": 110, "1755e": 110, "38": 110, "575050513": 110, "constructor": 111, "max_data_s": 111, "distinct": [111, 165, 239, 288, 408, 501, 502, 503, 539, 668, 794, 894], "54666": 111, "35": 111, "6414": 111, "63290": 111, "pool": 112, "return_dtyp": [117, 239, 252, 387, 488, 514, 539, 630, 894], "inference_s": [117, 239], "256": [117, 239, 789, 894], "user": [117, 167, 212, 239, 252, 427, 488, 539, 586, 615, 621, 630, 816, 894], "udf": [117, 167, 212, 239, 252, 488, 539, 586, 615, 621, 630, 894], "logic": [117, 212, 239, 252, 478, 539, 567, 574, 589, 613, 615, 621, 878, 894], "almost": [117, 212, 239, 252, 539, 615], "_significantly_": [117, 212, 239, 252, 539, 615], "intens": [117, 212, 239, 252, 539, 615], "becaus": [117, 126, 139, 154, 202, 212, 239, 252, 269, 539, 569, 615, 621, 630, 649, 736, 894], "engin": [117, 212, 239, 252, 539, 615], "forc": [117, 153, 212, 239, 252, 539, 574, 575, 615, 621], "materi": [117, 212, 239, 252, 539, 587, 615, 621], "parallelis": [117, 212, 239, 252, 539, 615], "optimis": [117, 212, 239, 252, 539, 615, 814, 815, 894], "wherev": [117, 212, 239, 252, 539, 615], "strongli": [117, 212, 239, 252, 539, 615], "achiev": [117, 212, 239, 252, 539, 615], "best": [117, 212, 239, 252, 539, 615], "tri": [117, 239], "arbitrarili": [117, 239], "rearrang": [117, 239], "want": [117, 128, 163, 239, 298, 299, 300, 357, 387, 415, 416, 417, 418, 419, 421, 422, 423, 498, 507, 539, 554, 571, 578, 621, 629, 680, 681, 682, 876, 894], "preserv": [117, 239, 432, 539, 823, 894], "syntax": [117, 163, 186, 239, 596, 600, 621, 894], "15": [117, 139, 140, 145, 239, 309, 335, 340, 353, 359, 539, 569, 570, 621, 690, 722, 727, 741, 894], "better": [117, 212, 239, 252, 483, 539, 615, 814, 815, 894], "scalar": [117, 150, 239, 426, 488, 539, 771, 812, 894], "ident": [118, 119, 239, 552, 553, 621, 679, 683, 894], "cheap": [118, 119, 239, 552, 553, 621, 629, 679, 683, 894], "deepcopi": [118, 119, 239, 552, 553, 621, 679, 683, 894], "13": [118, 119, 129, 130, 136, 140, 145, 154, 162, 208, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 242, 414, 416, 494, 530, 539, 552, 553, 563, 564, 570, 577, 610, 621, 630, 722, 727, 729, 894], "clear": [119, 239, 553, 621, 683, 894], "properti": [120, 125, 143, 179, 181, 206, 239, 548, 555, 560, 592, 608, 621], "appl": [120, 144, 152, 172, 174, 192, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 239, 405, 413, 446, 463, 471, 539, 574, 590, 621, 837, 854], "banana": [120, 192, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 239, 405, 413, 471, 539], "summari": [121, 239, 691, 894], "glimps": [121, 142, 239], "usd": [121, 137, 239], "2020": [121, 137, 140, 239, 318, 321, 324, 326, 328, 331, 337, 345, 570, 621, 698, 701, 704, 710, 712, 715, 718, 724, 732], "2021": [121, 137, 139, 203, 239, 465, 513, 569, 621, 705, 755, 856, 894], "null_count": [121, 124, 239, 309, 539, 690, 691, 894], "266667": [121, 239], "666667": [121, 157, 204, 218, 239, 348, 539, 607, 621], "std": [121, 239, 414, 539, 621, 691, 807, 894], "101514": [121, 239], "707107": [121, 239, 349, 539, 738, 894], "57735": [121, 239], "median": [121, 168, 239, 417, 539, 611, 621, 803, 894], "snippet": [124, 239, 559, 621], "is_nul": [124, 239, 539, 559, 621, 894], "height": [124, 239], "sizeunit": [126, 239, 736, 894], "total": [126, 239, 736, 894], "heap": [126, 239, 736, 894], "its": [126, 201, 239, 316, 335, 340, 606, 621, 699, 722, 727, 736, 894], "bitmap": [126, 239, 736, 894], "therefor": [126, 239, 287, 736, 894], "structarrai": [126, 239, 736, 894], "constant": [126, 140, 239, 354, 539, 570, 621, 736, 742, 894], "unchang": [126, 239, 252, 478, 539, 579, 615, 621, 736, 878, 894], "visibl": [126, 239, 736, 894], "capac": [126, 184, 239, 736, 821, 894], "ffi": [126, 239, 736, 894], "kb": [126, 239, 736, 894], "mb": [126, 239, 736, 894], "gb": [126, 239, 736, 894], "tb": [126, 239, 736, 894], "scale": [126, 239, 736, 894], "1_000_000": [126, 239, 736, 894], "25888898": [126, 239], "689577102661133": [126, 239], "long": [127, 159, 202, 239, 561, 583, 621], "largelist": [127, 239], "letter": [127, 215, 225, 239, 351, 505, 539, 561, 616, 617, 621], "locat": [128, 174, 197, 201, 239, 426, 539, 606, 621, 629, 812, 815, 867, 894], "faster": [128, 151, 202, 239, 252, 414, 454, 481, 539, 597, 598, 621, 629, 630, 800, 845, 894], "onlin": [128, 239, 629, 894], "rerun": [128, 239, 629, 894], "latter": [128, 239, 629, 894], "20": [128, 144, 145, 167, 169, 173, 174, 239, 259, 260, 261, 263, 310, 335, 340, 362, 365, 509, 513, 539, 586, 621, 727], "40": [128, 167, 239, 335, 340, 362, 539, 586, 621, 705, 727], "50": [128, 239, 298, 299, 300, 335, 340, 539, 680, 727, 894], "60": [128, 239, 336, 337, 465, 720, 723, 724, 856], "fill_valu": [129, 183, 202, 239, 355, 429, 539, 563, 595, 621, 743, 819, 894], "Not": [129, 239, 372, 374, 539, 563, 621], "To": [129, 239, 312, 313, 356, 515, 518, 528, 539, 563, 621], "fillnullstrategi": [130, 239, 356, 539, 564, 621, 744, 894], "matches_supertyp": [130, 239, 564, 621], "forward": [130, 153, 239, 356, 361, 539, 564, 575, 621, 744, 894], "consecut": [130, 239, 289, 356, 361, 441, 539, 564, 621, 744, 832, 894], "supertyp": [130, 239, 251, 539, 564, 621], "fill_nan": [130, 239, 539, 621, 894], "OR": [131, 239, 487, 565, 621], "reduct": [133, 239], "effect": [133, 239, 612, 621], "supercast": [133, 239], "similar": [133, 153, 239, 402, 539, 575, 621], "parent": [133, 239], "rule": [133, 239, 338, 725], "arithmet": [133, 239], "zip_with": [133, 239, 894], "foo11": [133, 239], "bar22": [133, 239], "null_equ": [134, 239, 813, 894], "retriev": [135, 239, 264, 265, 469, 644, 645, 860], "preview": [137, 239], "wide": [137, 159, 202, 239, 583, 621], "nice": [137, 239], "few": [137, 239], "head": [137, 155, 189, 239, 251, 382, 539, 578, 621, 774, 894], "tail": [137, 142, 210, 239, 251, 435, 539, 621, 826, 894], "maintain_ord": [138, 165, 168, 200, 203, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 247, 252, 474, 480, 496, 539, 554, 557, 562, 568, 587, 596, 597, 598, 605, 621, 880, 894], "consist": [138, 239, 568, 621], "agg": [138, 139, 140, 239, 247, 252, 357, 437, 474, 485, 496, 539, 554, 557, 562, 568, 569, 570, 587, 596, 621], "loop": [138, 239], "sub_df": [138, 239], "index_column": [139, 140, 239, 569, 570, 621], "truncat": [139, 239, 569, 587, 621], "include_boundari": [139, 239, 569, 621], "start_bi": [139, 239, 569, 621], "startbi": [139, 239, 569, 621], "dynamicgroupbi": [139, 239], "normal": [139, 239, 347, 379, 435, 539, 569, 621, 735, 772, 826, 894], "groupbi": [139, 140, 163, 239, 242, 247, 252, 269, 309, 357, 402, 437, 438, 474, 485, 488, 496, 539, 554, 557, 562, 569, 570, 587, 596, 621, 649, 690, 894], "member": [139, 239, 569, 621, 761, 894], "seen": [139, 239, 289, 361, 539, 569, 621], "roll": [139, 140, 239, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 494, 539, 569, 570, 621, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 894], "slot": [139, 239, 268, 309, 310, 539, 569, 621, 648, 690, 692, 894], "1n": [139, 140, 153, 203, 239, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 719, 722, 727], "nanosecond": [139, 140, 153, 203, 239, 332, 335, 336, 340, 415, 416, 417, 418, 419, 421, 422, 423, 503, 539, 569, 570, 575, 621, 719, 722, 723, 727], "1u": [139, 140, 153, 203, 239, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 719, 722, 727], "microsecond": [139, 140, 153, 203, 239, 332, 335, 336, 340, 415, 416, 417, 418, 419, 421, 422, 423, 502, 503, 539, 569, 570, 575, 587, 621, 719, 722, 727], "1m": [139, 140, 153, 203, 239, 324, 326, 331, 332, 335, 337, 340, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 710, 712, 718, 719, 722, 724, 727], "millisecond": [139, 140, 153, 203, 239, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 503, 539, 569, 570, 575, 621, 719, 722, 727], "1h": [139, 140, 153, 203, 239, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 703, 719, 722, 727], "1w": [139, 140, 153, 203, 239, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 719, 722, 727], "week": [139, 140, 153, 203, 239, 332, 335, 340, 343, 415, 416, 417, 418, 419, 421, 422, 423, 503, 539, 569, 570, 575, 621, 719, 722, 727, 730], "month": [139, 140, 153, 203, 239, 317, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 501, 502, 539, 569, 570, 575, 621, 700, 719, 722, 727], "1y": [139, 140, 153, 203, 239, 332, 335, 340, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 719, 722, 727, 733], "year": [139, 140, 153, 203, 239, 322, 332, 333, 335, 340, 342, 415, 416, 417, 418, 419, 421, 422, 423, 501, 502, 539, 569, 570, 575, 621, 705, 719, 720, 722, 727, 729], "1i": [139, 140, 153, 203, 239, 332, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 570, 575, 621, 719], "Or": [139, 140, 153, 203, 239, 402, 531, 539, 569, 570, 575, 621], "10i": [139, 140, 239, 569, 570, 621], "often": [139, 140, 239, 411, 539, 569, 570, 621], "ascend": [139, 140, 239, 490, 569, 570, 621], "dynam": [139, 239, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 621], "matter": [139, 140, 239, 569, 570, 621], "neg": [139, 142, 182, 183, 185, 189, 239, 281, 282, 428, 429, 436, 459, 539, 569, 594, 595, 599, 612, 621, 661, 662, 818, 819, 827, 850, 894], "_lower_bound": [139, 239, 569, 621], "_upper_bound": [139, 239, 569, 621], "impact": [139, 239, 569, 621], "harder": [139, 239, 569, 621], "side": [139, 140, 239, 366, 415, 416, 417, 418, 419, 421, 422, 423, 426, 539, 569, 570, 621, 812, 894], "inclus": [139, 140, 239, 366, 415, 416, 417, 418, 419, 421, 422, 423, 460, 461, 539, 569, 570, 621, 851, 852], "datapoint": [139, 239, 569, 621], "mondai": [139, 239, 343, 569, 621, 730], "date_rang": [139, 203, 239, 314, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 569, 621, 697, 698, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733], "30m": [139, 239, 335, 340, 569, 621, 722, 727], "time_min": [139, 239, 569, 621], "time_max": [139, 239, 569, 621], "boundari": [139, 239, 298, 299, 300, 539, 569, 621, 680, 681, 682, 894], "ad": [139, 199, 207, 208, 239, 251, 354, 498, 499, 539, 569, 609, 610, 621, 742, 894], "time_count": [139, 239, 569, 621], "_lower_boundari": [139, 239, 569, 621], "_upper_boundari": [139, 239, 569, 621], "lower_bound": [139, 239, 539, 569, 621], "upper_bound": [139, 239, 287, 539, 569, 621], "time_agg_list": [139, 239, 569, 621], "idx": [139, 239, 287, 569, 621, 667, 815, 894], "arang": [139, 202, 212, 239, 569, 615, 621], "2i": [139, 239, 569, 621], "3i": [139, 239, 569, 621], "a_agg_list": [139, 239, 569, 621], "rollinggroupbi": [140, 239], "dynamic_groupbi": [140, 239, 570, 621], "groupby_dynam": [140, 239, 570, 621], "45": [140, 239, 316, 335, 340, 443, 449, 570, 621, 699, 722, 727, 834, 840], "48": [140, 239, 570, 621], "18": [140, 239, 308, 335, 340, 344, 365, 378, 539, 570, 587, 621, 731], "19": [140, 153, 239, 335, 570, 575, 621, 722, 727], "43": [140, 239, 308, 539, 570, 621], "strptime": [140, 239, 338, 570, 621, 725], "2d": [140, 195, 239, 570, 621, 700], "sum_a": [140, 239, 570, 621], "min_a": [140, 239, 570, 621], "max_a": [140, 239, 570, 621], "to_list": [140, 239, 287, 570, 621, 667, 894], "seed": [141, 178, 239, 362, 425, 431, 539, 750, 811, 822, 894], "seed_1": [141, 239, 362, 539, 750, 894], "seed_2": [141, 239, 362, 539, 750, 894], "seed_3": [141, 239, 362, 539, 750, 894], "hash": [141, 239, 539, 894], "u64": [141, 239, 362, 410, 539, 587, 621, 750, 894], "10783150408545073287": [141, 239], "1438741209321515184": [141, 239], "10047419486152048166": [141, 239], "2047317070637311557": [141, 239], "last": [142, 153, 168, 186, 189, 200, 225, 239, 261, 263, 272, 285, 309, 317, 333, 342, 462, 473, 529, 539, 575, 600, 603, 605, 617, 621, 639, 642, 652, 665, 690, 700, 720, 729, 853, 866, 894], "_except_": [142, 189, 239], "ab": [142, 189, 239, 515, 518, 539, 894], "grown": [144, 239], "baz": [145, 146, 168, 201, 222, 239, 460, 462, 573, 606, 621, 853], "intermedi": [146, 239, 573, 621, 753, 894], "linear": [146, 170, 223, 239, 266, 365, 391, 407, 419, 494, 495, 521, 539, 573, 588, 621, 646, 753, 793, 805, 894], "mask": [147, 149, 239, 267, 290, 291, 367, 369, 377, 444, 539, 647, 669, 670, 745, 756, 759, 769, 790, 791, 814, 833, 835, 885, 894], "buffer_s": [151, 239], "500": [151, 239, 562, 621, 709, 711, 717, 723, 801, 802, 804, 894], "iter": [151, 176, 177, 180, 199, 239, 309, 539, 593, 621, 690, 894], "veri": [151, 199, 239, 553, 621, 683, 894], "fit": [151, 184, 202, 239, 430, 539, 820, 821, 894], "speedup": [151, 239], "signific": [151, 239], "4x": [151, 239], "disabl": [151, 239], "export": [151, 177, 239, 512], "materialis": [151, 176, 177, 239], "plan": [151, 153, 154, 239, 551, 556, 557, 567, 574, 575, 589, 596, 613, 621], "left_on": [152, 153, 239, 574, 575, 621], "right_on": [152, 153, 239, 574, 575, 621], "joinstrategi": [152, 239, 574, 621], "suffix": [152, 153, 210, 239, 293, 372, 374, 375, 376, 413, 446, 539, 574, 575, 611, 621, 672, 837], "_right": [152, 153, 239, 574, 575, 621], "outer": [152, 239, 574, 621], "semi": [152, 239, 574, 621], "anti": [152, 239, 574, 621, 814, 815, 894], "cross": [152, 239, 574, 621], "join_asof": [152, 239, 574, 621], "stringcach": [152, 239, 548], "other_df": [152, 239, 574, 621], "by_left": [153, 239, 575, 621], "by_right": [153, 239, 575, 621], "asofjoinstrategi": [153, 239, 575, 621], "allow_parallel": [153, 239, 574, 575, 621], "force_parallel": [153, 239, 574, 575, 621], "asof": [153, 239, 575, 621], "rather": [153, 239, 468, 575, 621, 859], "asof_join": [153, 239], "search": [153, 239, 575, 621], "greater": [153, 239, 435, 462, 539, 575, 621, 826, 853, 894], "numer": [153, 239, 298, 299, 300, 411, 430, 539, 548, 575, 621, 680, 681, 682, 767, 813, 820, 894], "distanc": [153, 239, 575, 621], "gdp": [153, 239, 575, 621], "2016": [153, 239, 575, 621], "2017": [153, 239, 575, 621], "2018": [153, 239, 575, 621], "2019": [153, 239, 575, 621], "record": [153, 239, 575, 621], "jan": [153, 239, 575, 621], "1st": [153, 239, 575, 621], "4164": [153, 239, 575, 621], "4411": [153, 239, 575, 621], "4566": [153, 239, 575, 621], "4696": [153, 239, 575, 621], "popul": [153, 239, 575, 621], "12th": [153, 239, 575, 621], "82": [153, 239, 575, 621], "66": [153, 239, 575, 621, 805, 894], "83": [153, 239, 575, 621], "52": [153, 208, 239, 424, 539, 575, 610, 621], "request": [154, 239], "small": [154, 239, 335, 437, 438, 539, 562, 621], "describe_plan": [154, 239, 621], "unoptim": [154, 239, 557, 621], "describe_optimized_plan": [154, 239, 557, 621], "show_graph": [154, 239, 621], "un": [154, 239], "graphviz": [154, 239, 596, 621], "advis": [154, 239], "axi": [156, 157, 159, 161, 188, 239, 583, 621], "null_strategi": [157, 188, 239], "nullstrategi": [157, 188, 239], "propag": [157, 188, 239, 399, 400, 539, 785, 786, 894], "spam": [157, 239], "id_var": [159, 239, 583, 621], "value_var": [159, 239, 583, 621], "variable_nam": [159, 239, 583, 621], "value_nam": [159, 239, 583, 621], "unpivot": [159, 239, 583, 621], "leav": [159, 239, 583, 621], "identifi": [159, 200, 239, 583, 605, 621], "massag": [159, 239, 583, 621], "measur": [159, 239, 583, 621], "merg": [160, 239, 584, 621], "caller": [160, 239, 287, 579, 584, 615, 621], "respons": [160, 239, 584, 621], "One": [163, 168, 239, 894], "what": [163, 239, 876, 884, 894], "struct": [163, 198, 201, 239, 287, 461, 462, 483, 498, 499, 500, 539, 606, 621, 667, 852, 853], "pack": [163, 239], "expr_unique_subset": [163, 239], "df_nuniqu": [163, 239], "df_agg_nuniqu": [163, 239], "simpl": [163, 239], "as_dict": [165, 239], "predict": [165, 168, 171, 203, 239], "k": [165, 239, 296, 379, 479, 539, 676, 772, 879, 894], "l": [165, 239, 359, 539], "pearson": [166, 239, 379, 435, 520, 539, 772, 826, 894], "correl": [166, 239, 520, 525], "coeffici": [166, 239, 435, 539, 826, 894], "corrcoef": [166, 239], "func": [167, 239, 586, 621, 630, 894], "offer": [167, 239, 586, 621], "recommend": [167, 239], "fulli": [167, 239], "advantag": [167, 239], "cast_str_to_int": [167, 239, 586, 621], "col_nam": [167, 239, 586, 621], "tdf": [167, 239, 586, 621], "aggregate_fn": [168, 239], "pivotagg": [168, 239], "sort_column": [168, 239], "well": [168, 239], "predefin": [168, 239], "transpos": [168, 222, 239], "discoveri": [168, 239], "interpol": [170, 223, 239, 356, 391, 407, 419, 521, 539, 588, 621, 793, 805, 894], "rollinginterpolationmethod": [170, 223, 239, 407, 419, 521, 539, 588, 621, 793, 805, 894], "midpoint": [170, 223, 239, 407, 419, 521, 539, 588, 621, 793, 805, 894], "subsequ": [171, 239], "old": [172, 239, 590, 621], "new_col": [173, 239], "val": [175, 239, 296, 478, 539, 591, 621, 676], "by_pred": [176, 239], "accord": [176, 239, 705], "iterrow": [176, 177, 239], "mutual": [176, 239], "exclus": [176, 239], "addition": [176, 239], "clariti": [176, 239], "anyth": [176, 239], "toomanyrowsreturn": [176, 239, 548], "norowsreturn": [176, 239, 548], "inherit": [176, 239], "rowsexcept": [176, 239, 548], "frac": [178, 239, 348, 349, 350, 425, 435, 479, 539, 737, 738, 739, 811, 826, 879, 894], "with_replac": [178, 239, 425, 539, 811, 894], "shuffl": [178, 212, 239, 425, 539, 615, 811, 894], "modul": [178, 239, 425, 431, 538, 539, 811, 894], "whenthen": [180, 239, 593, 621], "whenthenthen": [180, 239, 593, 621], "shift_and_fil": [182, 239, 539, 621, 894], "shift": [183, 239, 268, 310, 403, 429, 494, 539, 595, 621, 648, 692, 789, 819, 894], "shrink": [184, 239, 430, 539, 820, 821, 894], "hold": [184, 239, 493], "nulls_last": [186, 239, 261, 263, 437, 539, 600, 621, 639, 642, 894], "ddof": [187, 204, 239, 440, 484, 520, 525, 526, 530, 539, 601, 607, 621, 830, 883, 894], "deviat": [187, 239, 349, 421, 440, 526, 539, 601, 621, 738, 830, 894], "degre": [187, 204, 239, 440, 484, 520, 525, 539, 830, 883, 894], "freedom": [187, 204, 239, 440, 484, 520, 525, 539, 830, 883, 894], "816497": [187, 239], "21": [188, 239, 509], "16a": [188, 239], "27b": [188, 239], "38c": [188, 239], "nth": [190, 239, 462, 475, 539, 604, 621, 853, 868, 894], "mostli": [191, 239, 357, 539], "categoricaltyp": [191, 239], "large_str": [191, 239], "as_seri": [192, 239], "fruit": [192, 239, 405, 413, 446, 463, 471, 539, 837, 854], "car": [192, 239, 405, 413, 471, 539], "beetl": [192, 239, 405, 413, 471, 539], "audi": [192, 239, 405, 413, 471, 539], "28": [192, 239, 344, 731], "300": [192, 239, 801, 802, 804, 894], "hot": [194, 239], "re": [195, 239, 512], "ll": [195, 239, 876, 894], "numpy_arrai": [195, 239], "date_as_object": [196, 239], "sent": [196, 239, 876, 894], "datetime64": [196, 239], "pandas_df": [196, 239], "three": [198, 239, 426, 527, 539], "four": [198, 239, 527], "five": [198, 239], "num": [198, 239, 366, 369, 468, 539], "include_head": [199, 239], "header_nam": [199, 239], "column_nam": [199, 239], "perhap": [199, 239], "column_2": [199, 239], "name_gener": [199, 239, 287, 667], "base_nam": [199, 239], "my_column_": [199, 239], "my_column_0": [199, 239], "my_column_1": [199, 239], "my_column_2": [199, 239], "uniquekeepstrategi": [200, 239, 605, 621], "decompos": [201, 239, 606, 621], "t_a": [201, 239, 606, 621], "t_b": [201, 239, 606, 621], "t_c": [201, 239, 606, 621], "t_d": [201, 239, 606, 621], "womp": [201, 239, 606, 621], "t_": [201, 239, 606, 621], "t_struct": [201, 239, 606, 621], "step": [202, 239, 489], "unstackdirect": [202, 239], "much": [202, 239, 286, 309, 539, 666, 690, 894], "pivot": [202, 239], "phase": [202, 239], "subject": [202, 239], "ascii_uppercas": [202, 239], "col1": [202, 239], "col2": [202, 239], "h": [202, 239, 359, 430, 539], "col1_0": [202, 239], "col1_1": [202, 239], "col1_2": [202, 239], "col2_0": [202, 239], "col2_1": [202, 239], "col2_2": [202, 239], "time_column": [203, 239], "frequenc": [203, 239], "forward_fil": [203, 239, 305, 308, 539], "06": [203, 239, 316, 334, 346, 722, 730], "varianc": [204, 239, 350, 379, 423, 484, 530, 539, 607, 621, 739, 772, 809, 883, 894], "grow": [205, 239], "b_squar": [207, 239, 609, 621], "36": [207, 239, 609, 621], "named_expr": [208, 239, 610, 621], "is_not": [208, 239, 539, 610, 621], "opt": [208, 239, 610, 621], "with_columns_kwarg": [208, 239, 610, 621], "row_nr": [209, 239, 612, 621, 815, 894], "complet": [210, 876, 894], "idiomat": 210, "_sum": 210, "_tail_sum": 210, "bar_sum": 210, "bar_tail_sum": 210, "sub": [212, 293, 294, 446, 463, 672, 673, 837, 854], "triangl": [212, 615], "group_df": [212, 615], "nr": [215, 225, 616, 617], "maxim": [217, 229, 259, 539, 637, 894], "833333": 218, "minim": [220, 232, 260, 265, 430, 539, 638, 645, 780, 820, 894], "pivot_column": 222, "values_column": 222, "pivotop": 222, "favour": [222, 353, 359, 539, 741, 894], "larg": [222, 437, 438, 539], "overview": [239, 539, 548, 621, 894], "public": [239, 539, 548, 621, 894], "variou": [239, 539, 621, 894], "behavior": [239, 252, 286, 488, 515, 518, 539, 666], "mydatafram": 239, "notic": [239, 894], "initi": [239, 498, 507], "df4": 239, "df5": 239, "df6": 239, "drop_in_plac": 239, "drop_nul": [239, 312, 539, 621, 894], "estimated_s": [239, 894], "explod": [239, 359, 539, 621, 894], "find_idx_by_nam": 239, "fold": [239, 393, 492, 498, 499, 522, 528], "frame_equ": [239, 335, 340], "get_column": [239, 528], "groupby_rol": [239, 415, 416, 417, 418, 419, 421, 422, 423, 539, 569, 621], "hash_row": 239, "hstack": 239, "insert_at_idx": 239, "is_dupl": [239, 539, 894], "is_empti": [239, 894], "is_uniqu": [239, 539, 894], "melt": [239, 621], "merge_sort": [239, 621], "n_uniqu": [239, 539, 614, 894], "partition_bi": 239, "pearson_corr": 239, "pipe": [239, 621], "quantil": [239, 419, 539, 621, 805, 894], "replace_at_idx": 239, "shrink_to_fit": [239, 894], "take_everi": [239, 539, 621, 894], "to_arrow": [239, 894], "to_dict": 239, "to_numpi": [239, 387, 539, 894], "to_panda": [239, 894], "to_struct": [239, 469, 470], "unnest": [239, 461, 462, 621, 852, 853], "unstack": 239, "upsampl": 239, "var": [239, 539, 621, 894], "write_avro": 239, "write_ipc": 239, "write_json": [239, 589, 621], "write_parquet": 239, "favor": 242, "futur": 242, "94": [247, 539], "confus": [249, 372, 374, 539], "tt": [249, 539], "tf": [249, 250, 539], "ff": [249, 250, 539], "upcast": [251, 539], "skip_nul": [252, 539, 630, 894], "pass_nam": [252, 539], "assum": [252, 539, 579, 615, 621], "a_times_2": [252, 539], "invers": [253, 254, 255, 256, 257, 258, 539, 631, 632, 633, 634, 635, 636, 894], "cosin": [253, 254, 301, 302, 387, 539, 631, 632, 684, 685, 894], "570796": [253, 255, 539, 631, 633, 894], "hyperbol": [254, 256, 258, 302, 434, 477, 539, 632, 634, 636, 685, 825, 870, 894], "sine": [255, 256, 387, 433, 434, 539, 633, 634, 824, 825, 894], "881374": [256, 539, 634, 894], "tangent": [257, 258, 476, 477, 539, 635, 636, 869, 870, 894], "785398": [257, 539, 635, 894], "arg_sort": [263, 539, 642, 894], "sublist": [264, 265, 267, 268, 271, 272, 273, 274, 275, 282, 285, 286, 644, 645, 647, 648, 651, 652, 653, 654, 655, 662, 665, 666, 667, 761, 894], "membership": [267, 647], "null_behavior": [268, 310, 539, 648, 692, 894], "nullbehavior": [268, 310, 539, 648, 692, 894], "th": [268, 310, 435, 539, 648, 692, 826, 894], "against": [269, 621, 649, 900], "blindli": [269, 649], "worth": [269, 649], "enough": [269, 435, 539, 649, 826, 894], "concat_list": [269, 504, 649], "rank": [269, 504, 525, 539, 649, 894], "taken": [282, 459, 474, 539, 662, 850], "null_on_oob": [286, 666], "anoth": [286, 309, 314, 341, 438, 539, 611, 621, 630, 666, 690, 697, 728, 813, 894], "cheaper": [286, 666], "n_field_strategi": [287, 667], "tostructstrategi": [287, 667], "first_non_nul": [287, 667], "max_width": [287, 667], "field_0": [287, 667], "field_1": [287, 667], "field_n": [287, 667], "know": [287, 454, 845, 876, 884, 894], "incorrectli": 287, "downstream": [287, 427, 539, 816, 894], "advic": 287, "col_name_": [287, 667], "col_name_0": [287, 667], "col_name_1": [287, 667], "col_name_2": [287, 667], "substr": [290, 293, 294, 442, 446, 455, 456, 460, 461, 462, 463, 669, 672, 673, 833, 837, 846, 847, 851, 852, 853, 854], "transferencod": [291, 292, 444, 445, 670, 671, 835, 836], "strict": [291, 295, 444, 465, 539, 670, 674, 813, 835, 856, 894], "hex": [291, 292, 444, 445, 670, 671, 835, 836], "base64": [291, 292, 444, 445, 670, 671, 835, 836], "prefix": [294, 463, 468, 539, 673, 854, 859], "throw": [295, 450, 539, 674, 841, 894], "due": [295, 539, 674, 894], "overflow": [295, 307, 308, 472, 539, 674, 688, 689, 865, 894], "categoricalord": [296, 676], "lexic": [296, 676], "min_val": [298, 300, 539, 680, 682, 894], "max_val": [298, 299, 539, 680, 681, 894], "foo_clip": [298, 299, 300, 539], "clip": [299, 300, 539, 681, 682, 894], "543081": [302, 539, 685, 894], "cumul": [304, 305, 306, 307, 308, 498, 499, 500, 539, 686, 687, 688, 689, 894], "a_revers": [304, 305, 306, 307, 308, 388, 413, 471, 539], "value_cummax": [305, 539], "value_cummax_all_fil": [305, 539], "uint16": [307, 308, 472, 539, 688, 689, 865, 894], "prevent": [307, 308, 378, 472, 539, 688, 689, 865, 894], "value_cumsum": [308, 539], "value_cumsum_all_fil": [308, 539], "min_period": [309, 348, 349, 350, 414, 415, 416, 417, 418, 419, 421, 422, 423, 539, 690, 737, 738, 739, 800, 801, 802, 803, 804, 805, 807, 808, 809, 894], "slide": [309, 539, 690, 894], "realli": [309, 539, 690, 894], "complex": [309, 479, 539, 690, 879, 894], "visit": [309, 539, 690, 894], "44": [311, 539], "drop_nan": [313, 539, 894], "tu": [314, 316, 319, 339, 344, 697, 698, 699, 702, 726, 731], "lose": [314, 697], "2001": [314, 317, 319, 320, 327, 329, 332, 333, 334, 335, 336, 339, 340, 342, 343, 344, 346, 465, 697, 700, 702, 703, 706, 707, 708, 709, 711, 713, 714, 716, 717, 719, 720, 721, 722, 723, 725, 726, 727, 729, 730, 731, 733, 856], "tu_m": [314, 697], "tu_n": [314, 697], "tz": [315, 341, 345, 698, 728, 732], "with_time_zon": [315, 698], "timestamp": [315, 509, 698], "tm": [316, 699], "naiv": [316, 341, 699, 728, 732], "compon": [316, 336, 465, 501, 502, 503, 699, 723], "resolv": 316, "dtm": [316, 699], "2023": [316, 699], "59": [316, 327, 336, 502, 699, 714, 723], "456000": [316, 699], "101000": 316, "456": [316, 699, 874, 894], "101": 316, "d1": 316, "d2": 316, "d3": 316, "extract": [317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 342, 343, 346, 449, 450, 700, 701, 703, 704, 705, 709, 710, 711, 712, 714, 715, 716, 717, 718, 720, 721, 723, 724, 729, 730, 733, 840, 841], "weekdai": [317, 333], "day_of_month": [317, 333, 343], "ordinal_dai": [317, 343], "day_of_year": [317, 333, 343], "diff": [318, 321, 324, 326, 328, 331, 337, 539, 701, 704, 710, 712, 715, 718, 724, 894], "days_diff": 318, "epochtimeunit": [319, 702], "unix": [319, 509, 702], "epoch_n": [319, 702], "epoch_": [319, 702], "978307200000000": [319, 339, 702, 726], "978307200": [319, 702], "978393600000000": [319, 339, 702, 726], "978393600": [319, 702], "978480000000000": [319, 339, 702, 726], "978480000": [319, 702], "hours_diff": 321, "iso": [322, 342, 343, 705, 729, 730], "correspond": [322, 408, 539, 705, 794, 894], "microseconds_diff": 324, "1001": [324, 326, 331], "002": [324, 326, 331, 503, 710, 712, 718], "003": [324, 326, 331], "997": [324, 326, 331], "998": [324, 326, 331], "999": [324, 326, 331], "milliseconds_diff": 326, "minutes_diff": 328, "1440": [328, 715], "nanoseconds_diff": 331, "1000000": [331, 468, 718], "leap": [332, 719], "account": [332, 348, 349, 350, 539, 719, 737, 738, 739, 894], "minu": [332, 719], "dictat": [332, 719], "2000": [332, 719], "2005": [332, 719], "date_plus_1i": [332, 719], "1y2mo": [332, 719], "date_min": 332, "1998": [332, 719], "2002": [332, 334, 346, 719, 733], "1999": [332, 719], "2003": [332, 509, 719], "2004": [332, 719], "2006": [332, 719], "ordin": [333, 408, 539, 720, 794, 894], "366": [333, 720], "180": [334, 346], "half": [335, 348, 349, 350, 539, 722, 737, 738, 739, 894], "eg": [335, 465], "225": [335, 340], "to_fram": [335, 340, 465, 469, 470, 814, 815, 852, 853, 856, 894], "10m": [335, 340, 722, 727], "milli": [336, 723], "micro": [336, 723], "456789": 336, "654321": 336, "111110": 336, "765431": 336, "sec": 336, "11111": 336, "seconds_diff": 337, "fmt": [338, 364, 465, 508, 539, 572, 621, 725, 856], "timestamp_n": [339, 726], "timestamp_m": 339, "978307200000": 339, "978393600000": 339, "978480000000": 339, "53": [342, 729], "sundai": [343, 730], "incorrect": [344, 427, 539, 615, 731, 816, 894], "tu_u": [344, 731], "32971": [344, 731], "32974": [344, 731], "32976": [344, 731], "europ": [345, 698, 732], "london": [345, 698, 732], "gmt": [345, 698, 732], "bst": [345, 698, 732], "718281828459045": [347, 384, 539, 735, 775, 894], "formula": [347, 539, 735, 894], "pk": [347, 539, 735, 894], "459148": [347, 539], "754888": [347, 539], "span": [348, 349, 350, 539, 737, 738, 739, 894], "half_lif": [348, 349, 350, 539, 737, 738, 739, 894], "exponenti": [348, 349, 350, 352, 539, 737, 738, 739, 740, 894], "weight": [348, 349, 350, 414, 415, 416, 417, 418, 419, 421, 422, 423, 435, 539, 737, 738, 739, 800, 801, 802, 803, 804, 805, 807, 808, 809, 826, 894], "averag": [348, 408, 539, 737, 794, 894], "decai": [348, 349, 350, 539, 737, 738, 739, 894], "term": [348, 349, 350, 451, 454, 539, 737, 738, 739, 842, 845, 894], "mass": [348, 349, 350, 539, 737, 738, 739, 894], "gamma": [348, 349, 350, 539, 737, 738, 739, 894], "foral": [348, 349, 350, 539, 737, 738, 739, 894], "geq": [348, 349, 350, 539, 737, 738, 739, 894], "theta": [348, 349, 350, 539, 737, 738, 739, 894], "life": [348, 349, 350, 539, 737, 738, 739, 894], "exp": [348, 349, 350, 539, 737, 738, 739, 894], "ln": [348, 349, 350, 539, 737, 738, 739, 894], "smooth": [348, 349, 350, 539, 737, 738, 739, 894], "factor": [348, 349, 350, 478, 539, 737, 738, 739, 878, 894], "leq": [348, 349, 350, 539, 737, 738, 739, 894], "begin": [348, 349, 350, 448, 539, 737, 738, 739, 839, 894], "imbal": [348, 349, 350, 539, 737, 738, 739, 894], "ew": [348, 349, 350, 539, 737, 738, 739, 894], "w_i": [348, 349, 350, 539, 737, 738, 739, 894], "recurs": [348, 349, 350, 539, 737, 738, 739, 894], "y_0": [348, 349, 350, 539, 737, 738, 739, 894], "x_0": [348, 349, 350, 539, 737, 738, 739, 894], "y_t": [348, 349, 350, 539, 737, 738, 739, 894], "y_": [348, 349, 350, 539, 737, 738, 739, 894], "x_t": [348, 349, 350, 539, 737, 738, 739, 894], "observ": [348, 349, 350, 539, 737, 738, 739, 894], "428571": [348, 539], "bia": [349, 350, 379, 420, 435, 539, 738, 739, 772, 806, 826, 894], "unbias": [349, 350, 539, 738, 739, 894], "963624": [349, 539, 738, 894], "928571": [350, 539, 739, 894], "wildcard": [351, 486, 493, 498, 499, 505, 507, 522, 539], "regex": [351, 442, 443, 446, 448, 449, 455, 456, 463, 493, 505, 515, 518, 528, 539, 833, 834, 837, 839, 840, 846, 847, 854], "aa": [351, 505, 539], "ba": [351, 505, 539], "cc": [351, 505, 539], "718282": [352, 539], "389056": [352, 539], "54": [352, 539], "59815": [352, 539], "expand": [353, 359, 411, 539, 741, 894], "arr": [353, 359, 504, 532, 539, 741, 876, 886, 894], "exprlistnamespac": [353, 539], "exprstringnamespac": [353, 539], "group_col": [357, 485, 539], "g1": [357, 402, 485, 539], "g2": [357, 402, 485, 539], "lt": [357, 485, 539], "gte": [357, 485, 539], "r": [359, 443, 447, 448, 449, 455, 539, 834, 838, 839, 840, 846], "word": [359, 539], "9774092659964970114": [362, 539], "13614470193936745724": [362, 539], "1101441246220388612": [362, 539], "11638928888656214026": [362, 539], "13382926553367784577": [362, 539], "cumsum": [364, 539, 572, 621, 894], "interpolationmethod": [365, 539, 753, 894], "regrid": [365, 539], "grid": [365, 539], "df_original_grid": [365, 539], "grid_point": [365, 539], "df_new_grid": [365, 539], "include_bound": [366, 539], "primit": [366, 370, 539, 876, 894], "finit": [368, 525, 539, 758, 894], "optional_memb": [370, 539, 761, 894], "infinit": [371, 539, 762, 894], "_isnan": [372, 539], "b_isnan": [372, 539], "negat": [373, 539], "_is_not_nan": [374, 539], "b_is_not_nan": [374, 539], "_not_nul": [375, 539], "a_not_nul": [375, 539], "b_not_nul": [375, 539], "_isnul": [376, 539], "a_isnul": [376, 539], "b_isnul": [376, 539], "undo": [378, 395, 539], "duplicateerror": [378, 539, 548], "occurr": [378, 539], "333333": [378, 423, 539, 789, 809, 894], "fisher": [379, 435, 539, 772, 826, 894], "fourth": [379, 539, 772, 894], "central": [379, 435, 539, 772, 826, 894], "definit": [379, 539, 772, 894], "subtract": [379, 539, 772, 894], "distribut": [379, 435, 539, 772, 826, 894], "elimin": [379, 539, 772, 894], "come": [379, 539, 549, 620, 772, 894], "bias": [379, 435, 539, 772, 826, 894], "scipi": [379, 435, 539, 772, 826, 894], "stat": [379, 435, 539, 772, 826, 894], "153061": [379, 539], "logarithm": [384, 385, 539, 775, 776, 894], "584963": [384, 539], "30103": [385, 539], "60206": [385, 539], "lowest": [386, 539], "9223372036854775808": [386, 539], "agg_list": [387, 539], "elementwis": [387, 414, 415, 416, 417, 418, 419, 421, 422, 423, 486, 487, 539, 800, 801, 802, 803, 804, 805, 807, 808, 809, 894], "third": [387, 539], "parti": [387, 539], "book": [387, 539], "argmax": [387, 539], "_revers": [388, 413, 471, 539], "b_revers": [388, 413, 471, 539], "computeerror": [392, 548], "keep_nam": [395, 539], "poison": [399, 400, 539, 785, 786, 894], "nanmax": [399, 400, 539, 785, 786, 894], "wherea": [399, 400, 539, 571, 578, 621, 785, 786, 894], "subgroup": [402, 539], "postgr": [402, 539], "max_by_group": [402, 539], "recent": [403, 539, 789, 894], "percent": [403, 539, 789, 894], "090909": [403, 539], "expon": [404, 539], "power": [404, 539], "reverse_": [405, 539], "reverse_a": [405, 539], "reverse_fruit": [405, 539], "reverse_b": [405, 539], "reverse_car": [405, 539], "rankmethod": [408, 539, 794, 894], "ti": [408, 539, 794, 894], "appropri": [408, 539, 794, 894], "competit": [408, 539, 794, 894], "highest": [408, 482, 525, 539, 794, 894], "immedi": [408, 527, 539, 794, 894], "64bit": [410, 539, 796, 894], "safe": [410, 539, 796, 876, 894], "coerc": [411, 539], "dim": [412, 539, 798, 894], "flat": [412, 539, 798, 894], "fruits_revers": [413, 471, 539], "cars_revers": [413, 471, 539], "window_s": [414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 539, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 894], "rolling_min": [414, 539, 800, 894], "rolling_max": [414, 539, 800, 894], "rolling_mean": [414, 539, 800, 894], "rolling_sum": [414, 539, 800, 894], "multipli": [414, 415, 416, 417, 418, 419, 421, 422, 423, 539, 800, 801, 802, 803, 804, 805, 807, 808, 809, 894], "358899": [414, 539], "041452": [414, 539], "567764": [414, 539], "travers": [415, 416, 418, 421, 422, 423, 539, 801, 802, 804, 807, 808, 809, 894], "vector": [415, 416, 418, 421, 422, 423, 539, 801, 802, 804, 807, 808, 809, 894], "5h": [415, 416, 417, 418, 419, 421, 422, 423, 539], "33": [419, 424, 493, 539, 805, 894], "skew": [420, 539, 806, 894], "527525": [421, 539, 807, 894], "digit": [424, 468, 539, 810, 834, 859, 894], "17": [424, 509, 539, 684, 722, 894], "searchsortedsid": [426, 539, 812, 894], "maintain": [426, 480, 539, 597, 598, 621, 812, 880, 894], "leftmost": [426, 539, 812, 894], "rightmost": [426, 539, 812, 894], "six": [426, 539], "code": [427, 539, 577, 621, 816, 894], "care": [427, 539, 816, 894], "extrema": [430, 539, 820, 894], "112": [430, 539], "129": [430, 539], "i8": [430, 539, 799, 894], "8589934592": [430, 539], "1073741824": [430, 539], "content": [431, 483, 539, 822, 894], "175201": [434, 539, 825, 894], "unimod": [435, 539, 826, 894], "skewtest": [435, 539, 826, 894], "speak": [435, 539, 826, 894], "g_1": [435, 539, 826, 894], "m_3": [435, 539, 826, 894], "m_2": [435, 539, 826, 894], "m_i": [435, 539, 826, 894], "sum_": [435, 539, 826, 894], "texttt": [435, 539, 826, 894], "k_3": [435, 539, 826, 894], "k_2": [435, 539, 826, 894], "sqrt": [435, 539, 826, 894], "343622": [435, 539], "larger": [437, 525, 539, 597, 598, 621], "414214": [439, 539, 829, 894], "ends_with": [442, 463, 854], "crab": [442, 833], "dog": [442, 466, 467, 495, 833], "rab": [442, 833], "success": [443, 449, 834, 840], "overlap": [443, 449, 834, 840], "captur": [443, 448, 449, 834, 839, 840], "123": [443, 449, 456, 834, 840, 847, 874, 894], "bla": [443, 449, 834, 840], "asd": [443, 449, 834, 840], "678": [443, 449, 834, 840], "910t": [443, 449, 834, 840], "count_digit": 443, "666f6f": [445, 836], "626172": [445, 836], "mango": [446, 463, 837, 854], "go": [446, 837], "has_suffix": 446, "group_index": [448, 839], "vote": [448, 839], "ballon_dor": [448, 839], "candid": [448, 839], "messi": [448, 839], "ref": [448, 839], "candidat": [448, 839], "jorginho": [448, 839], "ronaldo": [448, 839], "w": [448, 839], "extracted_nr": 449, "910": [449, 840], "json_path": [450, 841], "jsonpath": [450, 841], "regardless": [450, 841], "json_val": [450, 841], "n_char": [451, 842], "caf\u00e9": [451, 454, 842, 845], "345": [451, 454, 842, 845], "\u6771\u4eac": [451, 454, 842, 845], "nchar": [451, 454], "fillchar": [452, 457, 843, 848], "justifi": [452, 457, 843, 848], "pad": [452, 457, 468, 843, 848, 859], "cow": [452, 457, 843, 848], "monkei": [452, 457, 843, 848], "hippopotamu": [452, 457, 843, 848], "strip": [453, 458, 844, 849], "whitespac": [453, 458, 464, 844, 849, 855], "tworld": [453, 464, 844, 855], "wod": [453, 458, 844, 849], "rld": [453, 844], "text": [454, 455, 456, 845], "replace_al": [455, 846], "123abc": [455, 846], "abc456": [455, 846], "abcabc": [456, 847], "123a123": [456, 847], "bc": [456, 528, 847], "trail": [458, 464, 849, 855], "worl": [458, 464, 849, 855], "subslic": [459, 850], "pear": [459, 850], "papaya": [459, 850], "dragonfruit": [459, 850], "s_slice": 459, "ear": [459, 850], "aya": [459, 850], "uit": [459, 850], "ya": [459, 850], "onf": [459, 850], "a_1": [461, 852, 873, 894], "d_4": [461, 852], "rename_field": [461, 462, 852, 853], "first_part": [461, 462, 852, 853], "second_part": [461, 462, 852, 853], "remaind": [462, 853], "app": [463, 854], "has_prefix": 463, "polarstemporaltyp": [465, 856], "tz_awar": [465, 856], "strftime": [465, 856], "convers": [465, 548, 732, 856, 875, 876, 894], "anywher": [465, 856], "3f": 465, "sun": [465, 856], "34": [465, 856], "lowercas": [466, 857], "variant": [466, 467], "uppercas": [467, 858], "10000": 468, "100000": 468, "0010": 468, "0001": 468, "00000": 468, "00001": 468, "my_struct": [469, 470, 527], "anymor": 470, "panicexcept": [470, 548], "761594": [477, 539, 870, 894], "replic": [478, 539, 878, 894], "vals_phys": [478, 539], "largest": [479, 539, 879, 894], "smallest": [479, 539, 879, 894], "bottom_k": [479, 539], "value_count": [481, 539, 894], "9223372036854775807": [482, 539], "multithread": [483, 539], "columnwis": [486, 487], "AND": 486, "bitwis": [486, 487], "returns_scalar": 488, "Be": 489, "argsort": [490, 539, 894], "frozenset": 493, "hamburg": 493, "concat": [494, 495, 678, 782, 894], "lag": 494, "mimic": 494, "a_lag_": 494, "a_rol": 494, "plai": 495, "swim": 495, "walk": 495, "full_sent": 495, "covari": 497, "acc": [498, 499, 507, 522], "intoexpr": [498, 507], "include_init": 498, "accumul": [498, 499, 507, 522], "fn": [498, 499, 507, 522], "new_valu": [498, 499, 507, 522], "simpli": [498, 507], "cumreduc": 498, "across": [500, 528], "syntact": [500, 505, 506, 510, 521, 524, 528, 829, 894], "sugar": [500, 505, 506, 510, 521, 524, 528, 829, 894], "cumfold": 500, "999999": 502, "add_week": 503, "add_dai": 503, "add_second": 503, "add_millisecond": 503, "add_hour": 503, "add_millisec": 503, "ond": 503, "eval": 504, "mathemat": 504, "a_b_doubl": 504, "fstring": 508, "placehold": 508, "hello_": 508, "_world": 508, "foo_": 508, "_bar_": 508, "foo_a_bar_1": 508, "foo_b_bar_2": 508, "foo_c_bar_3": 508, "epoch": [509, 698], "timestep": 509, "1666683077": 509, "1666683099": 509, "39": 509, "12345": [509, 677, 747, 810, 894], "12346": 509, "agg_group": [510, 539], "allow_object": 513, "valueexcept": 513, "selector": [515, 518, 528], "544705": 520, "mode": [523, 539, 894], "propagate_nan": 525, "spearman": 525, "605551": 526, "605551275463989": 526, "a_and_b": 527, "isn": 531, "thens": 531, "chain": 531, "sometim": 538, "arcco": [539, 894], "arccosh": [539, 894], "arcsin": [539, 894], "arcsinh": [539, 894], "arctan": [539, 894], "arctanh": [539, 894], "arg_max": [539, 894], "arg_min": [539, 894], "arg_uniqu": [539, 894], "backward_fil": 539, "clip_max": [539, 894], "clip_min": [539, 894], "co": [539, 894], "cosh": [539, 894], "cumcount": 539, "cummax": [539, 894], "cummin": [539, 894], "cumprod": [539, 894], "cumulative_ev": [539, 894], "entropi": [539, 894], "ewm_mean": [539, 894], "ewm_std": [539, 894], "ewm_var": [539, 894], "extend_const": [539, 894], "flatten": 539, "inspect": [539, 621], "is_between": 539, "is_finit": [539, 894], "is_first": [539, 894], "is_in": [539, 894], "is_infinit": [539, 894], "is_nan": [539, 894], "is_not_nan": [539, 894], "is_not_nul": [539, 894], "kurtosi": [539, 894], "log10": [539, 894], "map_alia": 539, "nan_max": [539, 894], "nan_min": [539, 894], "pct_chang": [539, 894], "pow": 539, "reinterpret": [539, 894], "repeat_bi": 539, "reshap": [539, 894], "rolling_appli": [539, 894], "rolling_median": [539, 894], "rolling_quantil": [539, 894], "rolling_skew": [539, 894], "rolling_std": [539, 894], "rolling_var": [539, 894], "search_sort": [539, 894], "set_sort": [539, 894], "shrink_dtyp": [539, 894], "sin": [539, 894], "sinh": [539, 894], "sort_bi": 539, "tan": [539, 894], "tanh": [539, 894], "to_phys": [539, 894], "top_k": [539, 894], "unique_count": [539, 894], "expos": 548, "registr": 548, "miscellan": 548, "unset": 548, "arrowerror": 548, "invalidoperationerror": 548, "nodataerror": 548, "notfounderror": 548, "schemaerror": 548, "shapeerror": 548, "build_info": 548, "show_vers": 548, "sqlcontext": [548, 900], "hit": [551, 621], "node": [551, 572, 579, 587, 590, 621], "huge": [554, 621], "saver": [554, 621], "purpos": [562, 621], "help": [562, 621], "influenc": [562, 579, 621], "read_json": [567, 613, 621], "lazygroupbi": [568, 569, 570, 621], "typeerror": [568, 621], "subscript": [568, 621], "validate_output_schema": [579, 621], "past": [579, 621], "paramount": [579, 621], "hard": [579, 621], "bug": [579, 615, 621], "invari": [579, 621], "upheld": [579, 621], "prune": [579, 621], "show_plot": [587, 621], "truncate_nod": [587, 621], "figsiz": [587, 596, 621], "gantt": [587, 621], "chart": [587, 621], "matplotlib": [587, 596, 621], "plot": [587, 596, 621], "groupby_partit": [587, 621], "470": [587, 621], "475": [587, 621], "1964": [587, 621], "from_json": [589, 621], "swap": [590, 621], "output_path": [596, 621], "raw_output": [596, 621], "figur": [596, 621], "persist": [597, 598, 621], "ram": [597, 598, 621], "slightli": [597, 598, 621], "my_larger_than_ram_fil": [597, 598, 621], "tmp": [597, 598, 621], "data_pagesize_limit": [598, 621], "290994": [601, 621], "118034": [601, 621], "433013": [601, 621], "1875": [607, 621], "extern": [611, 621], "df_a": [611, 621], "df_other": [611, 621], "afoo": [611, 621], "cfoo": [611, 621], "train_df": [611, 621], "feature_0": [611, 621], "feature_1": [611, 621], "test_df": [611, 621], "_train": [611, 621], "feature_0_train": [611, 621], "dataframescan": [613, 621], "output_schema": [613, 621], "unique_nam": 614, "instanti": 621, "profil": 621, "sink_ipc": 621, "sink_parquet": 621, "with_context": 621, "sr": [626, 894], "new_aliased_sr": [626, 894], "append_chunk": [629, 894], "super": [629, 894], "141593": [631, 894], "292432": [632, 894], "549306": [636, 894], "listnamespac": [643, 741, 894], "catnamespac": 675, "56789": [677, 747, 810, 894], "901234": [677, 747, 810, 894], "pi": [684, 824, 869, 894], "1232e": [684, 894], "quick": [691, 894], "mix": [691, 894], "series_num": [691, 894], "581139": [691, 894], "series_str": [691, 894], "datetimenamespac": 696, "1583020800": 698, "1585699200": 698, "1588291200": 698, "nyc": 698, "edt": 698, "1583038800": 698, "1585717200": 698, "1588309200": 698, "500m": [709, 711, 717, 723], "500000": 709, "2m": 714, "500000000": 717, "date_minus_1y_2mon": 719, "165": [722, 727], "series_equ": [722, 727, 894], "timestamp_u": 726, "978307200000000000": 726, "978393600000000000": 726, "978480000000000000": 726, "happen": 732, "utc": 732, "brussels_t": 732, "brussel": 732, "cet": 732, "cest": 732, "005": [735, 894], "06293300616044681": [735, 894], "65": [735, 894], "8568409950394724": [735, 894], "4000000": [736, 894], "814697265625": [736, 894], "stringnamespac": [741, 831, 894], "bitmask": [749, 894], "swiftli": [749, 894], "10734580197236529959": [750, 894], "3022416320763508302": [750, 894], "13756996518000038261": [750, 894], "datelik": [755, 894], "166667": [789, 894], "142857": [789, 894], "512": [789, 894], "peak": [790, 791, 894], "nanstd": [800, 894], "858612": [800, 894], "200": [801, 802, 804, 894], "400": [801, 802, 804, 894], "150": [802, 894], "250": [802, 894], "350": [802, 894], "450": [802, 894], "381802": [806, 894], "dev": [807, 894], "57": [810, 894], "frequent": [814, 815, 894], "mutat": [815, 894], "2246e": [824, 869, 894], "divisor": [830, 883, 894], "6331e16": [869, 894], "lib": [872, 894], "int64arrai": [872, 894], "a_2": [873, 894], "a_3": [873, 894], "zero_copy_onli": [876, 894], "writabl": [876, 894], "view": [876, 894], "presenc": [876, 894], "immut": [876, 894], "made": [876, 894], "ignore_nul": [884, 894], "seriesview": [884, 894], "arraylik": 894, "nan_to_nul": 894, "dtype_if_empti": 894, "position": 894, "posit": 894, "scenario": 894, "through": 894, "arg_tru": 894, "chunk_length": 894, "get_chunk": 894, "has_valid": 894, "is_boolean": 894, "is_datelik": 894, "is_float": 894, "is_numer": 894, "is_sort": 894, "is_utf8": 894, "new_from_index": 894, "peak_max": 894, "peak_min": 894, "set_at_idx": 894, "readthedoc": 901}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [29, 0, 1, "", "DataType"], [30, 0, 1, "", "Date"], [31, 0, 1, "", "Datetime"], [32, 0, 1, "", "Duration"], [33, 0, 1, "", "Float32"], [34, 0, 1, "", "Float64"], [35, 0, 1, "", "Int16"], [36, 0, 1, "", "Int32"], [37, 0, 1, "", "Int64"], [38, 0, 1, "", "Int8"], [39, 0, 1, "", "List"], [40, 0, 1, "", "Null"], [41, 0, 1, "", "Object"], [900, 0, 1, "", "SQLContext"], [45, 0, 1, "", "StringCache"], [46, 0, 1, "", "Struct"], [47, 0, 1, "", "Time"], [48, 0, 1, "", "UInt16"], [49, 0, 1, "", "UInt32"], [50, 0, 1, "", "UInt64"], [51, 0, 1, "", "UInt8"], [52, 0, 1, "", "Unknown"], [53, 0, 1, "", "Utf8"], [54, 4, 1, "", "align_frames"], [486, 4, 1, "", "all"], [487, 4, 1, "", "any"], [488, 4, 1, "", "apply"], [489, 4, 1, "", "arange"], [59, 4, 1, "", "arg_where"], [490, 4, 1, "", "argsort_by"], [491, 4, 1, "", "avg"], [60, 4, 1, "", "build_info"], [492, 4, 1, "", "coalesce"], [493, 4, 1, "", "col"], [61, 4, 1, "", "collect_all"], [62, 4, 1, "", "concat"], [494, 4, 1, "", "concat_list"], [495, 4, 1, "", "concat_str"], [496, 4, 1, "", "count"], [497, 4, 1, "", "cov"], [498, 4, 1, "", "cumfold"], [499, 4, 1, "", "cumreduce"], [500, 4, 1, "", "cumsum"], [63, 4, 1, "", "cut"], [501, 4, 1, "", "date"], [64, 4, 1, "", "date_range"], [502, 4, 1, "", "datetime"], [503, 4, 1, "", "duration"], [504, 4, 1, "", "element"], [505, 4, 1, "", "exclude"], [506, 4, 1, "", "first"], [507, 4, 1, "", "fold"], [508, 4, 1, "", "format"], [77, 4, 1, "", "from_arrow"], [78, 4, 1, "", "from_dict"], [79, 4, 1, "", "from_dicts"], [509, 4, 1, "", "from_epoch"], [80, 4, 1, "", "from_numpy"], [81, 4, 1, "", "from_pandas"], [82, 4, 1, "", "from_records"], [83, 4, 1, "", "get_dummies"], [84, 4, 1, "", "get_idx_type"], [510, 4, 1, "", "groups"], [511, 4, 1, "", "head"], [512, 4, 1, "", "list"], [513, 4, 1, "", "lit"], [514, 4, 1, "", "map"], [515, 4, 1, "", "max"], [516, 4, 1, "", "mean"], [517, 4, 1, "", "median"], [518, 4, 1, "", "min"], [519, 4, 1, "", "n_unique"], [86, 4, 1, "", "ones"], [520, 4, 1, "", "pearson_corr"], [521, 4, 1, "", "quantile"], [87, 4, 1, "", "read_avro"], [88, 4, 1, "", "read_csv"], [89, 4, 1, "", "read_csv_batched"], [90, 4, 1, "", "read_delta"], [91, 4, 1, "", "read_excel"], [92, 4, 1, "", "read_ipc"], [93, 4, 1, "", "read_ipc_schema"], [94, 4, 1, "", "read_json"], [95, 4, 1, "", "read_ndjson"], [96, 4, 1, "", "read_parquet"], [97, 4, 1, "", "read_parquet_schema"], [98, 4, 1, "", "read_sql"], [522, 4, 1, "", "reduce"], [523, 4, 1, "", "repeat"], [99, 4, 1, "", "scan_csv"], [100, 4, 1, "", "scan_delta"], [101, 4, 1, "", "scan_ds"], [102, 4, 1, "", "scan_ipc"], [103, 4, 1, "", "scan_ndjson"], [104, 4, 1, "", "scan_parquet"], [524, 4, 1, "", "select"], [105, 4, 1, "", "show_versions"], [525, 4, 1, "", "spearman_rank_corr"], [526, 4, 1, "", "std"], [527, 4, 1, "", "struct"], [528, 4, 1, "", "sum"], [529, 4, 1, "", "tail"], [112, 4, 1, "", "threadpool_size"], [113, 4, 1, "", "toggle_string_cache"], [530, 4, 1, "", "var"], [531, 4, 1, "", "when"], [114, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_str_lengths"], [10, 1, 1, "", "set_tbl_cell_alignment"], [11, 1, 1, "", "set_tbl_cols"], [12, 1, 1, "", "set_tbl_column_data_type_inline"], [13, 1, 1, "", "set_tbl_dataframe_shape_below"], [14, 1, 1, "", "set_tbl_formatting"], [15, 1, 1, "", "set_tbl_hide_column_data_types"], [16, 1, 1, "", "set_tbl_hide_column_names"], [17, 1, 1, "", "set_tbl_hide_dataframe_shape"], [18, 1, 1, "", "set_tbl_hide_dtype_separator"], [19, 1, 1, "", "set_tbl_rows"], [20, 1, 1, "", "set_tbl_width_chars"], [21, 1, 1, "", "set_verbose"], [22, 1, 1, "", "state"]], "polars.DataFrame": [[117, 1, 1, "", "apply"], [118, 1, 1, "", "cleared"], [119, 1, 1, "", "clone"], [120, 2, 1, "", "columns"], [121, 1, 1, "", "describe"], [122, 1, 1, "", "drop"], [123, 1, 1, "", "drop_in_place"], [124, 1, 1, "", "drop_nulls"], [125, 2, 1, "", "dtypes"], [126, 1, 1, "", "estimated_size"], [127, 1, 1, "", "explode"], [128, 1, 1, "", "extend"], [129, 1, 1, "", "fill_nan"], [130, 1, 1, "", "fill_null"], [131, 1, 1, "", "filter"], [132, 1, 1, "", "find_idx_by_name"], [133, 1, 1, "", "fold"], [134, 1, 1, "", "frame_equal"], [135, 1, 1, "", "get_column"], [136, 1, 1, "", "get_columns"], [137, 1, 1, "", "glimpse"], [138, 1, 1, "", "groupby"], [139, 1, 1, "", "groupby_dynamic"], [140, 1, 1, "", "groupby_rolling"], [141, 1, 1, "", "hash_rows"], [142, 1, 1, "", "head"], [143, 2, 1, "", "height"], [144, 1, 1, "", "hstack"], [145, 1, 1, "", "insert_at_idx"], [146, 1, 1, "", "interpolate"], [147, 1, 1, "", "is_duplicated"], [148, 1, 1, "", "is_empty"], [149, 1, 1, "", "is_unique"], [150, 1, 1, "", "item"], [151, 1, 1, "", "iterrows"], [152, 1, 1, "", "join"], [153, 1, 1, "", "join_asof"], [154, 1, 1, "", "lazy"], [155, 1, 1, "", "limit"], [156, 1, 1, "", "max"], [157, 1, 1, "", "mean"], [158, 1, 1, "", "median"], [159, 1, 1, "", "melt"], [160, 1, 1, "", "merge_sorted"], [161, 1, 1, "", "min"], [162, 1, 1, "", "n_chunks"], [163, 1, 1, "", "n_unique"], [164, 1, 1, "", "null_count"], [165, 1, 1, "", "partition_by"], [166, 1, 1, "", "pearson_corr"], [167, 1, 1, "", "pipe"], [168, 1, 1, "", "pivot"], [169, 1, 1, "", "product"], [170, 1, 1, "", "quantile"], [171, 1, 1, "", "rechunk"], [172, 1, 1, "", "rename"], [173, 1, 1, "", "replace"], [174, 1, 1, "", "replace_at_idx"], [175, 1, 1, "", "reverse"], [176, 1, 1, "", "row"], [177, 1, 1, "", "rows"], [178, 1, 1, "", "sample"], [179, 2, 1, "", "schema"], [180, 1, 1, "", "select"], [181, 2, 1, "", "shape"], [182, 1, 1, "", "shift"], [183, 1, 1, "", "shift_and_fill"], [184, 1, 1, "", "shrink_to_fit"], [185, 1, 1, "", "slice"], [186, 1, 1, "", "sort"], [187, 1, 1, "", "std"], [188, 1, 1, "", "sum"], [189, 1, 1, "", "tail"], [190, 1, 1, "", "take_every"], [191, 1, 1, "", "to_arrow"], [192, 1, 1, "", "to_dict"], [193, 1, 1, "", "to_dicts"], [194, 1, 1, "", "to_dummies"], [195, 1, 1, "", "to_numpy"], [196, 1, 1, "", "to_pandas"], [197, 1, 1, "", "to_series"], [198, 1, 1, "", "to_struct"], [199, 1, 1, "", "transpose"], [200, 1, 1, "", "unique"], [201, 1, 1, "", "unnest"], [202, 1, 1, "", "unstack"], [203, 1, 1, "", "upsample"], [204, 1, 1, "", "var"], [205, 1, 1, "", "vstack"], [206, 2, 1, "", "width"], [207, 1, 1, "", "with_column"], [208, 1, 1, "", "with_columns"], [209, 1, 1, "", "with_row_count"], [23, 1, 1, "", "write_avro"], [24, 1, 1, "", "write_csv"], [25, 1, 1, "", "write_ipc"], [26, 1, 1, "", "write_json"], [27, 1, 1, "", "write_ndjson"], [28, 1, 1, "", "write_parquet"]], "polars.DataType": [[29, 1, 1, "", "__init__"]], "polars.Date": [[30, 1, 1, "", "__init__"]], "polars.Datetime": [[31, 1, 1, "", "__init__"]], "polars.Duration": [[32, 1, 1, "", "__init__"]], "polars.Expr": [[246, 1, 1, "", "abs"], [247, 1, 1, "", "agg_groups"], [248, 1, 1, "", "alias"], [249, 1, 1, "", "all"], [250, 1, 1, "", "any"], [251, 1, 1, "", "append"], [252, 1, 1, "", "apply"], [253, 1, 1, "", "arccos"], [254, 1, 1, "", "arccosh"], [255, 1, 1, "", "arcsin"], [256, 1, 1, "", "arcsinh"], [257, 1, 1, "", "arctan"], [258, 1, 1, "", "arctanh"], [259, 1, 1, "", "arg_max"], [260, 1, 1, "", "arg_min"], [261, 1, 1, "", "arg_sort"], [262, 1, 1, "", "arg_unique"], [263, 1, 1, "", "argsort"], [289, 1, 1, "", "backward_fill"], [295, 1, 1, "", "cast"], [297, 1, 1, "", "ceil"], [298, 1, 1, "", "clip"], [299, 1, 1, "", "clip_max"], [300, 1, 1, "", "clip_min"], [301, 1, 1, "", "cos"], [302, 1, 1, "", "cosh"], [303, 1, 1, "", "count"], [304, 1, 1, "", "cumcount"], [305, 1, 1, "", "cummax"], [306, 1, 1, "", "cummin"], [307, 1, 1, "", "cumprod"], [308, 1, 1, "", "cumsum"], [309, 1, 1, "", "cumulative_eval"], [310, 1, 1, "", "diff"], [311, 1, 1, "", "dot"], [312, 1, 1, "", "drop_nans"], [313, 1, 1, "", "drop_nulls"], [347, 1, 1, "", "entropy"], [348, 1, 1, "", "ewm_mean"], [349, 1, 1, "", "ewm_std"], [350, 1, 1, "", "ewm_var"], [351, 1, 1, "", "exclude"], [352, 1, 1, "", "exp"], [353, 1, 1, "", "explode"], [354, 1, 1, "", "extend_constant"], [355, 1, 1, "", "fill_nan"], [356, 1, 1, "", "fill_null"], [357, 1, 1, "", "filter"], [358, 1, 1, "", "first"], [359, 1, 1, "", "flatten"], [360, 1, 1, "", "floor"], [361, 1, 1, "", "forward_fill"], [362, 1, 1, "", "hash"], [363, 1, 1, "", "head"], [364, 1, 1, "", "inspect"], [365, 1, 1, "", "interpolate"], [366, 1, 1, "", "is_between"], [367, 1, 1, "", "is_duplicated"], [368, 1, 1, "", "is_finite"], [369, 1, 1, "", "is_first"], [370, 1, 1, "", "is_in"], [371, 1, 1, "", "is_infinite"], [372, 1, 1, "", "is_nan"], [373, 1, 1, "", "is_not"], [374, 1, 1, "", "is_not_nan"], [375, 1, 1, "", "is_not_null"], [376, 1, 1, "", "is_null"], [377, 1, 1, "", "is_unique"], [378, 1, 1, "", "keep_name"], [379, 1, 1, "", "kurtosis"], [380, 1, 1, "", "last"], [381, 1, 1, "", "len"], [382, 1, 1, "", "limit"], [383, 1, 1, "", "list"], [384, 1, 1, "", "log"], [385, 1, 1, "", "log10"], [386, 1, 1, "", "lower_bound"], [387, 1, 1, "", "map"], [388, 1, 1, "", "map_alias"], [389, 1, 1, "", "max"], [390, 1, 1, "", "mean"], [391, 1, 1, "", "median"], [396, 1, 1, "", "min"], [397, 1, 1, "", "mode"], [398, 1, 1, "", "n_unique"], [399, 1, 1, "", "nan_max"], [400, 1, 1, "", "nan_min"], [401, 1, 1, "", "null_count"], [402, 1, 1, "", "over"], [403, 1, 1, "", "pct_change"], [404, 1, 1, "", "pow"], [405, 1, 1, "", "prefix"], [406, 1, 1, "", "product"], [407, 1, 1, "", "quantile"], [408, 1, 1, "", "rank"], [409, 1, 1, "", "rechunk"], [410, 1, 1, "", "reinterpret"], [411, 1, 1, "", "repeat_by"], [412, 1, 1, "", "reshape"], [413, 1, 1, "", "reverse"], [414, 1, 1, "", "rolling_apply"], [415, 1, 1, "", "rolling_max"], [416, 1, 1, "", "rolling_mean"], [417, 1, 1, "", "rolling_median"], [418, 1, 1, "", "rolling_min"], [419, 1, 1, "", "rolling_quantile"], [420, 1, 1, "", "rolling_skew"], [421, 1, 1, "", "rolling_std"], [422, 1, 1, "", "rolling_sum"], [423, 1, 1, "", "rolling_var"], [424, 1, 1, "", "round"], [425, 1, 1, "", "sample"], [426, 1, 1, "", "search_sorted"], [427, 1, 1, "", "set_sorted"], [428, 1, 1, "", "shift"], [429, 1, 1, "", "shift_and_fill"], [430, 1, 1, "", "shrink_dtype"], [431, 1, 1, "", "shuffle"], [432, 1, 1, "", "sign"], [433, 1, 1, "", "sin"], [434, 1, 1, "", "sinh"], [435, 1, 1, "", "skew"], [436, 1, 1, "", "slice"], [437, 1, 1, "", "sort"], [438, 1, 1, "", "sort_by"], [439, 1, 1, "", "sqrt"], [440, 1, 1, "", "std"], [471, 1, 1, "", "suffix"], [472, 1, 1, "", "sum"], [473, 1, 1, "", "tail"], [474, 1, 1, "", "take"], [475, 1, 1, "", "take_every"], [476, 1, 1, "", "tan"], [477, 1, 1, "", "tanh"], [478, 1, 1, "", "to_physical"], [479, 1, 1, "", "top_k"], [480, 1, 1, "", "unique"], [481, 1, 1, "", "unique_counts"], [482, 1, 1, "", "upper_bound"], [483, 1, 1, "", "value_counts"], [484, 1, 1, "", "var"], [485, 1, 1, "", "where"]], "polars.Expr.arr": [[264, 1, 1, "", "arg_max"], [265, 1, 1, "", "arg_min"], [266, 1, 1, "", "concat"], [267, 1, 1, "", "contains"], [268, 1, 1, "", "diff"], [269, 1, 1, "", "eval"], [270, 1, 1, "", "explode"], [271, 1, 1, "", "first"], [272, 1, 1, "", "get"], [273, 1, 1, "", "head"], [274, 1, 1, "", "join"], [275, 1, 1, "", "last"], [276, 1, 1, "", "lengths"], [277, 1, 1, "", "max"], [278, 1, 1, "", "mean"], [279, 1, 1, "", "min"], [280, 1, 1, "", "reverse"], [281, 1, 1, "", "shift"], [282, 1, 1, "", "slice"], [283, 1, 1, "", "sort"], [284, 1, 1, "", "sum"], [285, 1, 1, "", "tail"], [286, 1, 1, "", "take"], [287, 1, 1, "", "to_struct"], [288, 1, 1, "", "unique"]], "polars.Expr.bin": [[290, 1, 1, "", "contains"], [291, 1, 1, "", "decode"], [292, 1, 1, "", "encode"], [293, 1, 1, "", "ends_with"], [294, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[296, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[314, 1, 1, "", "cast_time_unit"], [315, 1, 1, "", "cast_time_zone"], [316, 1, 1, "", "combine"], [317, 1, 1, "", "day"], [318, 1, 1, "", "days"], [319, 1, 1, "", "epoch"], [320, 1, 1, "", "hour"], [321, 1, 1, "", "hours"], [322, 1, 1, "", "iso_year"], [323, 1, 1, "", "microsecond"], [324, 1, 1, "", "microseconds"], [325, 1, 1, "", "millisecond"], [326, 1, 1, "", "milliseconds"], [327, 1, 1, "", "minute"], [328, 1, 1, "", "minutes"], [329, 1, 1, "", "month"], [330, 1, 1, "", "nanosecond"], [331, 1, 1, "", "nanoseconds"], [332, 1, 1, "", "offset_by"], [333, 1, 1, "", "ordinal_day"], [334, 1, 1, "", "quarter"], [335, 1, 1, "", "round"], [336, 1, 1, "", "second"], [337, 1, 1, "", "seconds"], [338, 1, 1, "", "strftime"], [339, 1, 1, "", "timestamp"], [340, 1, 1, "", "truncate"], [341, 1, 1, "", "tz_localize"], [342, 1, 1, "", "week"], [343, 1, 1, "", "weekday"], [344, 1, 1, "", "with_time_unit"], [345, 1, 1, "", "with_time_zone"], [346, 1, 1, "", "year"]], "polars.Expr.meta": [[392, 1, 1, "", "output_name"], [393, 1, 1, "", "pop"], [394, 1, 1, "", "root_names"], [395, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[441, 1, 1, "", "concat"], [442, 1, 1, "", "contains"], [443, 1, 1, "", "count_match"], [444, 1, 1, "", "decode"], [445, 1, 1, "", "encode"], [446, 1, 1, "", "ends_with"], [447, 1, 1, "", "explode"], [448, 1, 1, "", "extract"], [449, 1, 1, "", "extract_all"], [450, 1, 1, "", "json_path_match"], [451, 1, 1, "", "lengths"], [452, 1, 1, "", "ljust"], [453, 1, 1, "", "lstrip"], [454, 1, 1, "", "n_chars"], [455, 1, 1, "", "replace"], [456, 1, 1, "", "replace_all"], [457, 1, 1, "", "rjust"], [458, 1, 1, "", "rstrip"], [459, 1, 1, "", "slice"], [460, 1, 1, "", "split"], [461, 1, 1, "", "split_exact"], [462, 1, 1, "", "splitn"], [463, 1, 1, "", "starts_with"], [464, 1, 1, "", "strip"], [465, 1, 1, "", "strptime"], [466, 1, 1, "", "to_lowercase"], [467, 1, 1, "", "to_uppercase"], [468, 1, 1, "", "zfill"]], "polars.Expr.struct": [[469, 1, 1, "", "field"], [470, 1, 1, "", "rename_fields"]], "polars.Float32": [[33, 1, 1, "", "__init__"]], "polars.Float64": [[34, 1, 1, "", "__init__"]], "polars.Int16": [[35, 1, 1, "", "__init__"]], "polars.Int32": [[36, 1, 1, "", "__init__"]], "polars.Int64": [[37, 1, 1, "", "__init__"]], "polars.Int8": [[38, 1, 1, "", "__init__"]], "polars.LazyFrame": [[551, 1, 1, "", "cache"], [552, 1, 1, "", "cleared"], [553, 1, 1, "", "clone"], [554, 1, 1, "", "collect"], [555, 2, 1, "", "columns"], [556, 1, 1, "", "describe_optimized_plan"], [557, 1, 1, "", "describe_plan"], [558, 1, 1, "", "drop"], [559, 1, 1, "", "drop_nulls"], [560, 2, 1, "", "dtypes"], [561, 1, 1, "", "explode"], [562, 1, 1, "", "fetch"], [563, 1, 1, "", "fill_nan"], [564, 1, 1, "", "fill_null"], [565, 1, 1, "", "filter"], [566, 1, 1, "", "first"], [567, 1, 1, "", "from_json"], [568, 1, 1, "", "groupby"], [569, 1, 1, "", "groupby_dynamic"], [570, 1, 1, "", "groupby_rolling"], [571, 1, 1, "", "head"], [572, 1, 1, "", "inspect"], [573, 1, 1, "", "interpolate"], [574, 1, 1, "", "join"], [575, 1, 1, "", "join_asof"], [576, 1, 1, "", "last"], [577, 1, 1, "", "lazy"], [578, 1, 1, "", "limit"], [579, 1, 1, "", "map"], [580, 1, 1, "", "max"], [581, 1, 1, "", "mean"], [582, 1, 1, "", "median"], [583, 1, 1, "", "melt"], [584, 1, 1, "", "merge_sorted"], [585, 1, 1, "", "min"], [586, 1, 1, "", "pipe"], [587, 1, 1, "", "profile"], [588, 1, 1, "", "quantile"], [589, 1, 1, "", "read_json"], [590, 1, 1, "", "rename"], [591, 1, 1, "", "reverse"], [592, 2, 1, "", "schema"], [593, 1, 1, "", "select"], [594, 1, 1, "", "shift"], [595, 1, 1, "", "shift_and_fill"], [596, 1, 1, "", "show_graph"], [597, 1, 1, "", "sink_ipc"], [598, 1, 1, "", "sink_parquet"], [599, 1, 1, "", "slice"], [600, 1, 1, "", "sort"], [601, 1, 1, "", "std"], [602, 1, 1, "", "sum"], [603, 1, 1, "", "tail"], [604, 1, 1, "", "take_every"], [605, 1, 1, "", "unique"], [606, 1, 1, "", "unnest"], [607, 1, 1, "", "var"], [608, 2, 1, "", "width"], [609, 1, 1, "", "with_column"], [610, 1, 1, "", "with_columns"], [611, 1, 1, "", "with_context"], [612, 1, 1, "", "with_row_count"], [613, 1, 1, "", "write_json"]], "polars.List": [[39, 1, 1, "", "__init__"]], "polars.Null": [[40, 1, 1, "", "__init__"]], "polars.Object": [[41, 1, 1, "", "__init__"]], "polars.SQLContext": [[42, 1, 1, "", "execute"], [43, 1, 1, "", "query"], [44, 1, 1, "", "register"]], "polars.Series": [[625, 1, 1, "", "abs"], [626, 1, 1, "", "alias"], [627, 1, 1, "", "all"], [628, 1, 1, "", "any"], [629, 1, 1, "", "append"], [630, 1, 1, "", "apply"], [631, 1, 1, "", "arccos"], [632, 1, 1, "", "arccosh"], [633, 1, 1, "", "arcsin"], [634, 1, 1, "", "arcsinh"], [635, 1, 1, "", "arctan"], [636, 1, 1, "", "arctanh"], [637, 1, 1, "", "arg_max"], [638, 1, 1, "", "arg_min"], [639, 1, 1, "", "arg_sort"], [640, 1, 1, "", "arg_true"], [641, 1, 1, "", "arg_unique"], [642, 1, 1, "", "argsort"], [643, 3, 1, "", "arr"], [674, 1, 1, "", "cast"], [675, 3, 1, "", "cat"], [677, 1, 1, "", "ceil"], [678, 1, 1, "", "chunk_lengths"], [679, 1, 1, "", "cleared"], [680, 1, 1, "", "clip"], [681, 1, 1, "", "clip_max"], [682, 1, 1, "", "clip_min"], [683, 1, 1, "", "clone"], [684, 1, 1, "", "cos"], [685, 1, 1, "", "cosh"], [686, 1, 1, "", "cummax"], [687, 1, 1, "", "cummin"], [688, 1, 1, "", "cumprod"], [689, 1, 1, "", "cumsum"], [690, 1, 1, "", "cumulative_eval"], [691, 1, 1, "", "describe"], [692, 1, 1, "", "diff"], [693, 1, 1, "", "dot"], [694, 1, 1, "", "drop_nans"], [695, 1, 1, "", "drop_nulls"], [696, 3, 1, "", "dt"], [734, 3, 1, "", "dtype"], [735, 1, 1, "", "entropy"], [736, 1, 1, "", "estimated_size"], [737, 1, 1, "", "ewm_mean"], [738, 1, 1, "", "ewm_std"], [739, 1, 1, "", "ewm_var"], [740, 1, 1, "", "exp"], [741, 1, 1, "", "explode"], [742, 1, 1, "", "extend_constant"], [743, 1, 1, "", "fill_nan"], [744, 1, 1, "", "fill_null"], [745, 1, 1, "", "filter"], [746, 3, 1, "", "flags"], [747, 1, 1, "", "floor"], [748, 1, 1, "", "get_chunks"], [749, 1, 1, "", "has_validity"], [750, 1, 1, "", "hash"], [751, 1, 1, "", "head"], [752, 3, 1, "", "inner_dtype"], [753, 1, 1, "", "interpolate"], [754, 1, 1, "", "is_boolean"], [755, 1, 1, "", "is_datelike"], [756, 1, 1, "", "is_duplicated"], [757, 1, 1, "", "is_empty"], [758, 1, 1, "", "is_finite"], [759, 1, 1, "", "is_first"], [760, 1, 1, "", "is_float"], [761, 1, 1, "", "is_in"], [762, 1, 1, "", "is_infinite"], [763, 1, 1, "", "is_nan"], [764, 1, 1, "", "is_not_nan"], [765, 1, 1, "", "is_not_null"], [766, 1, 1, "", "is_null"], [767, 1, 1, "", "is_numeric"], [768, 1, 1, "", "is_sorted"], [769, 1, 1, "", "is_unique"], [770, 1, 1, "", "is_utf8"], [771, 1, 1, "", "item"], [772, 1, 1, "", "kurtosis"], [773, 1, 1, "", "len"], [774, 1, 1, "", "limit"], [775, 1, 1, "", "log"], [776, 1, 1, "", "log10"], [777, 1, 1, "", "max"], [778, 1, 1, "", "mean"], [779, 1, 1, "", "median"], [780, 1, 1, "", "min"], [781, 1, 1, "", "mode"], [782, 1, 1, "", "n_chunks"], [783, 1, 1, "", "n_unique"], [784, 3, 1, "", "name"], [785, 1, 1, "", "nan_max"], [786, 1, 1, "", "nan_min"], [787, 1, 1, "", "new_from_index"], [788, 1, 1, "", "null_count"], [789, 1, 1, "", "pct_change"], [790, 1, 1, "", "peak_max"], [791, 1, 1, "", "peak_min"], [792, 1, 1, "", "product"], [793, 1, 1, "", "quantile"], [794, 1, 1, "", "rank"], [795, 1, 1, "", "rechunk"], [796, 1, 1, "", "reinterpret"], [797, 1, 1, "", "rename"], [798, 1, 1, "", "reshape"], [799, 1, 1, "", "reverse"], [800, 1, 1, "", "rolling_apply"], [801, 1, 1, "", "rolling_max"], [802, 1, 1, "", "rolling_mean"], [803, 1, 1, "", "rolling_median"], [804, 1, 1, "", "rolling_min"], [805, 1, 1, "", "rolling_quantile"], [806, 1, 1, "", "rolling_skew"], [807, 1, 1, "", "rolling_std"], [808, 1, 1, "", "rolling_sum"], [809, 1, 1, "", "rolling_var"], [810, 1, 1, "", "round"], [811, 1, 1, "", "sample"], [812, 1, 1, "", "search_sorted"], [813, 1, 1, "", "series_equal"], [814, 1, 1, "", "set"], [815, 1, 1, "", "set_at_idx"], [816, 1, 1, "", "set_sorted"], [817, 3, 1, "", "shape"], [818, 1, 1, "", "shift"], [819, 1, 1, "", "shift_and_fill"], [820, 1, 1, "", "shrink_dtype"], [821, 1, 1, "", "shrink_to_fit"], [822, 1, 1, "", "shuffle"], [823, 1, 1, "", "sign"], [824, 1, 1, "", "sin"], [825, 1, 1, "", "sinh"], [826, 1, 1, "", "skew"], [827, 1, 1, "", "slice"], [828, 1, 1, "", "sort"], [829, 1, 1, "", "sqrt"], [830, 1, 1, "", "std"], [831, 3, 1, "", "str"], [865, 1, 1, "", "sum"], [866, 1, 1, "", "tail"], [867, 1, 1, "", "take"], [868, 1, 1, "", "take_every"], [869, 1, 1, "", "tan"], [870, 1, 1, "", "tanh"], [871, 3, 1, "", "time_unit"], [872, 1, 1, "", "to_arrow"], [873, 1, 1, "", "to_dummies"], [874, 1, 1, "", "to_frame"], [875, 1, 1, "", "to_list"], [876, 1, 1, "", "to_numpy"], [877, 1, 1, "", "to_pandas"], [878, 1, 1, "", "to_physical"], [879, 1, 1, "", "top_k"], [880, 1, 1, "", "unique"], [881, 1, 1, "", "unique_counts"], [882, 1, 1, "", "value_counts"], [883, 1, 1, "", "var"], [884, 1, 1, "", "view"], [885, 1, 1, "", "zip_with"]], "polars.Series.arr": [[644, 1, 1, "", "arg_max"], [645, 1, 1, "", "arg_min"], [646, 1, 1, "", "concat"], [647, 1, 1, "", "contains"], [648, 1, 1, "", "diff"], [649, 1, 1, "", "eval"], [650, 1, 1, "", "explode"], [651, 1, 1, "", "first"], [652, 1, 1, "", "get"], [653, 1, 1, "", "head"], [654, 1, 1, "", "join"], [655, 1, 1, "", "last"], [656, 1, 1, "", "lengths"], [657, 1, 1, "", "max"], [658, 1, 1, "", "mean"], [659, 1, 1, "", "min"], [660, 1, 1, "", "reverse"], [661, 1, 1, "", "shift"], [662, 1, 1, "", "slice"], [663, 1, 1, "", "sort"], [664, 1, 1, "", "sum"], [665, 1, 1, "", "tail"], [666, 1, 1, "", "take"], [667, 1, 1, "", "to_struct"], [668, 1, 1, "", "unique"]], "polars.Series.bin": [[669, 1, 1, "", "contains"], [670, 1, 1, "", "decode"], [671, 1, 1, "", "encode"], [672, 1, 1, "", "ends_with"], [673, 1, 1, "", "starts_with"]], "polars.Series.cat": [[676, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[697, 1, 1, "", "cast_time_unit"], [698, 1, 1, "", "cast_time_zone"], [699, 1, 1, "", "combine"], [700, 1, 1, "", "day"], [701, 1, 1, "", "days"], [702, 1, 1, "", "epoch"], [703, 1, 1, "", "hour"], [704, 1, 1, "", "hours"], [705, 1, 1, "", "iso_year"], [706, 1, 1, "", "max"], [707, 1, 1, "", "mean"], [708, 1, 1, "", "median"], [709, 1, 1, "", "microsecond"], [710, 1, 1, "", "microseconds"], [711, 1, 1, "", "millisecond"], [712, 1, 1, "", "milliseconds"], [713, 1, 1, "", "min"], [714, 1, 1, "", "minute"], [715, 1, 1, "", "minutes"], [716, 1, 1, "", "month"], [717, 1, 1, "", "nanosecond"], [718, 1, 1, "", "nanoseconds"], [719, 1, 1, "", "offset_by"], [720, 1, 1, "", "ordinal_day"], [721, 1, 1, "", "quarter"], [722, 1, 1, "", "round"], [723, 1, 1, "", "second"], [724, 1, 1, "", "seconds"], [725, 1, 1, "", "strftime"], [726, 1, 1, "", "timestamp"], [727, 1, 1, "", "truncate"], [728, 1, 1, "", "tz_localize"], [729, 1, 1, "", "week"], [730, 1, 1, "", "weekday"], [731, 1, 1, "", "with_time_unit"], [732, 1, 1, "", "with_time_zone"], [733, 1, 1, "", "year"]], "polars.Series.str": [[832, 1, 1, "", "concat"], [833, 1, 1, "", "contains"], [834, 1, 1, "", "count_match"], [835, 1, 1, "", "decode"], [836, 1, 1, "", "encode"], [837, 1, 1, "", "ends_with"], [838, 1, 1, "", "explode"], [839, 1, 1, "", "extract"], [840, 1, 1, "", "extract_all"], [841, 1, 1, "", "json_path_match"], [842, 1, 1, "", "lengths"], [843, 1, 1, "", "ljust"], [844, 1, 1, "", "lstrip"], [845, 1, 1, "", "n_chars"], [846, 1, 1, "", "replace"], [847, 1, 1, "", "replace_all"], [848, 1, 1, "", "rjust"], [849, 1, 1, "", "rstrip"], [850, 1, 1, "", "slice"], [851, 1, 1, "", "split"], [852, 1, 1, "", "split_exact"], [853, 1, 1, "", "splitn"], [854, 1, 1, "", "starts_with"], [855, 1, 1, "", "strip"], [856, 1, 1, "", "strptime"], [857, 1, 1, "", "to_lowercase"], [858, 1, 1, "", "to_uppercase"], [859, 1, 1, "", "zfill"]], "polars.Series.struct": [[860, 1, 1, "", "field"], [861, 3, 1, "", "fields"], [862, 1, 1, "", "rename_fields"], [863, 1, 1, "", "to_frame"], [864, 1, 1, "", "unnest"]], "polars.StringCache": [[45, 1, 1, "", "__init__"]], "polars.Struct": [[46, 1, 1, "", "__init__"]], "polars.Time": [[47, 1, 1, "", "__init__"]], "polars.UInt16": [[48, 1, 1, "", "__init__"]], "polars.UInt32": [[49, 1, 1, "", "__init__"]], "polars.UInt64": [[50, 1, 1, "", "__init__"]], "polars.UInt8": [[51, 1, 1, "", "__init__"]], "polars.Unknown": [[52, 1, 1, "", "__init__"]], "polars.Utf8": [[53, 1, 1, "", "__init__"]], "polars.api": [[55, 4, 1, "", "register_dataframe_namespace"], [56, 4, 1, "", "register_expr_namespace"], [57, 4, 1, "", "register_lazyframe_namespace"], [58, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[65, 5, 1, "", "ArrowError"], [66, 5, 1, "", "ComputeError"], [67, 5, 1, "", "DuplicateError"], [68, 5, 1, "", "InvalidOperationError"], [69, 5, 1, "", "NoDataError"], [70, 5, 1, "", "NoRowsReturned"], [71, 5, 1, "", "NotFoundError"], [72, 5, 1, "", "PanicException"], [73, 5, 1, "", "RowsException"], [74, 5, 1, "", "SchemaError"], [75, 5, 1, "", "ShapeError"], [76, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[85, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[210, 1, 1, "", "agg"], [211, 1, 1, "", "agg_list"], [212, 1, 1, "", "apply"], [213, 1, 1, "", "count"], [214, 1, 1, "", "first"], [215, 1, 1, "", "head"], [216, 1, 1, "", "last"], [217, 1, 1, "", "max"], [218, 1, 1, "", "mean"], [219, 1, 1, "", "median"], [220, 1, 1, "", "min"], [221, 1, 1, "", "n_unique"], [222, 1, 1, "", "pivot"], [223, 1, 1, "", "quantile"], [224, 1, 1, "", "sum"], [225, 1, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[226, 1, 1, "", "count"], [227, 1, 1, "", "first"], [228, 1, 1, "", "last"], [229, 1, 1, "", "max"], [230, 1, 1, "", "mean"], [231, 1, 1, "", "median"], [232, 1, 1, "", "min"], [233, 1, 1, "", "sum"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[614, 1, 1, "", "agg"], [615, 1, 1, "", "apply"], [616, 1, 1, "", "head"], [617, 1, 1, "", "tail"]], "polars.testing": [[106, 4, 1, "", "assert_frame_equal"], [107, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[108, 0, 1, "", "column"], [109, 4, 1, "", "columns"], [110, 4, 1, "", "dataframes"], [111, 4, 1, "", "series"]], "polars.testing.parametric.column": [[108, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 128], "api": [1, 55, 56, 57, 58, 548], "provid": 1, "new": 1, "function": [1, 243, 538, 547], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885], "binari": [2, 533, 888], "boolean": [3, 534, 889], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 115], "load": [5, 115], "restore_default": 6, "save": [7, 115], "set_ascii_t": 8, "set_fmt_str_length": 9, "set_tbl_cell_align": 10, "set_tbl_col": 11, "set_tbl_column_data_type_inlin": 12, "set_tbl_dataframe_shape_below": 13, "set_tbl_format": 14, "set_tbl_hide_column_data_typ": 15, "set_tbl_hide_column_nam": 16, "set_tbl_hide_dataframe_shap": 17, "set_tbl_hide_dtype_separ": 18, "set_tbl_row": 19, "set_tbl_width_char": 20, "set_verbos": 21, "state": [22, 115], "datafram": [23, 24, 25, 26, 27, 28, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239], "write_avro": 23, "write_csv": 24, "write_ipc": 25, "write_json": [26, 613], "write_ndjson": 27, "write_parquet": 28, "datatyp": 29, "date": [30, 243, 501], "datetim": [31, 502], "durat": [32, 503], "float32": 33, "float64": 34, "int16": 35, "int32": 36, "int64": 37, "int8": 38, "list": [39, 383, 512], "null": 40, "object": 41, "sqlcontext": [42, 43, 44], "execut": 42, "queri": 43, "regist": 44, "stringcach": [45, 547], "struct": [46, 469, 470, 527, 544, 860, 861, 862, 863, 864, 898], "time": [47, 243], "uint16": 48, "uint32": 49, "uint64": 50, "uint8": 51, "unknown": 52, "utf8": 53, "align_fram": 54, "register_dataframe_namespac": 55, "register_expr_namespac": 56, "register_lazyframe_namespac": 57, "register_series_namespac": 58, "arg_wher": 59, "build_info": 60, "collect_al": 61, "concat": [62, 266, 441, 646, 832], "cut": 63, "date_rang": 64, "except": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 244], "arrowerror": 65, "computeerror": 66, "duplicateerror": 67, "invalidoperationerror": 68, "nodataerror": 69, "norowsreturn": 70, "notfounderror": 71, "panicexcept": 72, "rowsexcept": 73, "schemaerror": 74, "shapeerror": 75, "toomanyrowsreturn": 76, "from_arrow": 77, "from_dict": [78, 79], "from_numpi": 80, "from_panda": 81, "from_record": 82, "get_dummi": 83, "get_idx_typ": 84, "intern": [85, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 614, 615, 616, 617], "batch": 85, "batchedcsvread": [85, 549], "next_batch": 85, "ones": 86, "read_avro": 87, "read_csv": 88, "read_csv_batch": 89, "read_delta": 90, "read_excel": 91, "read_ipc": 92, "read_ipc_schema": 93, "read_json": [94, 589], "read_ndjson": 95, "read_parquet": 96, "read_parquet_schema": 97, "read_sql": 98, "scan_csv": 99, "scan_delta": 100, "scan_d": 101, "scan_ipc": 102, "scan_ndjson": 103, "scan_parquet": 104, "show_vers": 105, "test": [106, 107, 108, 109, 110, 111, 901], "assert_frame_equ": 106, "assert_series_equ": 107, "parametr": [108, 109, 110, 111], "column": [108, 109, 120, 536, 555], "seri": [111, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 894], "threadpool_s": 112, "toggle_string_cach": 113, "zero": 114, "option": 115, "set": [115, 814], "unset": 115, "current": 115, "aggreg": [116, 245, 550, 624], "appli": [117, 212, 252, 488, 615, 630], "clear": [118, 552, 679], "clone": [119, 553, 683], "describ": [121, 691], "drop": [122, 558], "drop_in_plac": 123, "drop_nul": [124, 313, 559, 695], "dtype": [125, 560, 734], "estimated_s": [126, 736], "explod": [127, 270, 353, 447, 561, 650, 741, 838], "fill_nan": [129, 355, 563, 743], "fill_nul": [130, 356, 564, 744], "filter": [131, 357, 565, 745], "find_idx_by_nam": 132, "fold": [133, 507], "frame_equ": 134, "get_column": [135, 136], "glimps": 137, "groupbi": [138, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 238, 568, 614, 615, 616, 617, 620], "groupby_dynam": [139, 569], "groupby_rol": [140, 570], "hash_row": 141, "head": [142, 215, 273, 363, 511, 571, 616, 653, 751], "height": 143, "hstack": 144, "insert_at_idx": 145, "interpol": [146, 365, 573, 753], "is_dupl": [147, 367, 756], "is_empti": [148, 757], "is_uniqu": [149, 377, 769], "item": [150, 771], "iterrow": 151, "join": [152, 274, 574, 654], "join_asof": [153, 575], "lazi": [154, 547, 577], "limit": [155, 382, 578, 774], "max": [156, 217, 229, 277, 389, 515, 580, 657, 706, 777], "mean": [157, 218, 230, 278, 390, 516, 581, 658, 707, 778], "median": [158, 219, 231, 391, 517, 582, 708, 779], "melt": [159, 583], "merge_sort": [160, 584], "min": [161, 220, 232, 279, 396, 518, 585, 659, 713, 780], "n_chunk": [162, 782], "n_uniqu": [163, 221, 398, 519, 783], "null_count": [164, 401, 788], "partition_bi": 165, "pearson_corr": [166, 520], "pipe": [167, 586], "pivot": [168, 222, 226, 227, 228, 229, 230, 231, 232, 233, 242], "product": [169, 406, 792], "quantil": [170, 223, 407, 521, 588, 793], "rechunk": [171, 409, 795], "renam": [172, 590, 797], "replac": [173, 455, 846], "replace_at_idx": 174, "revers": [175, 280, 413, 591, 660, 799], "row": [176, 177], "sampl": [178, 425, 811], "schema": [179, 592], "select": [180, 241, 524, 542, 593, 623, 896], "shape": [181, 817], "shift": [182, 281, 428, 594, 661, 818], "shift_and_fil": [183, 429, 595, 819], "shrink_to_fit": [184, 821], "slice": [185, 282, 436, 459, 599, 662, 827, 850], "sort": [186, 283, 437, 600, 663, 828], "std": [187, 440, 526, 601, 830], "sum": [188, 224, 233, 284, 472, 528, 602, 664, 865], "tail": [189, 225, 285, 473, 529, 603, 617, 665, 866], "take_everi": [190, 475, 604, 868], "to_arrow": [191, 872], "to_dict": [192, 193], "to_dummi": [194, 873], "to_numpi": [195, 876], "to_panda": [196, 877], "to_seri": 197, "to_struct": [198, 287, 667], "transpos": 199, "uniqu": [200, 288, 480, 605, 668, 880], "unnest": [201, 606, 864], "unstack": 202, "upsampl": 203, "var": [204, 484, 530, 607, 883], "vstack": 205, "width": [206, 608], "with_column": [207, 208, 609, 610], "with_row_count": [209, 612], "agg": [210, 614], "agg_list": 211, "count": [213, 226, 303, 496], "first": [214, 227, 271, 358, 506, 566, 651], "last": [216, 228, 275, 380, 576, 655], "pivotop": [226, 227, 228, 229, 230, 231, 232, 233], "attribut": [234, 618, 887], "comput": [235, 537, 891], "descript": [236, 619, 892], "export": [237, 893], "miscellan": [240, 541, 547, 622, 895], "manipul": [241, 542, 623, 896], "data": 243, "type": 243, "numer": 243, "nest": 243, "other": 243, "expr": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "ab": [246, 625], "agg_group": 247, "alia": [248, 626], "all": [249, 486, 627], "ani": [250, 487, 628], "append": [251, 629], "arcco": [253, 631], "arccosh": [254, 632], "arcsin": [255, 633], "arcsinh": [256, 634], "arctan": [257, 635], "arctanh": [258, 636], "arg_max": [259, 264, 637, 644], "arg_min": [260, 265, 638, 645], "arg_sort": [261, 639], "arg_uniqu": [262, 641], "argsort": [263, 642], "arr": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668], "contain": [267, 290, 442, 647, 669, 833], "diff": [268, 310, 648, 692], "eval": [269, 649], "get": [272, 652], "length": [276, 451, 656, 842], "take": [286, 474, 666, 867], "backward_fil": 289, "bin": [290, 291, 292, 293, 294, 669, 670, 671, 672, 673], "decod": [291, 444, 670, 835], "encod": [292, 445, 671, 836], "ends_with": [293, 446, 672, 837], "starts_with": [294, 463, 673, 854], "cast": [295, 674], "cat": [296, 675, 676], "set_ord": [296, 676], "ceil": [297, 677], "clip": [298, 680], "clip_max": [299, 681], "clip_min": [300, 682], "co": [301, 684], "cosh": [302, 685], "cumcount": 304, "cummax": [305, 686], "cummin": [306, 687], "cumprod": [307, 688], "cumsum": [308, 500, 689], "cumulative_ev": [309, 690], "dot": [311, 693], "drop_nan": [312, 694], "dt": [314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733], "cast_time_unit": [314, 697], "cast_time_zon": [315, 698], "combin": [316, 699], "dai": [317, 318, 700, 701], "epoch": [319, 702], "hour": [320, 321, 703, 704], "iso_year": [322, 705], "microsecond": [323, 324, 709, 710], "millisecond": [325, 326, 711, 712], "minut": [327, 328, 714, 715], "month": [329, 716], "nanosecond": [330, 331, 717, 718], "offset_bi": [332, 719], "ordinal_dai": [333, 720], "quarter": [334, 721], "round": [335, 424, 722, 810], "second": [336, 337, 723, 724], "strftime": [338, 725], "timestamp": [339, 726], "truncat": [340, 727], "tz_local": [341, 728], "week": [342, 729], "weekdai": [343, 730], "with_time_unit": [344, 731], "with_time_zon": [345, 732], "year": [346, 733], "entropi": [347, 735], "ewm_mean": [348, 737], "ewm_std": [349, 738], "ewm_var": [350, 739], "exclud": [351, 505], "exp": [352, 740], "extend_const": [354, 742], "flatten": 359, "floor": [360, 747], "forward_fil": 361, "hash": [362, 750], "inspect": [364, 572], "is_between": 366, "is_finit": [368, 758], "is_first": [369, 759], "is_in": [370, 761], "is_infinit": [371, 762], "is_nan": [372, 763], "is_not": 373, "is_not_nan": [374, 764], "is_not_nul": [375, 765], "is_nul": [376, 766], "keep_nam": 378, "kurtosi": [379, 772], "len": [381, 773], "log": [384, 775], "log10": [385, 776], "lower_bound": 386, "map": [387, 514, 579], "map_alia": 388, "meta": [392, 393, 394, 395, 540], "output_nam": 392, "pop": 393, "root_nam": 394, "undo_alias": 395, "mode": [397, 781], "nan_max": [399, 785], "nan_min": [400, 786], "over": 402, "pct_chang": [403, 789], "pow": 404, "prefix": 405, "rank": [408, 794], "reinterpret": [410, 796], "repeat_bi": 411, "reshap": [412, 798], "rolling_appli": [414, 800], "rolling_max": [415, 801], "rolling_mean": [416, 802], "rolling_median": [417, 803], "rolling_min": [418, 804], "rolling_quantil": [419, 805], "rolling_skew": [420, 806], "rolling_std": [421, 807], "rolling_sum": [422, 808], "rolling_var": [423, 809], "search_sort": [426, 812], "set_sort": [427, 816], "shrink_dtyp": [430, 820], "shuffl": [431, 822], "sign": [432, 823], "sin": [433, 824], "sinh": [434, 825], "skew": [435, 826], "sort_bi": 438, "sqrt": [439, 829], "str": [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859], "count_match": [443, 834], "extract": [448, 839], "extract_al": [449, 840], "json_path_match": [450, 841], "ljust": [452, 843], "lstrip": [453, 844], "n_char": [454, 845], "replace_al": [456, 847], "rjust": [457, 848], "rstrip": [458, 849], "split": [460, 851], "split_exact": [461, 852], "splitn": [462, 853], "strip": [464, 855], "strptime": [465, 856], "to_lowercas": [466, 857], "to_uppercas": [467, 858], "zfill": [468, 859], "field": [469, 860, 861], "rename_field": [470, 862], "suffix": 471, "tan": [476, 869], "tanh": [477, 870], "to_phys": [478, 878], "top_k": [479, 879], "unique_count": [481, 881], "upper_bound": 482, "value_count": [483, 882], "where": 485, "arang": 489, "argsort_bi": 490, "avg": 491, "coalesc": 492, "col": 493, "concat_list": 494, "concat_str": 495, "cov": 497, "cumfold": 498, "cumreduc": 499, "element": 504, "format": 508, "from_epoch": 509, "group": 510, "lit": 513, "reduc": 522, "repeat": 523, "spearman_rank_corr": 525, "when": 531, "arrai": [532, 886], "categori": [535, 890], "name": [536, 784], "express": 539, "string": [543, 897], "tempor": [545, 899], "window": 546, "convers": 547, "eager": 547, "parallel": 547, "refer": 548, "input": 549, "output": 549, "csv": 549, "feather": 549, "ipc": 549, "parquet": 549, "sql": [549, 900], "json": 549, "avro": 549, "excel": 549, "delta": 549, "lake": 549, "dataset": 549, "lazyfram": [551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621], "cach": 551, "collect": 554, "describe_optimized_plan": 556, "describe_plan": 557, "fetch": 562, "from_json": 567, "profil": 587, "show_graph": 596, "sink_ipc": 597, "sink_parquet": 598, "with_context": 611, "lazygroupbi": [614, 615, 616, 617], "read": 622, "write": 622, "logic": 622, "plan": 622, "arg_tru": 640, "chunk_length": 678, "flag": 746, "get_chunk": 748, "has_valid": 749, "inner_dtyp": 752, "is_boolean": 754, "is_datelik": 755, "is_float": 760, "is_numer": 767, "is_sort": 768, "is_utf8": 770, "new_from_index": 787, "peak_max": 790, "peak_min": 791, "series_equ": 813, "set_at_idx": 815, "to_fram": [863, 874], "time_unit": 871, "to_list": 875, "view": 884, "zip_with": 885, "method": 900, "assert": 901, "properti": 901, "base": 901, "strategi": 901, "helper": 901, "util": 902}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.read_excel": [[91, "polars-read-excel"]], "polars.DataFrame.drop_in_place": [[123, "polars-dataframe-drop-in-place"]], "polars.DataFrame.apply": [[117, "polars-dataframe-apply"]], "polars.DataFrame.columns": [[120, "polars-dataframe-columns"]], "polars.toggle_string_cache": [[113, "polars-toggle-string-cache"]], "polars.scan_csv": [[99, "polars-scan-csv"]], "polars.from_records": [[82, "polars-from-records"]], "polars.get_idx_type": [[84, "polars-get-idx-type"]], "polars.read_ipc_schema": [[93, "polars-read-ipc-schema"]], "polars.scan_delta": [[100, "polars-scan-delta"]], "polars.DataFrame.fill_nan": [[129, "polars-dataframe-fill-nan"]], "polars.from_arrow": [[77, "polars-from-arrow"]], "polars.exceptions.RowsException": [[73, "polars-exceptions-rowsexception"]], "polars.exceptions.NoDataError": [[69, "polars-exceptions-nodataerror"]], "polars.exceptions.InvalidOperationError": [[68, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.fold": [[133, "polars-dataframe-fold"]], "polars.read_parquet": [[96, "polars-read-parquet"]], "polars.from_numpy": [[80, "polars-from-numpy"]], "polars.get_dummies": [[83, "polars-get-dummies"]], "Aggregation": [[116, "aggregation"], [624, "aggregation"], [550, "aggregation"], [245, "aggregation"]], "polars.read_avro": [[87, "polars-read-avro"]], "polars.testing.parametric.dataframes": [[110, "polars-testing-parametric-dataframes"]], "polars.exceptions.NoRowsReturned": [[70, "polars-exceptions-norowsreturned"]], "polars.DataFrame.filter": [[131, "polars-dataframe-filter"]], "polars.DataFrame.cleared": [[118, "polars-dataframe-cleared"]], "polars.zeros": [[114, "polars-zeros"]], "polars.ones": [[86, "polars-ones"]], "polars.show_versions": [[105, "polars-show-versions"]], "polars.scan_ipc": [[102, "polars-scan-ipc"]], "polars.from_dict": [[78, "polars-from-dict"]], "polars.read_csv_batched": [[89, "polars-read-csv-batched"]], "polars.read_ipc": [[92, "polars-read-ipc"]], "polars.DataFrame.fill_null": [[130, "polars-dataframe-fill-null"]], "polars.exceptions.ShapeError": [[75, "polars-exceptions-shapeerror"]], "polars.scan_parquet": [[104, "polars-scan-parquet"]], "polars.testing.assert_frame_equal": [[106, "polars-testing-assert-frame-equal"]], "polars.read_csv": [[88, "polars-read-csv"]], "polars.testing.parametric.series": [[111, "polars-testing-parametric-series"]], "polars.DataFrame.drop_nulls": [[124, "polars-dataframe-drop-nulls"]], "polars.testing.assert_series_equal": [[107, "polars-testing-assert-series-equal"]], "polars.exceptions.NotFoundError": [[71, "polars-exceptions-notfounderror"]], "polars.DataFrame.estimated_size": [[126, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[127, "polars-dataframe-explode"]], "polars.testing.parametric.columns": [[109, "polars-testing-parametric-columns"]], "polars.exceptions.PanicException": [[72, "polars-exceptions-panicexception"]], "polars.exceptions.SchemaError": [[74, "polars-exceptions-schemaerror"]], "polars.DataFrame.describe": [[121, "polars-dataframe-describe"]], "polars.DataFrame.extend": [[128, "polars-dataframe-extend"]], "polars.DataFrame.find_idx_by_name": [[132, "polars-dataframe-find-idx-by-name"]], "polars.from_dicts": [[79, "polars-from-dicts"]], "polars.from_pandas": [[81, "polars-from-pandas"]], "Config": [[115, "config"]], "Config options (set/unset)": [[115, "config-options-set-unset"]], "Config load, save, and current state": [[115, "config-load-save-and-current-state"]], "polars.exceptions.TooManyRowsReturned": [[76, "polars-exceptions-toomanyrowsreturned"]], "polars.read_parquet_schema": [[97, "polars-read-parquet-schema"]], "polars.read_json": [[94, "polars-read-json"]], "polars.read_sql": [[98, "polars-read-sql"]], "polars.DataFrame.dtypes": [[125, "polars-dataframe-dtypes"]], "polars.DataFrame.clone": [[119, "polars-dataframe-clone"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[85, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.exceptions.DuplicateError": [[67, "polars-exceptions-duplicateerror"]], "polars.DataFrame.drop": [[122, "polars-dataframe-drop"]], "polars.threadpool_size": [[112, "polars-threadpool-size"]], "polars.read_delta": [[90, "polars-read-delta"]], "polars.testing.parametric.column": [[108, "polars-testing-parametric-column"]], "polars.scan_ds": [[101, "polars-scan-ds"]], "polars.scan_ndjson": [[103, "polars-scan-ndjson"]], "polars.read_ndjson": [[95, "polars-read-ndjson"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.Null": [[40, "polars-null"]], "polars.collect_all": [[61, "polars-collect-all"]], "polars.List": [[39, "polars-list"]], "polars.Struct": [[46, "polars-struct"]], "polars.Config.set_verbose": [[21, "polars-config-set-verbose"]], "polars.Config.set_fmt_str_lengths": [[9, "polars-config-set-fmt-str-lengths"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.SQLContext.register": [[44, "polars-sqlcontext-register"]], "polars.api.register_lazyframe_namespace": [[57, "polars-api-register-lazyframe-namespace"]], "polars.exceptions.ArrowError": [[65, "polars-exceptions-arrowerror"]], "polars.Config.set_tbl_column_data_type_inline": [[12, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_formatting": [[14, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_rows": [[19, "polars-config-set-tbl-rows"]], "polars.Date": [[30, "polars-date"]], "polars.Float32": [[33, "polars-float32"]], "polars.Int64": [[37, "polars-int64"]], "polars.Object": [[41, "polars-object"]], "polars.Unknown": [[52, "polars-unknown"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.align_frames": [[54, "polars-align-frames"]], "polars.build_info": [[60, "polars-build-info"]], "polars.DataFrame.write_json": [[26, "polars-dataframe-write-json"]], "polars.arg_where": [[59, "polars-arg-where"]], "polars.UInt8": [[51, "polars-uint8"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_avro": [[23, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_cell_alignment": [[10, "polars-config-set-tbl-cell-alignment"]], "polars.SQLContext.query": [[43, "polars-sqlcontext-query"]], "polars.Config.set_tbl_hide_dataframe_shape": [[17, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Datetime": [[31, "polars-datetime"]], "polars.UInt64": [[50, "polars-uint64"]], "polars.Binary": [[2, "polars-binary"]], "polars.StringCache": [[45, "polars-stringcache"]], "polars.api.register_dataframe_namespace": [[55, "polars-api-register-dataframe-namespace"]], "polars.DataFrame.write_parquet": [[28, "polars-dataframe-write-parquet"]], "polars.UInt32": [[49, "polars-uint32"]], "polars.DataFrame.write_ipc": [[25, "polars-dataframe-write-ipc"]], "polars.Float64": [[34, "polars-float64"]], "polars.Utf8": [[53, "polars-utf8"]], "polars.DataFrame.write_csv": [[24, "polars-dataframe-write-csv"]], "polars.DataFrame.write_ndjson": [[27, "polars-dataframe-write-ndjson"]], "polars.Config.set_tbl_width_chars": [[20, "polars-config-set-tbl-width-chars"]], "polars.api.register_expr_namespace": [[56, "polars-api-register-expr-namespace"]], "polars.api.register_series_namespace": [[58, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_dataframe_shape_below": [[13, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Time": [[47, "polars-time"]], "polars.date_range": [[64, "polars-date-range"]], "polars.Duration": [[32, "polars-duration"]], "polars.cut": [[63, "polars-cut"]], "polars.SQLContext.execute": [[42, "polars-sqlcontext-execute"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.Config.set_tbl_cols": [[11, "polars-config-set-tbl-cols"]], "polars.Int32": [[36, "polars-int32"]], "polars.Int16": [[35, "polars-int16"]], "polars.exceptions.ComputeError": [[66, "polars-exceptions-computeerror"]], "polars.DataType": [[29, "polars-datatype"]], "polars.concat": [[62, "polars-concat"]], "polars.Config.state": [[22, "polars-config-state"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.Config.set_tbl_hide_column_names": [[16, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dtype_separator": [[18, "polars-config-set-tbl-hide-dtype-separator"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.UInt16": [[48, "polars-uint16"]], "polars.Config.set_tbl_hide_column_data_types": [[15, "polars-config-set-tbl-hide-column-data-types"]], "polars.Int8": [[38, "polars-int8"]], "polars.Series.sin": [[824, "polars-series-sin"]], "polars.Series.struct.field": [[860, "polars-series-struct-field"]], "polars.Series.struct.unnest": [[864, "polars-series-struct-unnest"]], "polars.Series.str.ljust": [[843, "polars-series-str-ljust"]], "polars.Series.rolling_min": [[804, "polars-series-rolling-min"]], "polars.Series.shift": [[818, "polars-series-shift"]], "polars.Series.str.extract_all": [[840, "polars-series-str-extract-all"]], "polars.Series.str.rjust": [[848, "polars-series-str-rjust"]], "polars.Series.rolling_quantile": [[805, "polars-series-rolling-quantile"]], "polars.Series.str.slice": [[850, "polars-series-str-slice"]], "polars.Series.str.to_lowercase": [[857, "polars-series-str-to-lowercase"]], "polars.Series.round": [[810, "polars-series-round"]], "polars.Series.str.replace_all": [[847, "polars-series-str-replace-all"]], "polars.Series.str.starts_with": [[854, "polars-series-str-starts-with"]], "polars.Series.str.strptime": [[856, "polars-series-str-strptime"]], "polars.Series.str.rstrip": [[849, "polars-series-str-rstrip"]], "polars.Series.str.contains": [[833, "polars-series-str-contains"]], "polars.Series.str.json_path_match": [[841, "polars-series-str-json-path-match"]], "polars.Series.rolling_sum": [[808, "polars-series-rolling-sum"]], "polars.Series.str.explode": [[838, "polars-series-str-explode"]], "polars.Series.str.split": [[851, "polars-series-str-split"]], "polars.Series.str.decode": [[835, "polars-series-str-decode"]], "polars.Series.struct.fields": [[861, "polars-series-struct-fields"]], "polars.Series.set_sorted": [[816, "polars-series-set-sorted"]], "polars.Series.std": [[830, "polars-series-std"]], "polars.Series.str.split_exact": [[852, "polars-series-str-split-exact"]], "polars.Series.tail": [[866, "polars-series-tail"]], "polars.Series.str.concat": [[832, "polars-series-str-concat"]], "polars.Series.shape": [[817, "polars-series-shape"]], "polars.Series.rolling_var": [[809, "polars-series-rolling-var"]], "polars.Series.shuffle": [[822, "polars-series-shuffle"]], "polars.Series.str.lstrip": [[844, "polars-series-str-lstrip"]], "polars.Series.set": [[814, "polars-series-set"]], "polars.Series.str.splitn": [[853, "polars-series-str-splitn"]], "polars.Series.rolling_std": [[807, "polars-series-rolling-std"]], "polars.Series.take": [[867, "polars-series-take"]], "polars.Series.take_every": [[868, "polars-series-take-every"]], "polars.Series.tan": [[869, "polars-series-tan"]], "polars.Series.str.count_match": [[834, "polars-series-str-count-match"]], "polars.Series.str.ends_with": [[837, "polars-series-str-ends-with"]], "polars.Series.struct.to_frame": [[863, "polars-series-struct-to-frame"]], "polars.Series.str.replace": [[846, "polars-series-str-replace"]], "polars.Series.slice": [[827, "polars-series-slice"]], "polars.Series.sum": [[865, "polars-series-sum"]], "polars.Series.str.lengths": [[842, "polars-series-str-lengths"]], "polars.Series.search_sorted": [[812, "polars-series-search-sorted"]], "polars.Series.skew": [[826, "polars-series-skew"]], "polars.Series.str.zfill": [[859, "polars-series-str-zfill"]], "polars.Series.tanh": [[870, "polars-series-tanh"]], "polars.Series.shrink_to_fit": [[821, "polars-series-shrink-to-fit"]], "polars.Series.rolling_skew": [[806, "polars-series-rolling-skew"]], "polars.Series.str.n_chars": [[845, "polars-series-str-n-chars"]], "polars.Series.sinh": [[825, "polars-series-sinh"]], "polars.Series.str": [[831, "polars-series-str"]], "polars.Series.shift_and_fill": [[819, "polars-series-shift-and-fill"]], "polars.Series.sqrt": [[829, "polars-series-sqrt"]], "polars.Series.str.extract": [[839, "polars-series-str-extract"]], "polars.Series.str.to_uppercase": [[858, "polars-series-str-to-uppercase"]], "polars.Series.struct.rename_fields": [[862, "polars-series-struct-rename-fields"]], "polars.Series.sort": [[828, "polars-series-sort"]], "polars.Series.shrink_dtype": [[820, "polars-series-shrink-dtype"]], "polars.Series.str.strip": [[855, "polars-series-str-strip"]], "polars.Series.set_at_idx": [[815, "polars-series-set-at-idx"]], "polars.Series.sign": [[823, "polars-series-sign"]], "polars.Series.sample": [[811, "polars-series-sample"]], "polars.Series.series_equal": [[813, "polars-series-series-equal"]], "polars.Series.str.encode": [[836, "polars-series-str-encode"]], "polars.Series.floor": [[747, "polars-series-floor"]], "polars.Series.hash": [[750, "polars-series-hash"]], "polars.Series.is_sorted": [[768, "polars-series-is-sorted"]], "polars.Series.has_validity": [[749, "polars-series-has-validity"]], "polars.Series.log10": [[776, "polars-series-log10"]], "polars.Series.is_infinite": [[762, "polars-series-is-infinite"]], "polars.Series.exp": [[740, "polars-series-exp"]], "polars.Series.is_nan": [[763, "polars-series-is-nan"]], "polars.Series.interpolate": [[753, "polars-series-interpolate"]], "polars.Series.fill_nan": [[743, "polars-series-fill-nan"]], "polars.Series.min": [[780, "polars-series-min"]], "polars.Series.median": [[779, "polars-series-median"]], "polars.Series.peak_min": [[791, "polars-series-peak-min"]], "polars.Series.rank": [[794, "polars-series-rank"]], "polars.Series.mean": [[778, "polars-series-mean"]], "polars.Series.is_first": [[759, "polars-series-is-first"]], "polars.Series.rolling_apply": [[800, "polars-series-rolling-apply"]], "polars.Series.inner_dtype": [[752, "polars-series-inner-dtype"]], "polars.Series.is_empty": [[757, "polars-series-is-empty"]], "polars.Series.is_not_null": [[765, "polars-series-is-not-null"]], "polars.Series.is_unique": [[769, "polars-series-is-unique"]], "polars.Series.n_unique": [[783, "polars-series-n-unique"]], "polars.Series.is_finite": [[758, "polars-series-is-finite"]], "polars.Series.new_from_index": [[787, "polars-series-new-from-index"]], "polars.Series.null_count": [[788, "polars-series-null-count"]], "polars.Series.reverse": [[799, "polars-series-reverse"]], "polars.Series.mode": [[781, "polars-series-mode"]], "polars.Series.is_numeric": [[767, "polars-series-is-numeric"]], "polars.Series.n_chunks": [[782, "polars-series-n-chunks"]], "polars.Series.kurtosis": [[772, "polars-series-kurtosis"]], "polars.Series.is_boolean": [[754, "polars-series-is-boolean"]], "polars.Series.is_float": [[760, "polars-series-is-float"]], "polars.Series.name": [[784, "polars-series-name"]], "polars.Series.max": [[777, "polars-series-max"]], "polars.Series.nan_max": [[785, "polars-series-nan-max"]], "polars.Series.ewm_std": [[738, "polars-series-ewm-std"]], "polars.Series.reshape": [[798, "polars-series-reshape"]], "polars.Series.quantile": [[793, "polars-series-quantile"]], "polars.Series.flags": [[746, "polars-series-flags"]], "polars.Series.fill_null": [[744, "polars-series-fill-null"]], "polars.Series.log": [[775, "polars-series-log"]], "polars.Series.is_in": [[761, "polars-series-is-in"]], "polars.Series.filter": [[745, "polars-series-filter"]], "polars.Series.pct_change": [[789, "polars-series-pct-change"]], "polars.Series.rolling_median": [[803, "polars-series-rolling-median"]], "polars.Series.reinterpret": [[796, "polars-series-reinterpret"]], "polars.Series.is_utf8": [[770, "polars-series-is-utf8"]], "polars.Series.rename": [[797, "polars-series-rename"]], "polars.Series.head": [[751, "polars-series-head"]], "polars.Series.is_null": [[766, "polars-series-is-null"]], "polars.Series.ewm_mean": [[737, "polars-series-ewm-mean"]], "polars.Series.ewm_var": [[739, "polars-series-ewm-var"]], "polars.Series.len": [[773, "polars-series-len"]], "polars.Series.product": [[792, "polars-series-product"]], "polars.Series.rechunk": [[795, "polars-series-rechunk"]], "polars.Series.limit": [[774, "polars-series-limit"]], "polars.Series.is_duplicated": [[756, "polars-series-is-duplicated"]], "polars.Series.get_chunks": [[748, "polars-series-get-chunks"]], "polars.Series.rolling_max": [[801, "polars-series-rolling-max"]], "polars.Series.explode": [[741, "polars-series-explode"]], "polars.Series.rolling_mean": [[802, "polars-series-rolling-mean"]], "polars.Series.is_not_nan": [[764, "polars-series-is-not-nan"]], "polars.Series.nan_min": [[786, "polars-series-nan-min"]], "polars.Series.peak_max": [[790, "polars-series-peak-max"]], "polars.Series.is_datelike": [[755, "polars-series-is-datelike"]], "polars.Series.item": [[771, "polars-series-item"]], "polars.Series.extend_constant": [[742, "polars-series-extend-constant"]], "polars.Series.dt.max": [[706, "polars-series-dt-max"]], "polars.Series.dt.milliseconds": [[712, "polars-series-dt-milliseconds"]], "polars.Series.cummax": [[686, "polars-series-cummax"]], "polars.Series.drop_nans": [[694, "polars-series-drop-nans"]], "polars.Series.dt.offset_by": [[719, "polars-series-dt-offset-by"]], "polars.Series.cumsum": [[689, "polars-series-cumsum"]], "polars.Series.dt.with_time_unit": [[731, "polars-series-dt-with-time-unit"]], "polars.Series.cos": [[684, "polars-series-cos"]], "polars.Series.dt.seconds": [[724, "polars-series-dt-seconds"]], "polars.Series.clip": [[680, "polars-series-clip"]], "polars.Series.dt.mean": [[707, "polars-series-dt-mean"]], "polars.Series.cumprod": [[688, "polars-series-cumprod"]], "polars.Series.chunk_lengths": [[678, "polars-series-chunk-lengths"]], "polars.Series.dt.combine": [[699, "polars-series-dt-combine"]], "polars.Series.dt.strftime": [[725, "polars-series-dt-strftime"]], "polars.Series.dot": [[693, "polars-series-dot"]], "polars.Series.dt.week": [[729, "polars-series-dt-week"]], "polars.Series.dt.hour": [[703, "polars-series-dt-hour"]], "polars.Series.cumulative_eval": [[690, "polars-series-cumulative-eval"]], "polars.Series.dt.median": [[708, "polars-series-dt-median"]], "polars.Series.dt.min": [[713, "polars-series-dt-min"]], "polars.Series.describe": [[691, "polars-series-describe"]], "polars.Series.dt.nanosecond": [[717, "polars-series-dt-nanosecond"]], "polars.Series.dt.cast_time_zone": [[698, "polars-series-dt-cast-time-zone"]], "polars.Series.dt.ordinal_day": [[720, "polars-series-dt-ordinal-day"]], "polars.Series.cosh": [[685, "polars-series-cosh"]], "polars.Series.ceil": [[677, "polars-series-ceil"]], "polars.Series.dt.millisecond": [[711, "polars-series-dt-millisecond"]], "polars.Series.dt.day": [[700, "polars-series-dt-day"]], "polars.Series.dt.second": [[723, "polars-series-dt-second"]], "polars.Series.cat.set_ordering": [[676, "polars-series-cat-set-ordering"]], "polars.Series.bin.decode": [[670, "polars-series-bin-decode"]], "polars.Series.dt.truncate": [[727, "polars-series-dt-truncate"]], "polars.Series.dtype": [[734, "polars-series-dtype"]], "polars.Series.diff": [[692, "polars-series-diff"]], "polars.Series.cast": [[674, "polars-series-cast"]], "polars.Series.dt.nanoseconds": [[718, "polars-series-dt-nanoseconds"]], "polars.Series.clip_max": [[681, "polars-series-clip-max"]], "polars.Series.cummin": [[687, "polars-series-cummin"]], "polars.Series.bin.encode": [[671, "polars-series-bin-encode"]], "polars.Series.dt.minute": [[714, "polars-series-dt-minute"]], "polars.Series.clone": [[683, "polars-series-clone"]], "polars.Series.dt.cast_time_unit": [[697, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.round": [[722, "polars-series-dt-round"]], "polars.Series.dt.timestamp": [[726, "polars-series-dt-timestamp"]], "polars.Series.dt.epoch": [[702, "polars-series-dt-epoch"]], "polars.Series.dt.minutes": [[715, "polars-series-dt-minutes"]], "polars.Series.dt": [[696, "polars-series-dt"]], "polars.Series.dt.days": [[701, "polars-series-dt-days"]], "polars.Series.cleared": [[679, "polars-series-cleared"]], "polars.Series.dt.tz_localize": [[728, "polars-series-dt-tz-localize"]], "polars.Series.dt.hours": [[704, "polars-series-dt-hours"]], "polars.Series.dt.microsecond": [[709, "polars-series-dt-microsecond"]], "polars.Series.dt.iso_year": [[705, "polars-series-dt-iso-year"]], "polars.Series.dt.microseconds": [[710, "polars-series-dt-microseconds"]], "polars.Series.dt.weekday": [[730, "polars-series-dt-weekday"]], "polars.Series.entropy": [[735, "polars-series-entropy"]], "polars.Series.dt.month": [[716, "polars-series-dt-month"]], "polars.Series.clip_min": [[682, "polars-series-clip-min"]], "polars.Series.cat": [[675, "polars-series-cat"]], "polars.Series.dt.year": [[733, "polars-series-dt-year"]], "polars.Series.bin.ends_with": [[672, "polars-series-bin-ends-with"]], "polars.Series.bin.starts_with": [[673, "polars-series-bin-starts-with"]], "polars.Series.dt.with_time_zone": [[732, "polars-series-dt-with-time-zone"]], "polars.Series.drop_nulls": [[695, "polars-series-drop-nulls"]], "polars.Series.estimated_size": [[736, "polars-series-estimated-size"]], "polars.Series.dt.quarter": [[721, "polars-series-dt-quarter"]], "Temporal": [[899, "temporal"], [545, "temporal"]], "polars.Series.unique_counts": [[881, "polars-series-unique-counts"]], "polars.Series.time_unit": [[871, "polars-series-time-unit"]], "polars.Series.to_dummies": [[873, "polars-series-to-dummies"]], "Attributes": [[887, "attributes"], [618, "attributes"], [234, "attributes"]], "polars.Series.value_counts": [[882, "polars-series-value-counts"]], "Testing": [[901, "testing"]], "Asserts": [[901, "asserts"]], "Property-based testing": [[901, "property-based-testing"]], "Strategies": [[901, "strategies"]], "Strategy helpers": [[901, "strategy-helpers"]], "polars.Series.to_physical": [[878, "polars-series-to-physical"]], "polars.Series.to_numpy": [[876, "polars-series-to-numpy"]], "polars.Series.to_frame": [[874, "polars-series-to-frame"]], "polars.Series.var": [[883, "polars-series-var"]], "polars.Series.zip_with": [[885, "polars-series-zip-with"]], "polars.Series.to_pandas": [[877, "polars-series-to-pandas"]], "Descriptive": [[892, "descriptive"], [619, "descriptive"], [236, "descriptive"]], "Manipulation/selection": [[896, "manipulation-selection"], [623, "manipulation-selection"], [542, "manipulation-selection"], [241, "manipulation-selection"]], "Utils": [[902, "utils"]], "polars.Series.to_list": [[875, "polars-series-to-list"]], "Computation": [[891, "computation"], [537, "computation"], [235, "computation"]], "Binary": [[888, "binary"], [533, "binary"]], "polars.Series.to_arrow": [[872, "polars-series-to-arrow"]], "polars.Series.view": [[884, "polars-series-view"]], "Array": [[886, "array"], [532, "array"]], "Miscellaneous": [[895, "miscellaneous"], [622, "miscellaneous"], [547, "miscellaneous"], [541, "miscellaneous"], [240, "miscellaneous"]], "Boolean": [[889, "boolean"], [534, "boolean"]], "Export": [[893, "export"], [237, "export"]], "polars.Series.unique": [[880, "polars-series-unique"]], "polars.Series.top_k": [[879, "polars-series-top-k"]], "Series": [[894, "series"]], "Struct": [[898, "struct"], [544, "struct"]], "Categories": [[890, "categories"], [535, "categories"]], "Strings": [[897, "strings"], [543, "strings"]], "SQL": [[900, "sql"], [549, "sql"]], "Methods": [[900, "methods"]], "polars.Series.arccos": [[631, "polars-series-arccos"]], "polars.Series.arg_max": [[637, "polars-series-arg-max"]], "polars.Series.arr.slice": [[662, "polars-series-arr-slice"]], "polars.Series.arr.unique": [[668, "polars-series-arr-unique"]], "polars.Series.arr.arg_min": [[645, "polars-series-arr-arg-min"]], "polars.Series.arr.max": [[657, "polars-series-arr-max"]], "polars.LazyFrame.with_context": [[611, "polars-lazyframe-with-context"]], "polars.LazyFrame.var": [[607, "polars-lazyframe-var"]], "polars.Series.arr.to_struct": [[667, "polars-series-arr-to-struct"]], "Read/write logical plan": [[622, "read-write-logical-plan"]], "polars.Series.abs": [[625, "polars-series-abs"]], "polars.Series.arg_sort": [[639, "polars-series-arg-sort"]], "polars.Series.arr.tail": [[665, "polars-series-arr-tail"]], "polars.Series.arcsin": [[633, "polars-series-arcsin"]], "polars.LazyFrame.with_column": [[609, "polars-lazyframe-with-column"]], "polars.Series.arr.arg_max": [[644, "polars-series-arr-arg-max"]], "polars.Series.arr.head": [[653, "polars-series-arr-head"]], "polars.Series.arr.last": [[655, "polars-series-arr-last"]], "polars.Series.arr.sort": [[663, "polars-series-arr-sort"]], "polars.Series.arr.explode": [[650, "polars-series-arr-explode"]], "polars.Series.arr": [[643, "polars-series-arr"]], "polars.LazyFrame.write_json": [[613, "polars-lazyframe-write-json"]], "polars.Series.any": [[628, "polars-series-any"]], "polars.Series.arr.first": [[651, "polars-series-arr-first"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[614, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arctanh": [[636, "polars-series-arctanh"]], "polars.Series.bin.contains": [[669, "polars-series-bin-contains"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[617, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arg_min": [[638, "polars-series-arg-min"]], "polars.Series.arr.shift": [[661, "polars-series-arr-shift"]], "polars.LazyFrame.with_columns": [[610, "polars-lazyframe-with-columns"]], "polars.Series.alias": [[626, "polars-series-alias"]], "polars.LazyFrame.with_row_count": [[612, "polars-lazyframe-with-row-count"]], "polars.Series.arr.lengths": [[656, "polars-series-arr-lengths"]], "polars.Series.arr.sum": [[664, "polars-series-arr-sum"]], "polars.Series.arctan": [[635, "polars-series-arctan"]], "polars.Series.arcsinh": [[634, "polars-series-arcsinh"]], "polars.Series.arr.concat": [[646, "polars-series-arr-concat"]], "polars.Series.arr.diff": [[648, "polars-series-arr-diff"]], "polars.Series.arg_true": [[640, "polars-series-arg-true"]], "polars.Series.arg_unique": [[641, "polars-series-arg-unique"]], "LazyFrame": [[621, "lazyframe"]], "polars.Series.apply": [[630, "polars-series-apply"]], "polars.LazyFrame.unique": [[605, "polars-lazyframe-unique"]], "polars.LazyFrame.tail": [[603, "polars-lazyframe-tail"]], "polars.LazyFrame.unnest": [[606, "polars-lazyframe-unnest"]], "GroupBy": [[620, "groupby"], [238, "groupby"]], "polars.Series.arr.get": [[652, "polars-series-arr-get"]], "polars.LazyFrame.take_every": [[604, "polars-lazyframe-take-every"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[615, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.argsort": [[642, "polars-series-argsort"]], "polars.Series.arr.reverse": [[660, "polars-series-arr-reverse"]], "polars.Series.arr.mean": [[658, "polars-series-arr-mean"]], "polars.Series.arr.contains": [[647, "polars-series-arr-contains"]], "polars.Series.arr.take": [[666, "polars-series-arr-take"]], "polars.LazyFrame.width": [[608, "polars-lazyframe-width"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[616, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.append": [[629, "polars-series-append"]], "polars.Series.all": [[627, "polars-series-all"]], "polars.Series.arr.join": [[654, "polars-series-arr-join"]], "polars.Series.arr.eval": [[649, "polars-series-arr-eval"]], "polars.Series.arccosh": [[632, "polars-series-arccosh"]], "polars.Series.arr.min": [[659, "polars-series-arr-min"]], "polars.all": [[486, "polars-all"]], "polars.mean": [[516, "polars-mean"]], "polars.Expr.unique_counts": [[481, "polars-expr-unique-counts"]], "polars.Expr.unique": [[480, "polars-expr-unique"]], "polars.lit": [[513, "polars-lit"]], "polars.groups": [[510, "polars-groups"]], "polars.Expr.tan": [[476, "polars-expr-tan"]], "polars.Expr.tanh": [[477, "polars-expr-tanh"]], "polars.spearman_rank_corr": [[525, "polars-spearman-rank-corr"]], "polars.Expr.value_counts": [[483, "polars-expr-value-counts"]], "polars.std": [[526, "polars-std"]], "polars.sum": [[528, "polars-sum"]], "polars.Expr.struct.field": [[469, "polars-expr-struct-field"]], "polars.datetime": [[502, "polars-datetime"]], "polars.Expr.upper_bound": [[482, "polars-expr-upper-bound"]], "polars.pearson_corr": [[520, "polars-pearson-corr"]], "polars.cumfold": [[498, "polars-cumfold"]], "polars.Expr.struct.rename_fields": [[470, "polars-expr-struct-rename-fields"]], "polars.struct": [[527, "polars-struct"]], "polars.count": [[496, "polars-count"]], "polars.argsort_by": [[490, "polars-argsort-by"]], "polars.concat_list": [[494, "polars-concat-list"]], "polars.concat_str": [[495, "polars-concat-str"]], "polars.Expr.sum": [[472, "polars-expr-sum"]], "polars.min": [[518, "polars-min"]], "polars.Expr.var": [[484, "polars-expr-var"]], "polars.cumsum": [[500, "polars-cumsum"]], "polars.Expr.where": [[485, "polars-expr-where"]], "polars.Expr.top_k": [[479, "polars-expr-top-k"]], "polars.Expr.to_physical": [[478, "polars-expr-to-physical"]], "polars.Expr.tail": [[473, "polars-expr-tail"]], "polars.format": [[508, "polars-format"]], "polars.avg": [[491, "polars-avg"]], "polars.quantile": [[521, "polars-quantile"]], "polars.date": [[501, "polars-date"]], "polars.n_unique": [[519, "polars-n-unique"]], "polars.var": [[530, "polars-var"]], "polars.element": [[504, "polars-element"]], "polars.list": [[512, "polars-list"]], "polars.tail": [[529, "polars-tail"]], "polars.cumreduce": [[499, "polars-cumreduce"]], "polars.Expr.take": [[474, "polars-expr-take"]], "polars.any": [[487, "polars-any"]], "polars.fold": [[507, "polars-fold"]], "polars.max": [[515, "polars-max"]], "polars.select": [[524, "polars-select"]], "polars.coalesce": [[492, "polars-coalesce"]], "polars.repeat": [[523, "polars-repeat"]], "polars.Expr.suffix": [[471, "polars-expr-suffix"]], "polars.exclude": [[505, "polars-exclude"]], "polars.duration": [[503, "polars-duration"]], "polars.Expr.take_every": [[475, "polars-expr-take-every"]], "polars.cov": [[497, "polars-cov"]], "polars.first": [[506, "polars-first"]], "polars.map": [[514, "polars-map"]], "polars.head": [[511, "polars-head"]], "polars.reduce": [[522, "polars-reduce"]], "polars.apply": [[488, "polars-apply"]], "polars.arange": [[489, "polars-arange"]], "polars.from_epoch": [[509, "polars-from-epoch"]], "polars.when": [[531, "polars-when"]], "polars.median": [[517, "polars-median"]], "polars.col": [[493, "polars-col"]], "polars.Expr.rolling_median": [[417, "polars-expr-rolling-median"]], "polars.Expr.shuffle": [[431, "polars-expr-shuffle"]], "polars.Expr.shift_and_fill": [[429, "polars-expr-shift-and-fill"]], "polars.Expr.sin": [[433, "polars-expr-sin"]], "polars.Expr.str.strip": [[464, "polars-expr-str-strip"]], "polars.Expr.str.starts_with": [[463, "polars-expr-str-starts-with"]], "polars.Expr.str.split": [[460, "polars-expr-str-split"]], "polars.Expr.str.split_exact": [[461, "polars-expr-str-split-exact"]], "polars.Expr.rolling_var": [[423, "polars-expr-rolling-var"]], "polars.Expr.product": [[406, "polars-expr-product"]], "polars.Expr.skew": [[435, "polars-expr-skew"]], "polars.Expr.str.lstrip": [[453, "polars-expr-str-lstrip"]], "polars.Expr.str.lengths": [[451, "polars-expr-str-lengths"]], "polars.Expr.str.replace_all": [[456, "polars-expr-str-replace-all"]], "polars.Expr.rolling_max": [[415, "polars-expr-rolling-max"]], "polars.Expr.str.n_chars": [[454, "polars-expr-str-n-chars"]], "polars.Expr.reinterpret": [[410, "polars-expr-reinterpret"]], "polars.Expr.std": [[440, "polars-expr-std"]], "polars.Expr.str.rstrip": [[458, "polars-expr-str-rstrip"]], "polars.Expr.str.slice": [[459, "polars-expr-str-slice"]], "polars.Expr.rolling_std": [[421, "polars-expr-rolling-std"]], "polars.Expr.rolling_mean": [[416, "polars-expr-rolling-mean"]], "polars.Expr.str.extract": [[448, "polars-expr-str-extract"]], "polars.Expr.search_sorted": [[426, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[427, "polars-expr-set-sorted"]], "polars.Expr.shift": [[428, "polars-expr-shift"]], "polars.Expr.rechunk": [[409, "polars-expr-rechunk"]], "polars.Expr.str.ends_with": [[446, "polars-expr-str-ends-with"]], "polars.Expr.str.zfill": [[468, "polars-expr-str-zfill"]], "polars.Expr.str.count_match": [[443, "polars-expr-str-count-match"]], "polars.Expr.str.rjust": [[457, "polars-expr-str-rjust"]], "polars.Expr.str.explode": [[447, "polars-expr-str-explode"]], "polars.Expr.pct_change": [[403, "polars-expr-pct-change"]], "polars.Expr.rolling_apply": [[414, "polars-expr-rolling-apply"]], "polars.Expr.str.ljust": [[452, "polars-expr-str-ljust"]], "polars.Expr.str.splitn": [[462, "polars-expr-str-splitn"]], "polars.Expr.rank": [[408, "polars-expr-rank"]], "polars.Expr.reverse": [[413, "polars-expr-reverse"]], "polars.Expr.sqrt": [[439, "polars-expr-sqrt"]], "polars.Expr.str.encode": [[445, "polars-expr-str-encode"]], "polars.Expr.slice": [[436, "polars-expr-slice"]], "polars.Expr.rolling_skew": [[420, "polars-expr-rolling-skew"]], "polars.Expr.repeat_by": [[411, "polars-expr-repeat-by"]], "polars.Expr.str.contains": [[442, "polars-expr-str-contains"]], "polars.Expr.sinh": [[434, "polars-expr-sinh"]], "polars.Expr.str.to_uppercase": [[467, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_sum": [[422, "polars-expr-rolling-sum"]], "polars.Expr.str.decode": [[444, "polars-expr-str-decode"]], "polars.Expr.str.json_path_match": [[450, "polars-expr-str-json-path-match"]], "polars.Expr.shrink_dtype": [[430, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_min": [[418, "polars-expr-rolling-min"]], "polars.Expr.str.replace": [[455, "polars-expr-str-replace"]], "polars.Expr.str.strptime": [[465, "polars-expr-str-strptime"]], "polars.Expr.sort_by": [[438, "polars-expr-sort-by"]], "polars.Expr.round": [[424, "polars-expr-round"]], "polars.Expr.reshape": [[412, "polars-expr-reshape"]], "polars.Expr.prefix": [[405, "polars-expr-prefix"]], "polars.Expr.sample": [[425, "polars-expr-sample"]], "polars.Expr.over": [[402, "polars-expr-over"]], "polars.Expr.pow": [[404, "polars-expr-pow"]], "polars.Expr.sign": [[432, "polars-expr-sign"]], "polars.Expr.sort": [[437, "polars-expr-sort"]], "polars.Expr.str.concat": [[441, "polars-expr-str-concat"]], "polars.Expr.str.extract_all": [[449, "polars-expr-str-extract-all"]], "polars.Expr.str.to_lowercase": [[466, "polars-expr-str-to-lowercase"]], "polars.Expr.rolling_quantile": [[419, "polars-expr-rolling-quantile"]], "polars.Expr.quantile": [[407, "polars-expr-quantile"]], "polars.Expr.lower_bound": [[386, "polars-expr-lower-bound"]], "polars.Expr.first": [[358, "polars-expr-first"]], "polars.Expr.kurtosis": [[379, "polars-expr-kurtosis"]], "polars.Expr.meta.undo_aliases": [[395, "polars-expr-meta-undo-aliases"]], "polars.Expr.fill_nan": [[355, "polars-expr-fill-nan"]], "polars.Expr.inspect": [[364, "polars-expr-inspect"]], "polars.Expr.is_nan": [[372, "polars-expr-is-nan"]], "polars.Expr.nan_min": [[400, "polars-expr-nan-min"]], "polars.Expr.is_not_null": [[375, "polars-expr-is-not-null"]], "polars.Expr.nan_max": [[399, "polars-expr-nan-max"]], "polars.Expr.explode": [[353, "polars-expr-explode"]], "polars.Expr.exclude": [[351, "polars-expr-exclude"]], "polars.Expr.meta.root_names": [[394, "polars-expr-meta-root-names"]], "polars.Expr.mean": [[390, "polars-expr-mean"]], "polars.Expr.min": [[396, "polars-expr-min"]], "polars.Expr.is_unique": [[377, "polars-expr-is-unique"]], "polars.Expr.dt.truncate": [[340, "polars-expr-dt-truncate"]], "polars.Expr.median": [[391, "polars-expr-median"]], "polars.Expr.dt.round": [[335, "polars-expr-dt-round"]], "polars.Expr.is_null": [[376, "polars-expr-is-null"]], "polars.Expr.is_in": [[370, "polars-expr-is-in"]], "polars.Expr.list": [[383, "polars-expr-list"]], "polars.Expr.is_between": [[366, "polars-expr-is-between"]], "polars.Expr.map_alias": [[388, "polars-expr-map-alias"]], "polars.Expr.filter": [[357, "polars-expr-filter"]], "polars.Expr.floor": [[360, "polars-expr-floor"]], "polars.Expr.dt.timestamp": [[339, "polars-expr-dt-timestamp"]], "polars.Expr.flatten": [[359, "polars-expr-flatten"]], "polars.Expr.forward_fill": [[361, "polars-expr-forward-fill"]], "polars.Expr.is_duplicated": [[367, "polars-expr-is-duplicated"]], "polars.Expr.max": [[389, "polars-expr-max"]], "polars.Expr.meta.pop": [[393, "polars-expr-meta-pop"]], "polars.Expr.null_count": [[401, "polars-expr-null-count"]], "polars.Expr.dt.strftime": [[338, "polars-expr-dt-strftime"]], "polars.Expr.is_infinite": [[371, "polars-expr-is-infinite"]], "polars.Expr.meta.output_name": [[392, "polars-expr-meta-output-name"]], "polars.Expr.is_finite": [[368, "polars-expr-is-finite"]], "polars.Expr.is_first": [[369, "polars-expr-is-first"]], "polars.Expr.log10": [[385, "polars-expr-log10"]], "polars.Expr.fill_null": [[356, "polars-expr-fill-null"]], "polars.Expr.head": [[363, "polars-expr-head"]], "polars.Expr.limit": [[382, "polars-expr-limit"]], "polars.Expr.dt.tz_localize": [[341, "polars-expr-dt-tz-localize"]], "polars.Expr.log": [[384, "polars-expr-log"]], "polars.Expr.dt.year": [[346, "polars-expr-dt-year"]], "polars.Expr.is_not_nan": [[374, "polars-expr-is-not-nan"]], "polars.Expr.keep_name": [[378, "polars-expr-keep-name"]], "polars.Expr.dt.with_time_unit": [[344, "polars-expr-dt-with-time-unit"]], "polars.Expr.entropy": [[347, "polars-expr-entropy"]], "polars.Expr.exp": [[352, "polars-expr-exp"]], "polars.Expr.map": [[387, "polars-expr-map"]], "polars.Expr.dt.with_time_zone": [[345, "polars-expr-dt-with-time-zone"]], "polars.Expr.dt.week": [[342, "polars-expr-dt-week"]], "polars.Expr.mode": [[397, "polars-expr-mode"]], "polars.Expr.n_unique": [[398, "polars-expr-n-unique"]], "polars.Expr.dt.weekday": [[343, "polars-expr-dt-weekday"]], "polars.Expr.hash": [[362, "polars-expr-hash"]], "polars.Expr.is_not": [[373, "polars-expr-is-not"]], "polars.Expr.last": [[380, "polars-expr-last"]], "polars.Expr.ewm_var": [[350, "polars-expr-ewm-var"]], "polars.Expr.dt.second": [[336, "polars-expr-dt-second"]], "polars.Expr.extend_constant": [[354, "polars-expr-extend-constant"]], "polars.Expr.dt.seconds": [[337, "polars-expr-dt-seconds"]], "polars.Expr.ewm_std": [[349, "polars-expr-ewm-std"]], "polars.Expr.len": [[381, "polars-expr-len"]], "polars.Expr.interpolate": [[365, "polars-expr-interpolate"]], "polars.Expr.ewm_mean": [[348, "polars-expr-ewm-mean"]], "polars.Expr.dt.nanoseconds": [[331, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.hour": [[320, "polars-expr-dt-hour"]], "polars.Expr.cummin": [[306, "polars-expr-cummin"]], "polars.Expr.dt.minute": [[327, "polars-expr-dt-minute"]], "polars.Expr.arr.head": [[273, "polars-expr-arr-head"]], "polars.Expr.dt.ordinal_day": [[333, "polars-expr-dt-ordinal-day"]], "polars.Expr.arr.sort": [[283, "polars-expr-arr-sort"]], "polars.Expr.cat.set_ordering": [[296, "polars-expr-cat-set-ordering"]], "polars.Expr.drop_nans": [[312, "polars-expr-drop-nans"]], "polars.Expr.ceil": [[297, "polars-expr-ceil"]], "polars.Expr.dt.quarter": [[334, "polars-expr-dt-quarter"]], "polars.Expr.arr.reverse": [[280, "polars-expr-arr-reverse"]], "polars.Expr.dt.iso_year": [[322, "polars-expr-dt-iso-year"]], "polars.Expr.arr.mean": [[278, "polars-expr-arr-mean"]], "polars.Expr.arr.sum": [[284, "polars-expr-arr-sum"]], "polars.Expr.arr.unique": [[288, "polars-expr-arr-unique"]], "polars.Expr.bin.encode": [[292, "polars-expr-bin-encode"]], "polars.Expr.cumcount": [[304, "polars-expr-cumcount"]], "polars.Expr.dt.cast_time_unit": [[314, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cosh": [[302, "polars-expr-cosh"]], "polars.Expr.dt.hours": [[321, "polars-expr-dt-hours"]], "polars.Expr.cummax": [[305, "polars-expr-cummax"]], "polars.Expr.cast": [[295, "polars-expr-cast"]], "polars.Expr.clip": [[298, "polars-expr-clip"]], "polars.Expr.arr.min": [[279, "polars-expr-arr-min"]], "polars.Expr.bin.ends_with": [[293, "polars-expr-bin-ends-with"]], "polars.Expr.dt.nanosecond": [[330, "polars-expr-dt-nanosecond"]], "polars.Expr.arr.max": [[277, "polars-expr-arr-max"]], "polars.Expr.cumulative_eval": [[309, "polars-expr-cumulative-eval"]], "polars.Expr.cumsum": [[308, "polars-expr-cumsum"]], "polars.Expr.arr.diff": [[268, "polars-expr-arr-diff"]], "polars.Expr.diff": [[310, "polars-expr-diff"]], "polars.Expr.backward_fill": [[289, "polars-expr-backward-fill"]], "polars.Expr.arr.to_struct": [[287, "polars-expr-arr-to-struct"]], "polars.Expr.drop_nulls": [[313, "polars-expr-drop-nulls"]], "polars.Expr.arr.last": [[275, "polars-expr-arr-last"]], "polars.Expr.dt.days": [[318, "polars-expr-dt-days"]], "polars.Expr.dt.microsecond": [[323, "polars-expr-dt-microsecond"]], "polars.Expr.dt.cast_time_zone": [[315, "polars-expr-dt-cast-time-zone"]], "polars.Expr.bin.decode": [[291, "polars-expr-bin-decode"]], "polars.Expr.dt.milliseconds": [[326, "polars-expr-dt-milliseconds"]], "polars.Expr.bin.starts_with": [[294, "polars-expr-bin-starts-with"]], "polars.Expr.arr.explode": [[270, "polars-expr-arr-explode"]], "polars.Expr.clip_max": [[299, "polars-expr-clip-max"]], "polars.Expr.arr.eval": [[269, "polars-expr-arr-eval"]], "polars.Expr.clip_min": [[300, "polars-expr-clip-min"]], "polars.Expr.arr.lengths": [[276, "polars-expr-arr-lengths"]], "polars.Expr.dot": [[311, "polars-expr-dot"]], "polars.Expr.dt.combine": [[316, "polars-expr-dt-combine"]], "polars.Expr.arr.join": [[274, "polars-expr-arr-join"]], "polars.Expr.count": [[303, "polars-expr-count"]], "polars.Expr.arr.first": [[271, "polars-expr-arr-first"]], "polars.Expr.arr.take": [[286, "polars-expr-arr-take"]], "polars.Expr.arr.get": [[272, "polars-expr-arr-get"]], "polars.Expr.cumprod": [[307, "polars-expr-cumprod"]], "polars.Expr.dt.epoch": [[319, "polars-expr-dt-epoch"]], "polars.Expr.arr.tail": [[285, "polars-expr-arr-tail"]], "polars.Expr.dt.microseconds": [[324, "polars-expr-dt-microseconds"]], "polars.Expr.arr.shift": [[281, "polars-expr-arr-shift"]], "polars.Expr.dt.minutes": [[328, "polars-expr-dt-minutes"]], "polars.Expr.dt.month": [[329, "polars-expr-dt-month"]], "polars.Expr.dt.offset_by": [[332, "polars-expr-dt-offset-by"]], "polars.Expr.arr.slice": [[282, "polars-expr-arr-slice"]], "polars.Expr.cos": [[301, "polars-expr-cos"]], "polars.Expr.dt.millisecond": [[325, "polars-expr-dt-millisecond"]], "polars.Expr.dt.day": [[317, "polars-expr-dt-day"]], "polars.Expr.bin.contains": [[290, "polars-expr-bin-contains"]], "polars.LazyFrame.show_graph": [[596, "polars-lazyframe-show-graph"]], "polars.LazyFrame.join": [[574, "polars-lazyframe-join"]], "Expressions": [[539, "expressions"]], "polars.LazyFrame.drop": [[558, "polars-lazyframe-drop"]], "polars.LazyFrame.clone": [[553, "polars-lazyframe-clone"]], "polars.LazyFrame.last": [[576, "polars-lazyframe-last"]], "polars.LazyFrame.rename": [[590, "polars-lazyframe-rename"]], "polars.LazyFrame.schema": [[592, "polars-lazyframe-schema"]], "Columns / names": [[536, "columns-names"]], "polars.LazyFrame.profile": [[587, "polars-lazyframe-profile"]], "polars.LazyFrame.read_json": [[589, "polars-lazyframe-read-json"]], "polars.LazyFrame.sort": [[600, "polars-lazyframe-sort"]], "polars.LazyFrame.describe_plan": [[557, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.join_asof": [[575, "polars-lazyframe-join-asof"]], "polars.LazyFrame.mean": [[581, "polars-lazyframe-mean"]], "polars.LazyFrame.merge_sorted": [[584, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.shift": [[594, "polars-lazyframe-shift"]], "polars.LazyFrame.columns": [[555, "polars-lazyframe-columns"]], "Functions": [[538, "functions"], [547, "functions"], [243, "functions"]], "polars.LazyFrame.reverse": [[591, "polars-lazyframe-reverse"]], "polars.LazyFrame.shift_and_fill": [[595, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.head": [[571, "polars-lazyframe-head"]], "polars.LazyFrame.drop_nulls": [[559, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.collect": [[554, "polars-lazyframe-collect"]], "polars.LazyFrame.quantile": [[588, "polars-lazyframe-quantile"]], "polars.LazyFrame.inspect": [[572, "polars-lazyframe-inspect"]], "polars.LazyFrame.groupby_dynamic": [[569, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.cleared": [[552, "polars-lazyframe-cleared"]], "polars.LazyFrame.std": [[601, "polars-lazyframe-std"]], "polars.LazyFrame.first": [[566, "polars-lazyframe-first"]], "polars.LazyFrame.limit": [[578, "polars-lazyframe-limit"]], "polars.LazyFrame.groupby": [[568, "polars-lazyframe-groupby"]], "polars.LazyFrame.select": [[593, "polars-lazyframe-select"]], "polars.LazyFrame.max": [[580, "polars-lazyframe-max"]], "polars.LazyFrame.min": [[585, "polars-lazyframe-min"]], "polars.LazyFrame.lazy": [[577, "polars-lazyframe-lazy"]], "polars.LazyFrame.map": [[579, "polars-lazyframe-map"]], "polars.LazyFrame.slice": [[599, "polars-lazyframe-slice"]], "polars.LazyFrame.sum": [[602, "polars-lazyframe-sum"]], "polars.LazyFrame.sink_ipc": [[597, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.fill_null": [[564, "polars-lazyframe-fill-null"]], "polars.LazyFrame.cache": [[551, "polars-lazyframe-cache"]], "polars.LazyFrame.filter": [[565, "polars-lazyframe-filter"]], "polars.LazyFrame.from_json": [[567, "polars-lazyframe-from-json"]], "Input/output": [[549, "input-output"]], "CSV": [[549, "csv"]], "Feather/ IPC": [[549, "feather-ipc"]], "Parquet": [[549, "parquet"]], "JSON": [[549, "json"]], "AVRO": [[549, "avro"]], "Excel": [[549, "excel"]], "Delta Lake": [[549, "delta-lake"]], "Datasets": [[549, "datasets"]], "BatchedCsvReader": [[549, "batchedcsvreader"]], "API reference": [[548, "api-reference"]], "Conversion": [[547, "conversion"]], "Eager/Lazy functions": [[547, "eager-lazy-functions"]], "Parallelization": [[547, "parallelization"]], "StringCache": [[547, "stringcache"]], "polars.LazyFrame.groupby_rolling": [[570, "polars-lazyframe-groupby-rolling"]], "Meta": [[540, "meta"]], "polars.LazyFrame.dtypes": [[560, "polars-lazyframe-dtypes"]], "Window": [[546, "window"]], "polars.LazyFrame.explode": [[561, "polars-lazyframe-explode"]], "polars.LazyFrame.fill_nan": [[563, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.interpolate": [[573, "polars-lazyframe-interpolate"]], "polars.LazyFrame.median": [[582, "polars-lazyframe-median"]], "polars.LazyFrame.sink_parquet": [[598, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.fetch": [[562, "polars-lazyframe-fetch"]], "polars.LazyFrame.melt": [[583, "polars-lazyframe-melt"]], "polars.LazyFrame.pipe": [[586, "polars-lazyframe-pipe"]], "polars.LazyFrame.describe_optimized_plan": [[556, "polars-lazyframe-describe-optimized-plan"]], "polars.DataFrame.schema": [[179, "polars-dataframe-schema"]], "polars.DataFrame.mean": [[157, "polars-dataframe-mean"]], "polars.DataFrame.pivot": [[168, "polars-dataframe-pivot"]], "polars.DataFrame.hash_rows": [[141, "polars-dataframe-hash-rows"]], "polars.DataFrame.shift": [[182, "polars-dataframe-shift"]], "polars.DataFrame.item": [[150, "polars-dataframe-item"]], "polars.DataFrame.head": [[142, "polars-dataframe-head"]], "polars.DataFrame.take_every": [[190, "polars-dataframe-take-every"]], "polars.DataFrame.to_numpy": [[195, "polars-dataframe-to-numpy"]], "polars.DataFrame.limit": [[155, "polars-dataframe-limit"]], "polars.DataFrame.frame_equal": [[134, "polars-dataframe-frame-equal"]], "polars.DataFrame.merge_sorted": [[160, "polars-dataframe-merge-sorted"]], "polars.DataFrame.rows": [[177, "polars-dataframe-rows"]], "polars.DataFrame.pearson_corr": [[166, "polars-dataframe-pearson-corr"]], "polars.DataFrame.groupby": [[138, "polars-dataframe-groupby"]], "polars.DataFrame.pipe": [[167, "polars-dataframe-pipe"]], "polars.DataFrame.shrink_to_fit": [[184, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.unique": [[200, "polars-dataframe-unique"]], "polars.DataFrame.max": [[156, "polars-dataframe-max"]], "polars.DataFrame.height": [[143, "polars-dataframe-height"]], "polars.DataFrame.median": [[158, "polars-dataframe-median"]], "polars.DataFrame.product": [[169, "polars-dataframe-product"]], "polars.DataFrame.std": [[187, "polars-dataframe-std"]], "polars.DataFrame.null_count": [[164, "polars-dataframe-null-count"]], "polars.DataFrame.shape": [[181, "polars-dataframe-shape"]], "polars.DataFrame.iterrows": [[151, "polars-dataframe-iterrows"]], "polars.DataFrame.n_unique": [[163, "polars-dataframe-n-unique"]], "polars.DataFrame.sample": [[178, "polars-dataframe-sample"]], "polars.DataFrame.hstack": [[144, "polars-dataframe-hstack"]], "polars.DataFrame.groupby_rolling": [[140, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.join_asof": [[153, "polars-dataframe-join-asof"]], "polars.DataFrame.interpolate": [[146, "polars-dataframe-interpolate"]], "polars.DataFrame.partition_by": [[165, "polars-dataframe-partition-by"]], "polars.DataFrame.to_dummies": [[194, "polars-dataframe-to-dummies"]], "polars.DataFrame.is_unique": [[149, "polars-dataframe-is-unique"]], "polars.DataFrame.to_series": [[197, "polars-dataframe-to-series"]], "polars.DataFrame.tail": [[189, "polars-dataframe-tail"]], "polars.DataFrame.replace_at_idx": [[174, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.join": [[152, "polars-dataframe-join"]], "polars.DataFrame.to_struct": [[198, "polars-dataframe-to-struct"]], "polars.DataFrame.get_column": [[135, "polars-dataframe-get-column"]], "polars.DataFrame.glimpse": [[137, "polars-dataframe-glimpse"]], "polars.DataFrame.to_dicts": [[193, "polars-dataframe-to-dicts"]], "polars.DataFrame.get_columns": [[136, "polars-dataframe-get-columns"]], "polars.DataFrame.to_pandas": [[196, "polars-dataframe-to-pandas"]], "polars.DataFrame.quantile": [[170, "polars-dataframe-quantile"]], "polars.DataFrame.slice": [[185, "polars-dataframe-slice"]], "polars.DataFrame.to_arrow": [[191, "polars-dataframe-to-arrow"]], "polars.DataFrame.rechunk": [[171, "polars-dataframe-rechunk"]], "polars.DataFrame.reverse": [[175, "polars-dataframe-reverse"]], "polars.DataFrame.row": [[176, "polars-dataframe-row"]], "polars.DataFrame.lazy": [[154, "polars-dataframe-lazy"]], "polars.DataFrame.select": [[180, "polars-dataframe-select"]], "polars.DataFrame.is_empty": [[148, "polars-dataframe-is-empty"]], "polars.DataFrame.rename": [[172, "polars-dataframe-rename"]], "polars.DataFrame.shift_and_fill": [[183, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.min": [[161, "polars-dataframe-min"]], "polars.DataFrame.transpose": [[199, "polars-dataframe-transpose"]], "polars.DataFrame.groupby_dynamic": [[139, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.to_dict": [[192, "polars-dataframe-to-dict"]], "polars.DataFrame.n_chunks": [[162, "polars-dataframe-n-chunks"]], "polars.DataFrame.replace": [[173, "polars-dataframe-replace"]], "polars.DataFrame.sort": [[186, "polars-dataframe-sort"]], "polars.DataFrame.is_duplicated": [[147, "polars-dataframe-is-duplicated"]], "polars.DataFrame.melt": [[159, "polars-dataframe-melt"]], "polars.DataFrame.insert_at_idx": [[145, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.sum": [[188, "polars-dataframe-sum"]], "polars.DataFrame.upsample": [[203, "polars-dataframe-upsample"]], "polars.internals.dataframe.groupby.GroupBy.first": [[214, "polars-internals-dataframe-groupby-groupby-first"]], "polars.Expr.arccosh": [[254, "polars-expr-arccosh"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[230, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.DataFrame.with_column": [[207, "polars-dataframe-with-column"]], "polars.Expr.agg_groups": [[247, "polars-expr-agg-groups"]], "polars.internals.dataframe.pivot.PivotOps.median": [[231, "polars-internals-dataframe-pivot-pivotops-median"]], "Data types": [[243, "data-types"]], "Numeric": [[243, "numeric"]], "Date / Time": [[243, "date-time"]], "Nested": [[243, "nested"]], "Other": [[243, "other"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[218, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[224, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[225, "polars-internals-dataframe-groupby-groupby-tail"]], "DataFrame": [[239, "dataframe"]], "polars.Expr.arr.concat": [[266, "polars-expr-arr-concat"]], "polars.Expr.all": [[249, "polars-expr-all"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[211, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.Expr.append": [[251, "polars-expr-append"]], "polars.Expr.arcsin": [[255, "polars-expr-arcsin"]], "polars.DataFrame.with_columns": [[208, "polars-dataframe-with-columns"]], "Pivot": [[242, "pivot"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[233, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.Expr.alias": [[248, "polars-expr-alias"]], "polars.Expr.arg_sort": [[261, "polars-expr-arg-sort"]], "polars.internals.dataframe.groupby.GroupBy.last": [[216, "polars-internals-dataframe-groupby-groupby-last"]], "polars.DataFrame.unnest": [[201, "polars-dataframe-unnest"]], "polars.Expr.arg_max": [[259, "polars-expr-arg-max"]], "polars.Expr.arctanh": [[258, "polars-expr-arctanh"]], "polars.Expr.argsort": [[263, "polars-expr-argsort"]], "polars.internals.dataframe.groupby.GroupBy.median": [[219, "polars-internals-dataframe-groupby-groupby-median"]], "polars.DataFrame.var": [[204, "polars-dataframe-var"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[222, "polars-internals-dataframe-groupby-groupby-pivot"]], "Exceptions": [[244, "exceptions"]], "polars.internals.dataframe.groupby.GroupBy.head": [[215, "polars-internals-dataframe-groupby-groupby-head"]], "polars.DataFrame.width": [[206, "polars-dataframe-width"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[210, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.Expr.arr.contains": [[267, "polars-expr-arr-contains"]], "polars.DataFrame.vstack": [[205, "polars-dataframe-vstack"]], "polars.internals.dataframe.pivot.PivotOps.max": [[229, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.Expr.abs": [[246, "polars-expr-abs"]], "polars.internals.dataframe.pivot.PivotOps.count": [[226, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.internals.dataframe.pivot.PivotOps.first": [[227, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.Expr.arctan": [[257, "polars-expr-arctan"]], "polars.internals.dataframe.pivot.PivotOps.last": [[228, "polars-internals-dataframe-pivot-pivotops-last"]], "polars.Expr.arcsinh": [[256, "polars-expr-arcsinh"]], "polars.DataFrame.unstack": [[202, "polars-dataframe-unstack"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[223, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.Expr.apply": [[252, "polars-expr-apply"]], "polars.Expr.arr.arg_max": [[264, "polars-expr-arr-arg-max"]], "polars.internals.dataframe.groupby.GroupBy.max": [[217, "polars-internals-dataframe-groupby-groupby-max"]], "polars.Expr.arg_unique": [[262, "polars-expr-arg-unique"]], "polars.Expr.arg_min": [[260, "polars-expr-arg-min"]], "polars.Expr.arr.arg_min": [[265, "polars-expr-arr-arg-min"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[212, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.Expr.any": [[250, "polars-expr-any"]], "polars.internals.dataframe.pivot.PivotOps.min": [[232, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.internals.dataframe.groupby.GroupBy.count": [[213, "polars-internals-dataframe-groupby-groupby-count"]], "polars.Expr.arccos": [[253, "polars-expr-arccos"]], "polars.DataFrame.with_row_count": [[209, "polars-dataframe-with-row-count"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[221, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.groupby.GroupBy.min": [[220, "polars-internals-dataframe-groupby-groupby-min"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[9, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[10, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[11, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[12, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[13, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[14, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[15, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[19, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[20, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[21, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[22, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[23, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[24, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[25, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[26, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[27, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[28, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[29, "polars.DataType"]], "__init__() (polars.datatype method)": [[29, "polars.DataType.__init__"]], "date (class in polars)": [[30, "polars.Date"]], "__init__() (polars.date method)": [[30, "polars.Date.__init__"]], "datetime (class in polars)": [[31, "polars.Datetime"]], "__init__() (polars.datetime method)": [[31, "polars.Datetime.__init__"]], "duration (class in polars)": [[32, "polars.Duration"]], "__init__() (polars.duration method)": [[32, "polars.Duration.__init__"]], "float32 (class in polars)": [[33, "polars.Float32"]], "__init__() (polars.float32 method)": [[33, "polars.Float32.__init__"]], "float64 (class in polars)": [[34, "polars.Float64"]], "__init__() (polars.float64 method)": [[34, "polars.Float64.__init__"]], "int16 (class in polars)": [[35, "polars.Int16"]], "__init__() (polars.int16 method)": [[35, "polars.Int16.__init__"]], "int32 (class in polars)": [[36, "polars.Int32"]], "__init__() (polars.int32 method)": [[36, "polars.Int32.__init__"]], "int64 (class in polars)": [[37, "polars.Int64"]], "__init__() (polars.int64 method)": [[37, "polars.Int64.__init__"]], "int8 (class in polars)": [[38, "polars.Int8"]], "__init__() (polars.int8 method)": [[38, "polars.Int8.__init__"]], "list (class in polars)": [[39, "polars.List"]], "__init__() (polars.list method)": [[39, "polars.List.__init__"]], "null (class in polars)": [[40, "polars.Null"]], "__init__() (polars.null method)": [[40, "polars.Null.__init__"]], "object (class in polars)": [[41, "polars.Object"]], "__init__() (polars.object method)": [[41, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[42, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[43, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[44, "polars.SQLContext.register"]], "stringcache (class in polars)": [[45, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[45, "polars.StringCache.__init__"]], "struct (class in polars)": [[46, "polars.Struct"]], "__init__() (polars.struct method)": [[46, "polars.Struct.__init__"]], "time (class in polars)": [[47, "polars.Time"]], "__init__() (polars.time method)": [[47, "polars.Time.__init__"]], "uint16 (class in polars)": [[48, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[48, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[49, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[49, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[50, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[50, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[51, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[51, "polars.UInt8.__init__"]], "unknown (class in polars)": [[52, "polars.Unknown"]], "__init__() (polars.unknown method)": [[52, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[53, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[53, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[54, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[55, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[56, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[57, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[58, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[59, "polars.arg_where"]], "build_info() (in module polars)": [[60, "polars.build_info"]], "collect_all() (in module polars)": [[61, "polars.collect_all"]], "concat() (in module polars)": [[62, "polars.concat"]], "cut() (in module polars)": [[63, "polars.cut"]], "date_range() (in module polars)": [[64, "polars.date_range"]], "arrowerror": [[65, "polars.exceptions.ArrowError"]], "computeerror": [[66, "polars.exceptions.ComputeError"]], "duplicateerror": [[67, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[68, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[69, "polars.exceptions.NoDataError"]], "norowsreturned": [[70, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[71, "polars.exceptions.NotFoundError"]], "panicexception": [[72, "polars.exceptions.PanicException"]], "rowsexception": [[73, "polars.exceptions.RowsException"]], "schemaerror": [[74, "polars.exceptions.SchemaError"]], "shapeerror": [[75, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[76, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[77, "polars.from_arrow"]], "from_dict() (in module polars)": [[78, "polars.from_dict"]], "from_dicts() (in module polars)": [[79, "polars.from_dicts"]], "from_numpy() (in module polars)": [[80, "polars.from_numpy"]], "from_pandas() (in module polars)": [[81, "polars.from_pandas"]], "from_records() (in module polars)": [[82, "polars.from_records"]], "get_dummies() (in module polars)": [[83, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[84, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[85, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[86, "polars.ones"]], "read_avro() (in module polars)": [[87, "polars.read_avro"]], "read_csv() (in module polars)": [[88, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[89, "polars.read_csv_batched"]], "read_delta() (in module polars)": [[90, "polars.read_delta"]], "read_excel() (in module polars)": [[91, "polars.read_excel"]], "read_ipc() (in module polars)": [[92, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[93, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[94, "polars.read_json"]], "read_ndjson() (in module polars)": [[95, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[96, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[97, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[98, "polars.read_sql"]], "scan_csv() (in module polars)": [[99, "polars.scan_csv"]], "scan_delta() (in module polars)": [[100, "polars.scan_delta"]], "scan_ds() (in module polars)": [[101, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[102, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[103, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[104, "polars.scan_parquet"]], "show_versions() (in module polars)": [[105, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[106, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[107, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[108, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[108, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[109, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[110, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[111, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[112, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[113, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[114, "polars.zeros"]], "apply() (polars.dataframe method)": [[117, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[118, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[119, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[120, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[121, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[122, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[123, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[124, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[125, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[126, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[127, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[128, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[129, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[130, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[131, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[132, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[133, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[134, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[135, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[136, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[137, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[138, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[139, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[140, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[141, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[142, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[143, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[144, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[145, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[146, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[147, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[148, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[149, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[150, "polars.DataFrame.item"]], "iterrows() (polars.dataframe method)": [[151, "polars.DataFrame.iterrows"]], "join() (polars.dataframe method)": [[152, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[153, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[154, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[155, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[156, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[157, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[158, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[159, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[160, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[161, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[162, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[163, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[164, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[165, "polars.DataFrame.partition_by"]], "pearson_corr() (polars.dataframe method)": [[166, "polars.DataFrame.pearson_corr"]], "pipe() (polars.dataframe method)": [[167, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[168, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[169, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[170, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[171, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[172, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[173, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[174, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[175, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[176, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[177, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[178, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[179, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[180, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[181, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[182, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[183, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[184, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[185, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[186, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[187, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[188, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[189, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[190, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[191, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[192, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[193, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[194, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[195, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[196, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[197, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[198, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[199, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[200, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[201, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[202, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[203, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[204, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[205, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[206, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[207, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[208, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[209, "polars.DataFrame.with_row_count"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[210, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[211, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[212, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[213, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[214, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[215, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[226, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[227, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[228, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[229, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[230, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[231, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[232, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[233, "polars.internals.dataframe.pivot.PivotOps.sum"]], "abs() (polars.expr method)": [[246, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[247, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[248, "polars.Expr.alias"]], "all() (polars.expr method)": [[249, "polars.Expr.all"]], "any() (polars.expr method)": [[250, "polars.Expr.any"]], "append() (polars.expr method)": [[251, "polars.Expr.append"]], "apply() (polars.expr method)": [[252, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[253, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[254, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[255, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[256, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[257, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[258, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[259, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[260, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[261, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[262, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[263, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[264, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[265, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[266, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[267, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[268, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[269, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[270, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[271, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[272, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[273, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[274, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[275, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[276, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[277, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[278, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[279, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[280, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[281, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[282, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[283, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[284, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[285, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[286, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[287, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[288, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[289, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[290, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[291, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[292, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[293, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[294, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[295, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[296, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[297, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[298, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[299, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[300, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[301, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[302, "polars.Expr.cosh"]], "count() (polars.expr method)": [[303, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[304, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[305, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[306, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[307, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[308, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[309, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[310, "polars.Expr.diff"]], "dot() (polars.expr method)": [[311, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[312, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[313, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[314, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[315, "polars.Expr.dt.cast_time_zone"]], "combine() (polars.expr.dt method)": [[316, "polars.Expr.dt.combine"]], "day() (polars.expr.dt method)": [[317, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[318, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[319, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[320, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[321, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[322, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[323, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[324, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[325, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[326, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[327, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[328, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[329, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[330, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[331, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[332, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[333, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[334, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[335, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[336, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[337, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[338, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[339, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[340, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[341, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[342, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[343, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[344, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[345, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[346, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[347, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[348, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[349, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[350, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[351, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[352, "polars.Expr.exp"]], "explode() (polars.expr method)": [[353, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[354, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[355, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[356, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[357, "polars.Expr.filter"]], "first() (polars.expr method)": [[358, "polars.Expr.first"]], "flatten() (polars.expr method)": [[359, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[360, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[361, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[362, "polars.Expr.hash"]], "head() (polars.expr method)": [[363, "polars.Expr.head"]], "inspect() (polars.expr method)": [[364, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[365, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[366, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[367, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[368, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[369, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[370, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[371, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[372, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[373, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[374, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[375, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[376, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[377, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[378, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[379, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[380, "polars.Expr.last"]], "len() (polars.expr method)": [[381, "polars.Expr.len"]], "limit() (polars.expr method)": [[382, "polars.Expr.limit"]], "list() (polars.expr method)": [[383, "polars.Expr.list"]], "log() (polars.expr method)": [[384, "polars.Expr.log"]], "log10() (polars.expr method)": [[385, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[386, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[387, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[388, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[389, "polars.Expr.max"]], "mean() (polars.expr method)": [[390, "polars.Expr.mean"]], "median() (polars.expr method)": [[391, "polars.Expr.median"]], "output_name() (polars.expr.meta method)": [[392, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[393, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[394, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[395, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[396, "polars.Expr.min"]], "mode() (polars.expr method)": [[397, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[398, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[399, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[400, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[401, "polars.Expr.null_count"]], "over() (polars.expr method)": [[402, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[403, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[404, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[405, "polars.Expr.prefix"]], "product() (polars.expr method)": [[406, "polars.Expr.product"]], "quantile() (polars.expr method)": [[407, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[408, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[409, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[410, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[411, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[412, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[413, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[414, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[415, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[416, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[417, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[418, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[419, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[420, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[421, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[422, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[423, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[424, "polars.Expr.round"]], "sample() (polars.expr method)": [[425, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[426, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[427, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[428, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[429, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[430, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[431, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[432, "polars.Expr.sign"]], "sin() (polars.expr method)": [[433, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[434, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[435, "polars.Expr.skew"]], "slice() (polars.expr method)": [[436, "polars.Expr.slice"]], "sort() (polars.expr method)": [[437, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[438, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[439, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[440, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[441, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[442, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[443, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[444, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[445, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[446, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[447, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[448, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[449, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[450, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[451, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[452, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[453, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[454, "polars.Expr.str.n_chars"]], "replace() (polars.expr.str method)": [[455, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[456, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[457, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[458, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[459, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[460, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[461, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[462, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[463, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[464, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[465, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[466, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[467, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[468, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[469, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[470, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[471, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[472, "polars.Expr.sum"]], "tail() (polars.expr method)": [[473, "polars.Expr.tail"]], "take() (polars.expr method)": [[474, "polars.Expr.take"]], "take_every() (polars.expr method)": [[475, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[476, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[477, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[478, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[479, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[480, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[481, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[482, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[483, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[484, "polars.Expr.var"]], "where() (polars.expr method)": [[485, "polars.Expr.where"]], "all() (in module polars)": [[486, "polars.all"]], "any() (in module polars)": [[487, "polars.any"]], "apply() (in module polars)": [[488, "polars.apply"]], "arange() (in module polars)": [[489, "polars.arange"]], "argsort_by() (in module polars)": [[490, "polars.argsort_by"]], "avg() (in module polars)": [[491, "polars.avg"]], "coalesce() (in module polars)": [[492, "polars.coalesce"]], "col() (in module polars)": [[493, "polars.col"]], "concat_list() (in module polars)": [[494, "polars.concat_list"]], "concat_str() (in module polars)": [[495, "polars.concat_str"]], "count() (in module polars)": [[496, "polars.count"]], "cov() (in module polars)": [[497, "polars.cov"]], "cumfold() (in module polars)": [[498, "polars.cumfold"]], "cumreduce() (in module polars)": [[499, "polars.cumreduce"]], "cumsum() (in module polars)": [[500, "polars.cumsum"]], "date() (in module polars)": [[501, "polars.date"]], "datetime() (in module polars)": [[502, "polars.datetime"]], "duration() (in module polars)": [[503, "polars.duration"]], "element() (in module polars)": [[504, "polars.element"]], "exclude() (in module polars)": [[505, "polars.exclude"]], "first() (in module polars)": [[506, "polars.first"]], "fold() (in module polars)": [[507, "polars.fold"]], "format() (in module polars)": [[508, "polars.format"]], "from_epoch() (in module polars)": [[509, "polars.from_epoch"]], "groups() (in module polars)": [[510, "polars.groups"]], "head() (in module polars)": [[511, "polars.head"]], "list() (in module polars)": [[512, "polars.list"]], "lit() (in module polars)": [[513, "polars.lit"]], "map() (in module polars)": [[514, "polars.map"]], "max() (in module polars)": [[515, "polars.max"]], "mean() (in module polars)": [[516, "polars.mean"]], "median() (in module polars)": [[517, "polars.median"]], "min() (in module polars)": [[518, "polars.min"]], "n_unique() (in module polars)": [[519, "polars.n_unique"]], "pearson_corr() (in module polars)": [[520, "polars.pearson_corr"]], "quantile() (in module polars)": [[521, "polars.quantile"]], "reduce() (in module polars)": [[522, "polars.reduce"]], "repeat() (in module polars)": [[523, "polars.repeat"]], "select() (in module polars)": [[524, "polars.select"]], "spearman_rank_corr() (in module polars)": [[525, "polars.spearman_rank_corr"]], "std() (in module polars)": [[526, "polars.std"]], "struct() (in module polars)": [[527, "polars.struct"]], "sum() (in module polars)": [[528, "polars.sum"]], "tail() (in module polars)": [[529, "polars.tail"]], "var() (in module polars)": [[530, "polars.var"]], "when() (in module polars)": [[531, "polars.when"]], "cache() (polars.lazyframe method)": [[551, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[552, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[553, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[554, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[555, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[556, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[557, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[558, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[559, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[560, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[561, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[562, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[563, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[564, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[565, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[566, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[567, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[568, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[569, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[570, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[571, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[572, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[573, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[574, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[575, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[576, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[577, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[578, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[579, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[580, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[581, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[582, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[583, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[584, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[585, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[586, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[587, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[588, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[589, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[590, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[591, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[592, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[593, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[594, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[595, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[596, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[597, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[598, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[599, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[600, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[601, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[602, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[603, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[604, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[605, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[606, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[607, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[608, "polars.LazyFrame.width"]], "with_column() (polars.lazyframe method)": [[609, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[610, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[611, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[612, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[613, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[614, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[615, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[616, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[617, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[625, "polars.Series.abs"]], "alias() (polars.series method)": [[626, "polars.Series.alias"]], "all() (polars.series method)": [[627, "polars.Series.all"]], "any() (polars.series method)": [[628, "polars.Series.any"]], "append() (polars.series method)": [[629, "polars.Series.append"]], "apply() (polars.series method)": [[630, "polars.Series.apply"]], "arccos() (polars.series method)": [[631, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[632, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[633, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[634, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[635, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[636, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[637, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[638, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[639, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[640, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[641, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[642, "polars.Series.argsort"]], "arr (polars.series attribute)": [[643, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[644, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[645, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[646, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[647, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[648, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[649, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[650, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[651, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[652, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[653, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[654, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[655, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[656, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[657, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[658, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[659, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[660, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[661, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[662, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[663, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[664, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[665, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[666, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[667, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[668, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[669, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[670, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[671, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[672, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[673, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[674, "polars.Series.cast"]], "cat (polars.series attribute)": [[675, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[676, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[677, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[678, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[679, "polars.Series.cleared"]], "clip() (polars.series method)": [[680, "polars.Series.clip"]], "clip_max() (polars.series method)": [[681, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[682, "polars.Series.clip_min"]], "clone() (polars.series method)": [[683, "polars.Series.clone"]], "cos() (polars.series method)": [[684, "polars.Series.cos"]], "cosh() (polars.series method)": [[685, "polars.Series.cosh"]], "cummax() (polars.series method)": [[686, "polars.Series.cummax"]], "cummin() (polars.series method)": [[687, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[688, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[689, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[690, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[691, "polars.Series.describe"]], "diff() (polars.series method)": [[692, "polars.Series.diff"]], "dot() (polars.series method)": [[693, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[694, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[695, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[696, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[697, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[698, "polars.Series.dt.cast_time_zone"]], "combine() (polars.series.dt method)": [[699, "polars.Series.dt.combine"]], "day() (polars.series.dt method)": [[700, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[701, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[702, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[703, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[704, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[705, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[706, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[707, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[708, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[709, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[710, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[711, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[712, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[713, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[714, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[715, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[716, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[717, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[718, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[719, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[720, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[721, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[722, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[723, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[724, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[725, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[726, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[727, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[728, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[729, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[730, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[731, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[732, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[733, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[734, "polars.Series.dtype"]], "entropy() (polars.series method)": [[735, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[736, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[737, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[738, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[739, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[740, "polars.Series.exp"]], "explode() (polars.series method)": [[741, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[742, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[743, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[744, "polars.Series.fill_null"]], "filter() (polars.series method)": [[745, "polars.Series.filter"]], "flags (polars.series attribute)": [[746, "polars.Series.flags"]], "floor() (polars.series method)": [[747, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[748, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[749, "polars.Series.has_validity"]], "hash() (polars.series method)": [[750, "polars.Series.hash"]], "head() (polars.series method)": [[751, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[752, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[753, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[754, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[755, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[756, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[757, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[758, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[759, "polars.Series.is_first"]], "is_float() (polars.series method)": [[760, "polars.Series.is_float"]], "is_in() (polars.series method)": [[761, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[762, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[763, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[764, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[765, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[766, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[767, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[768, "polars.Series.is_sorted"]], "is_unique() (polars.series method)": [[769, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[770, "polars.Series.is_utf8"]], "item() (polars.series method)": [[771, "polars.Series.item"]], "kurtosis() (polars.series method)": [[772, "polars.Series.kurtosis"]], "len() (polars.series method)": [[773, "polars.Series.len"]], "limit() (polars.series method)": [[774, "polars.Series.limit"]], "log() (polars.series method)": [[775, "polars.Series.log"]], "log10() (polars.series method)": [[776, "polars.Series.log10"]], "max() (polars.series method)": [[777, "polars.Series.max"]], "mean() (polars.series method)": [[778, "polars.Series.mean"]], "median() (polars.series method)": [[779, "polars.Series.median"]], "min() (polars.series method)": [[780, "polars.Series.min"]], "mode() (polars.series method)": [[781, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[782, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[783, "polars.Series.n_unique"]], "name (polars.series attribute)": [[784, "polars.Series.name"]], "nan_max() (polars.series method)": [[785, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[786, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[787, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[788, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[789, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[790, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[791, "polars.Series.peak_min"]], "product() (polars.series method)": [[792, "polars.Series.product"]], "quantile() (polars.series method)": [[793, "polars.Series.quantile"]], "rank() (polars.series method)": [[794, "polars.Series.rank"]], "rechunk() (polars.series method)": [[795, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[796, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[797, "polars.Series.rename"]], "reshape() (polars.series method)": [[798, "polars.Series.reshape"]], "reverse() (polars.series method)": [[799, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[800, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[801, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[802, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[803, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[804, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[805, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[806, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[807, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[808, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[809, "polars.Series.rolling_var"]], "round() (polars.series method)": [[810, "polars.Series.round"]], "sample() (polars.series method)": [[811, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[812, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[813, "polars.Series.series_equal"]], "set() (polars.series method)": [[814, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[815, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[816, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[817, "polars.Series.shape"]], "shift() (polars.series method)": [[818, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[819, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[820, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[821, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[822, "polars.Series.shuffle"]], "sign() (polars.series method)": [[823, "polars.Series.sign"]], "sin() (polars.series method)": [[824, "polars.Series.sin"]], "sinh() (polars.series method)": [[825, "polars.Series.sinh"]], "skew() (polars.series method)": [[826, "polars.Series.skew"]], "slice() (polars.series method)": [[827, "polars.Series.slice"]], "sort() (polars.series method)": [[828, "polars.Series.sort"]], "sqrt() (polars.series method)": [[829, "polars.Series.sqrt"]], "std() (polars.series method)": [[830, "polars.Series.std"]], "str (polars.series attribute)": [[831, "polars.Series.str"]], "concat() (polars.series.str method)": [[832, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[833, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[834, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[835, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[836, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[837, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[838, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[839, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[840, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[841, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[842, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[843, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[844, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[845, "polars.Series.str.n_chars"]], "replace() (polars.series.str method)": [[846, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[847, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[848, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[849, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[850, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[851, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[852, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[853, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[854, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[855, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[856, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[857, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[858, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[859, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[860, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[861, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[862, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[863, "polars.Series.struct.to_frame"]], "unnest() (polars.series.struct method)": [[864, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[865, "polars.Series.sum"]], "tail() (polars.series method)": [[866, "polars.Series.tail"]], "take() (polars.series method)": [[867, "polars.Series.take"]], "take_every() (polars.series method)": [[868, "polars.Series.take_every"]], "tan() (polars.series method)": [[869, "polars.Series.tan"]], "tanh() (polars.series method)": [[870, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[871, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[872, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[873, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[874, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[875, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[876, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[877, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[878, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[879, "polars.Series.top_k"]], "unique() (polars.series method)": [[880, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[881, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[882, "polars.Series.value_counts"]], "var() (polars.series method)": [[883, "polars.Series.var"]], "view() (polars.series method)": [[884, "polars.Series.view"]], "zip_with() (polars.series method)": [[885, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[900, "polars.SQLContext"]]}})